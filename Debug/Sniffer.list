
Sniffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000206c  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800212c  0800212c  0000312c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800216c  0800216c  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  0800216c  0800216c  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  0800216c  0800216c  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800216c  0800216c  0000316c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002170  08002170  00003170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002174  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  2000000c  08002180  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000280  08002180  00004280  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009739  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001a41  00000000  00000000  0000d76d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000a20  00000000  00000000  0000f1b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007cf  00000000  00000000  0000fbd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00012569  00000000  00000000  0001039f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b8a0  00000000  00000000  00022908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074bb7  00000000  00000000  0002e1a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a2d5f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023f4  00000000  00000000  000a2da4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000a5198  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002114 	.word	0x08002114

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08002114 	.word	0x08002114

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <HAL_TIM_PeriodElapsedCallback>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim14;

/* USER CODE BEGIN PV */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM14) // Verifica se Ã© o TIM2
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a12      	ldr	r2, [pc, #72]	@ (8000278 <HAL_TIM_PeriodElapsedCallback+0x58>)
 800022e:	4293      	cmp	r3, r2
 8000230:	d11e      	bne.n	8000270 <HAL_TIM_PeriodElapsedCallback+0x50>
    {
    	//HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
        // Chamar funÃ§Ãµes a cada 1ms
        processPulses();
 8000232:	f000 fb1b 	bl	800086c <processPulses>

        if (data_ready)
 8000236:	4b11      	ldr	r3, [pc, #68]	@ (800027c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2b00      	cmp	r3, #0
 800023c:	d005      	beq.n	800024a <HAL_TIM_PeriodElapsedCallback+0x2a>
        {
        	//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_SET);
            analyze_pulses();
 800023e:	f000 f983 	bl	8000548 <analyze_pulses>
            data_ready = 0; // Reseta a flag apÃ³s o uso
 8000242:	4b0e      	ldr	r3, [pc, #56]	@ (800027c <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000244:	2200      	movs	r2, #0
 8000246:	701a      	strb	r2, [r3, #0]
            analyze_payload();
            payload_ready = 0;
            //HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_RESET);
        }
    }
}
 8000248:	e012      	b.n	8000270 <HAL_TIM_PeriodElapsedCallback+0x50>
        else if (decode_ready)
 800024a:	4b0d      	ldr	r3, [pc, #52]	@ (8000280 <HAL_TIM_PeriodElapsedCallback+0x60>)
 800024c:	781b      	ldrb	r3, [r3, #0]
 800024e:	2b00      	cmp	r3, #0
 8000250:	d005      	beq.n	800025e <HAL_TIM_PeriodElapsedCallback+0x3e>
            convert_duty_to_bits();
 8000252:	f000 f9c5 	bl	80005e0 <convert_duty_to_bits>
            decode_ready = 0; // Reseta a flag apÃ³s o uso
 8000256:	4b0a      	ldr	r3, [pc, #40]	@ (8000280 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000258:	2200      	movs	r2, #0
 800025a:	701a      	strb	r2, [r3, #0]
}
 800025c:	e008      	b.n	8000270 <HAL_TIM_PeriodElapsedCallback+0x50>
        else if (payload_ready)
 800025e:	4b09      	ldr	r3, [pc, #36]	@ (8000284 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8000260:	781b      	ldrb	r3, [r3, #0]
 8000262:	2b00      	cmp	r3, #0
 8000264:	d004      	beq.n	8000270 <HAL_TIM_PeriodElapsedCallback+0x50>
            analyze_payload();
 8000266:	f000 fa07 	bl	8000678 <analyze_payload>
            payload_ready = 0;
 800026a:	4b06      	ldr	r3, [pc, #24]	@ (8000284 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800026c:	2200      	movs	r2, #0
 800026e:	701a      	strb	r2, [r3, #0]
}
 8000270:	46c0      	nop			@ (mov r8, r8)
 8000272:	46bd      	mov	sp, r7
 8000274:	b002      	add	sp, #8
 8000276:	bd80      	pop	{r7, pc}
 8000278:	40002000 	.word	0x40002000
 800027c:	2000026c 	.word	0x2000026c
 8000280:	200000fb 	.word	0x200000fb
 8000284:	200000fc 	.word	0x200000fc

08000288 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000288:	b580      	push	{r7, lr}
 800028a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800028c:	f000 fc7e 	bl	8000b8c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000290:	f000 f818 	bl	80002c4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000294:	f000 f8e0 	bl	8000458 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000298:	f000 f862 	bl	8000360 <MX_TIM3_Init>
  MX_TIM14_Init();
 800029c:	f000 f8b6 	bl	800040c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
    // HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
    HAL_TIM_Base_Start(&htim3);
 80002a0:	4b06      	ldr	r3, [pc, #24]	@ (80002bc <main+0x34>)
 80002a2:	0018      	movs	r0, r3
 80002a4:	f001 faf0 	bl	8001888 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start_IT(&htim14);
 80002a8:	4b05      	ldr	r3, [pc, #20]	@ (80002c0 <main+0x38>)
 80002aa:	0018      	movs	r0, r3
 80002ac:	f001 fb32 	bl	8001914 <HAL_TIM_Base_Start_IT>
    setTimerPulses(&htim3);
 80002b0:	4b02      	ldr	r3, [pc, #8]	@ (80002bc <main+0x34>)
 80002b2:	0018      	movs	r0, r3
 80002b4:	f000 fb4e 	bl	8000954 <setTimerPulses>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 80002b8:	46c0      	nop			@ (mov r8, r8)
 80002ba:	e7fd      	b.n	80002b8 <main+0x30>
 80002bc:	20000028 	.word	0x20000028
 80002c0:	20000074 	.word	0x20000074

080002c4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80002c4:	b590      	push	{r4, r7, lr}
 80002c6:	b08d      	sub	sp, #52	@ 0x34
 80002c8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80002ca:	2414      	movs	r4, #20
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	0018      	movs	r0, r3
 80002d0:	231c      	movs	r3, #28
 80002d2:	001a      	movs	r2, r3
 80002d4:	2100      	movs	r1, #0
 80002d6:	f001 fef1 	bl	80020bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002da:	003b      	movs	r3, r7
 80002dc:	0018      	movs	r0, r3
 80002de:	2314      	movs	r3, #20
 80002e0:	001a      	movs	r2, r3
 80002e2:	2100      	movs	r1, #0
 80002e4:	f001 feea 	bl	80020bc <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 80002e8:	4b1c      	ldr	r3, [pc, #112]	@ (800035c <SystemClock_Config+0x98>)
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	2207      	movs	r2, #7
 80002ee:	4393      	bics	r3, r2
 80002f0:	001a      	movs	r2, r3
 80002f2:	4b1a      	ldr	r3, [pc, #104]	@ (800035c <SystemClock_Config+0x98>)
 80002f4:	2101      	movs	r1, #1
 80002f6:	430a      	orrs	r2, r1
 80002f8:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002fa:	193b      	adds	r3, r7, r4
 80002fc:	2202      	movs	r2, #2
 80002fe:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000300:	193b      	adds	r3, r7, r4
 8000302:	2280      	movs	r2, #128	@ 0x80
 8000304:	0052      	lsls	r2, r2, #1
 8000306:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000308:	193b      	adds	r3, r7, r4
 800030a:	2200      	movs	r2, #0
 800030c:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800030e:	193b      	adds	r3, r7, r4
 8000310:	2240      	movs	r2, #64	@ 0x40
 8000312:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000314:	193b      	adds	r3, r7, r4
 8000316:	0018      	movs	r0, r3
 8000318:	f000 ff38 	bl	800118c <HAL_RCC_OscConfig>
 800031c:	1e03      	subs	r3, r0, #0
 800031e:	d001      	beq.n	8000324 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000320:	f000 f90c 	bl	800053c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000324:	003b      	movs	r3, r7
 8000326:	2207      	movs	r2, #7
 8000328:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800032a:	003b      	movs	r3, r7
 800032c:	2200      	movs	r2, #0
 800032e:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000330:	003b      	movs	r3, r7
 8000332:	2200      	movs	r2, #0
 8000334:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000336:	003b      	movs	r3, r7
 8000338:	2200      	movs	r2, #0
 800033a:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800033c:	003b      	movs	r3, r7
 800033e:	2200      	movs	r2, #0
 8000340:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000342:	003b      	movs	r3, r7
 8000344:	2101      	movs	r1, #1
 8000346:	0018      	movs	r0, r3
 8000348:	f001 f904 	bl	8001554 <HAL_RCC_ClockConfig>
 800034c:	1e03      	subs	r3, r0, #0
 800034e:	d001      	beq.n	8000354 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000350:	f000 f8f4 	bl	800053c <Error_Handler>
  }
}
 8000354:	46c0      	nop			@ (mov r8, r8)
 8000356:	46bd      	mov	sp, r7
 8000358:	b00d      	add	sp, #52	@ 0x34
 800035a:	bd90      	pop	{r4, r7, pc}
 800035c:	40022000 	.word	0x40022000

08000360 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000360:	b580      	push	{r7, lr}
 8000362:	b088      	sub	sp, #32
 8000364:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000366:	2310      	movs	r3, #16
 8000368:	18fb      	adds	r3, r7, r3
 800036a:	0018      	movs	r0, r3
 800036c:	2310      	movs	r3, #16
 800036e:	001a      	movs	r2, r3
 8000370:	2100      	movs	r1, #0
 8000372:	f001 fea3 	bl	80020bc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000376:	1d3b      	adds	r3, r7, #4
 8000378:	0018      	movs	r0, r3
 800037a:	230c      	movs	r3, #12
 800037c:	001a      	movs	r2, r3
 800037e:	2100      	movs	r1, #0
 8000380:	f001 fe9c 	bl	80020bc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000384:	4b1e      	ldr	r3, [pc, #120]	@ (8000400 <MX_TIM3_Init+0xa0>)
 8000386:	4a1f      	ldr	r2, [pc, #124]	@ (8000404 <MX_TIM3_Init+0xa4>)
 8000388:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 800038a:	4b1d      	ldr	r3, [pc, #116]	@ (8000400 <MX_TIM3_Init+0xa0>)
 800038c:	2205      	movs	r2, #5
 800038e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000390:	4b1b      	ldr	r3, [pc, #108]	@ (8000400 <MX_TIM3_Init+0xa0>)
 8000392:	2200      	movs	r2, #0
 8000394:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000396:	4b1a      	ldr	r3, [pc, #104]	@ (8000400 <MX_TIM3_Init+0xa0>)
 8000398:	4a1b      	ldr	r2, [pc, #108]	@ (8000408 <MX_TIM3_Init+0xa8>)
 800039a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800039c:	4b18      	ldr	r3, [pc, #96]	@ (8000400 <MX_TIM3_Init+0xa0>)
 800039e:	2200      	movs	r2, #0
 80003a0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80003a2:	4b17      	ldr	r3, [pc, #92]	@ (8000400 <MX_TIM3_Init+0xa0>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80003a8:	4b15      	ldr	r3, [pc, #84]	@ (8000400 <MX_TIM3_Init+0xa0>)
 80003aa:	0018      	movs	r0, r3
 80003ac:	f001 fa14 	bl	80017d8 <HAL_TIM_Base_Init>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80003b4:	f000 f8c2 	bl	800053c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80003b8:	2110      	movs	r1, #16
 80003ba:	187b      	adds	r3, r7, r1
 80003bc:	2280      	movs	r2, #128	@ 0x80
 80003be:	0152      	lsls	r2, r2, #5
 80003c0:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80003c2:	187a      	adds	r2, r7, r1
 80003c4:	4b0e      	ldr	r3, [pc, #56]	@ (8000400 <MX_TIM3_Init+0xa0>)
 80003c6:	0011      	movs	r1, r2
 80003c8:	0018      	movs	r0, r3
 80003ca:	f001 fbf9 	bl	8001bc0 <HAL_TIM_ConfigClockSource>
 80003ce:	1e03      	subs	r3, r0, #0
 80003d0:	d001      	beq.n	80003d6 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80003d2:	f000 f8b3 	bl	800053c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003d6:	1d3b      	adds	r3, r7, #4
 80003d8:	2200      	movs	r2, #0
 80003da:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003dc:	1d3b      	adds	r3, r7, #4
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80003e2:	1d3a      	adds	r2, r7, #4
 80003e4:	4b06      	ldr	r3, [pc, #24]	@ (8000400 <MX_TIM3_Init+0xa0>)
 80003e6:	0011      	movs	r1, r2
 80003e8:	0018      	movs	r0, r3
 80003ea:	f001 fded 	bl	8001fc8 <HAL_TIMEx_MasterConfigSynchronization>
 80003ee:	1e03      	subs	r3, r0, #0
 80003f0:	d001      	beq.n	80003f6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80003f2:	f000 f8a3 	bl	800053c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80003f6:	46c0      	nop			@ (mov r8, r8)
 80003f8:	46bd      	mov	sp, r7
 80003fa:	b008      	add	sp, #32
 80003fc:	bd80      	pop	{r7, pc}
 80003fe:	46c0      	nop			@ (mov r8, r8)
 8000400:	20000028 	.word	0x20000028
 8000404:	40000400 	.word	0x40000400
 8000408:	0000ffff 	.word	0x0000ffff

0800040c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 800040c:	b580      	push	{r7, lr}
 800040e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000410:	4b0e      	ldr	r3, [pc, #56]	@ (800044c <MX_TIM14_Init+0x40>)
 8000412:	4a0f      	ldr	r2, [pc, #60]	@ (8000450 <MX_TIM14_Init+0x44>)
 8000414:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 47;
 8000416:	4b0d      	ldr	r3, [pc, #52]	@ (800044c <MX_TIM14_Init+0x40>)
 8000418:	222f      	movs	r2, #47	@ 0x2f
 800041a:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 800041c:	4b0b      	ldr	r3, [pc, #44]	@ (800044c <MX_TIM14_Init+0x40>)
 800041e:	2200      	movs	r2, #0
 8000420:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 8000422:	4b0a      	ldr	r3, [pc, #40]	@ (800044c <MX_TIM14_Init+0x40>)
 8000424:	4a0b      	ldr	r2, [pc, #44]	@ (8000454 <MX_TIM14_Init+0x48>)
 8000426:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000428:	4b08      	ldr	r3, [pc, #32]	@ (800044c <MX_TIM14_Init+0x40>)
 800042a:	2200      	movs	r2, #0
 800042c:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800042e:	4b07      	ldr	r3, [pc, #28]	@ (800044c <MX_TIM14_Init+0x40>)
 8000430:	2200      	movs	r2, #0
 8000432:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000434:	4b05      	ldr	r3, [pc, #20]	@ (800044c <MX_TIM14_Init+0x40>)
 8000436:	0018      	movs	r0, r3
 8000438:	f001 f9ce 	bl	80017d8 <HAL_TIM_Base_Init>
 800043c:	1e03      	subs	r3, r0, #0
 800043e:	d001      	beq.n	8000444 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000440:	f000 f87c 	bl	800053c <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000444:	46c0      	nop			@ (mov r8, r8)
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	46c0      	nop			@ (mov r8, r8)
 800044c:	20000074 	.word	0x20000074
 8000450:	40002000 	.word	0x40002000
 8000454:	000003e7 	.word	0x000003e7

08000458 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000458:	b590      	push	{r4, r7, lr}
 800045a:	b089      	sub	sp, #36	@ 0x24
 800045c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800045e:	240c      	movs	r4, #12
 8000460:	193b      	adds	r3, r7, r4
 8000462:	0018      	movs	r0, r3
 8000464:	2314      	movs	r3, #20
 8000466:	001a      	movs	r2, r3
 8000468:	2100      	movs	r1, #0
 800046a:	f001 fe27 	bl	80020bc <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800046e:	4b2e      	ldr	r3, [pc, #184]	@ (8000528 <MX_GPIO_Init+0xd0>)
 8000470:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000472:	4b2d      	ldr	r3, [pc, #180]	@ (8000528 <MX_GPIO_Init+0xd0>)
 8000474:	2104      	movs	r1, #4
 8000476:	430a      	orrs	r2, r1
 8000478:	635a      	str	r2, [r3, #52]	@ 0x34
 800047a:	4b2b      	ldr	r3, [pc, #172]	@ (8000528 <MX_GPIO_Init+0xd0>)
 800047c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800047e:	2204      	movs	r2, #4
 8000480:	4013      	ands	r3, r2
 8000482:	60bb      	str	r3, [r7, #8]
 8000484:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000486:	4b28      	ldr	r3, [pc, #160]	@ (8000528 <MX_GPIO_Init+0xd0>)
 8000488:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800048a:	4b27      	ldr	r3, [pc, #156]	@ (8000528 <MX_GPIO_Init+0xd0>)
 800048c:	2101      	movs	r1, #1
 800048e:	430a      	orrs	r2, r1
 8000490:	635a      	str	r2, [r3, #52]	@ 0x34
 8000492:	4b25      	ldr	r3, [pc, #148]	@ (8000528 <MX_GPIO_Init+0xd0>)
 8000494:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000496:	2201      	movs	r2, #1
 8000498:	4013      	ands	r3, r2
 800049a:	607b      	str	r3, [r7, #4]
 800049c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 800049e:	2380      	movs	r3, #128	@ 0x80
 80004a0:	0099      	lsls	r1, r3, #2
 80004a2:	23a0      	movs	r3, #160	@ 0xa0
 80004a4:	05db      	lsls	r3, r3, #23
 80004a6:	2200      	movs	r2, #0
 80004a8:	0018      	movs	r0, r3
 80004aa:	f000 fe51 	bl	8001150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PIR_Pin */
  GPIO_InitStruct.Pin = PIR_Pin;
 80004ae:	193b      	adds	r3, r7, r4
 80004b0:	2280      	movs	r2, #128	@ 0x80
 80004b2:	01d2      	lsls	r2, r2, #7
 80004b4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80004b6:	193b      	adds	r3, r7, r4
 80004b8:	4a1c      	ldr	r2, [pc, #112]	@ (800052c <MX_GPIO_Init+0xd4>)
 80004ba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004bc:	193b      	adds	r3, r7, r4
 80004be:	2200      	movs	r2, #0
 80004c0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 80004c2:	193b      	adds	r3, r7, r4
 80004c4:	4a1a      	ldr	r2, [pc, #104]	@ (8000530 <MX_GPIO_Init+0xd8>)
 80004c6:	0019      	movs	r1, r3
 80004c8:	0010      	movs	r0, r2
 80004ca:	f000 fcd7 	bl	8000e7c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80004ce:	0021      	movs	r1, r4
 80004d0:	187b      	adds	r3, r7, r1
 80004d2:	2280      	movs	r2, #128	@ 0x80
 80004d4:	0092      	lsls	r2, r2, #2
 80004d6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004d8:	187b      	adds	r3, r7, r1
 80004da:	2201      	movs	r2, #1
 80004dc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004de:	187b      	adds	r3, r7, r1
 80004e0:	2200      	movs	r2, #0
 80004e2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004e4:	187b      	adds	r3, r7, r1
 80004e6:	2200      	movs	r2, #0
 80004e8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80004ea:	187a      	adds	r2, r7, r1
 80004ec:	23a0      	movs	r3, #160	@ 0xa0
 80004ee:	05db      	lsls	r3, r3, #23
 80004f0:	0011      	movs	r1, r2
 80004f2:	0018      	movs	r0, r3
 80004f4:	f000 fcc2 	bl	8000e7c <HAL_GPIO_Init>

  /**/
  __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA9);
 80004f8:	4b0e      	ldr	r3, [pc, #56]	@ (8000534 <MX_GPIO_Init+0xdc>)
 80004fa:	681a      	ldr	r2, [r3, #0]
 80004fc:	4b0d      	ldr	r3, [pc, #52]	@ (8000534 <MX_GPIO_Init+0xdc>)
 80004fe:	2180      	movs	r1, #128	@ 0x80
 8000500:	03c9      	lsls	r1, r1, #15
 8000502:	430a      	orrs	r2, r1
 8000504:	601a      	str	r2, [r3, #0]

  /**/
  HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN5_PA11);
 8000506:	4b0c      	ldr	r3, [pc, #48]	@ (8000538 <MX_GPIO_Init+0xe0>)
 8000508:	0018      	movs	r0, r3
 800050a:	f000 fbcd 	bl	8000ca8 <HAL_SYSCFG_SetPinBinding>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	2007      	movs	r0, #7
 8000514:	f000 fc80 	bl	8000e18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000518:	2007      	movs	r0, #7
 800051a:	f000 fc92 	bl	8000e42 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800051e:	46c0      	nop			@ (mov r8, r8)
 8000520:	46bd      	mov	sp, r7
 8000522:	b009      	add	sp, #36	@ 0x24
 8000524:	bd90      	pop	{r4, r7, pc}
 8000526:	46c0      	nop			@ (mov r8, r8)
 8000528:	40021000 	.word	0x40021000
 800052c:	10310000 	.word	0x10310000
 8000530:	50000800 	.word	0x50000800
 8000534:	40010000 	.word	0x40010000
 8000538:	00300010 	.word	0x00300010

0800053c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000540:	b672      	cpsid	i
}
 8000542:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000544:	46c0      	nop			@ (mov r8, r8)
 8000546:	e7fd      	b.n	8000544 <Error_Handler+0x8>

08000548 <analyze_pulses>:
int16_t valor_PIR = 0;

uint8_t verify_payload(void);

void analyze_pulses(void)
{
 8000548:	b580      	push	{r7, lr}
 800054a:	b086      	sub	sp, #24
 800054c:	af00      	add	r7, sp, #0
    const volatile uint32_t *pulse_widths = get_width_pulses();
 800054e:	f000 f9f9 	bl	8000944 <get_width_pulses>
 8000552:	0003      	movs	r3, r0
 8000554:	613b      	str	r3, [r7, #16]
    uint32_t highTime, lowTime, totalTime;

    for (uint8_t i = 0, j = 0; i < PULSE_BUFFER_SIZE - 1; i += 2, j++)
 8000556:	2317      	movs	r3, #23
 8000558:	18fb      	adds	r3, r7, r3
 800055a:	2200      	movs	r2, #0
 800055c:	701a      	strb	r2, [r3, #0]
 800055e:	2316      	movs	r3, #22
 8000560:	18fb      	adds	r3, r7, r3
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
 8000566:	e02a      	b.n	80005be <analyze_pulses+0x76>
    {
        highTime = pulse_widths[i];
 8000568:	2117      	movs	r1, #23
 800056a:	187b      	adds	r3, r7, r1
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	009b      	lsls	r3, r3, #2
 8000570:	693a      	ldr	r2, [r7, #16]
 8000572:	18d3      	adds	r3, r2, r3
 8000574:	681b      	ldr	r3, [r3, #0]
 8000576:	60fb      	str	r3, [r7, #12]
        lowTime = pulse_widths[i + 1];
 8000578:	187b      	adds	r3, r7, r1
 800057a:	781b      	ldrb	r3, [r3, #0]
 800057c:	3301      	adds	r3, #1
 800057e:	009b      	lsls	r3, r3, #2
 8000580:	693a      	ldr	r2, [r7, #16]
 8000582:	18d3      	adds	r3, r2, r3
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	60bb      	str	r3, [r7, #8]
        totalTime = highTime + lowTime;
 8000588:	68fa      	ldr	r2, [r7, #12]
 800058a:	68bb      	ldr	r3, [r7, #8]
 800058c:	18d3      	adds	r3, r2, r3
 800058e:	607b      	str	r3, [r7, #4]
            duty_cycles[j] = 0; // Evita divisÃ£o por zero
        }*/

        //Outra Estrategia

        duty_cycles[j] = (highTime <= MAX_TIME_LOW) ? 50 : 90;
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	2b5a      	cmp	r3, #90	@ 0x5a
 8000594:	d801      	bhi.n	800059a <analyze_pulses+0x52>
 8000596:	2132      	movs	r1, #50	@ 0x32
 8000598:	e000      	b.n	800059c <analyze_pulses+0x54>
 800059a:	215a      	movs	r1, #90	@ 0x5a
 800059c:	2016      	movs	r0, #22
 800059e:	183b      	adds	r3, r7, r0
 80005a0:	781a      	ldrb	r2, [r3, #0]
 80005a2:	4b0d      	ldr	r3, [pc, #52]	@ (80005d8 <analyze_pulses+0x90>)
 80005a4:	0052      	lsls	r2, r2, #1
 80005a6:	52d1      	strh	r1, [r2, r3]
    for (uint8_t i = 0, j = 0; i < PULSE_BUFFER_SIZE - 1; i += 2, j++)
 80005a8:	2217      	movs	r2, #23
 80005aa:	18bb      	adds	r3, r7, r2
 80005ac:	18ba      	adds	r2, r7, r2
 80005ae:	7812      	ldrb	r2, [r2, #0]
 80005b0:	3202      	adds	r2, #2
 80005b2:	701a      	strb	r2, [r3, #0]
 80005b4:	183b      	adds	r3, r7, r0
 80005b6:	781a      	ldrb	r2, [r3, #0]
 80005b8:	183b      	adds	r3, r7, r0
 80005ba:	3201      	adds	r2, #1
 80005bc:	701a      	strb	r2, [r3, #0]
 80005be:	2317      	movs	r3, #23
 80005c0:	18fb      	adds	r3, r7, r3
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b30      	cmp	r3, #48	@ 0x30
 80005c6:	d9cf      	bls.n	8000568 <analyze_pulses+0x20>

    }

    decode_ready = 1;
 80005c8:	4b04      	ldr	r3, [pc, #16]	@ (80005dc <analyze_pulses+0x94>)
 80005ca:	2201      	movs	r2, #1
 80005cc:	701a      	strb	r2, [r3, #0]
}
 80005ce:	46c0      	nop			@ (mov r8, r8)
 80005d0:	46bd      	mov	sp, r7
 80005d2:	b006      	add	sp, #24
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	46c0      	nop			@ (mov r8, r8)
 80005d8:	200000c0 	.word	0x200000c0
 80005dc:	200000fb 	.word	0x200000fb

080005e0 <convert_duty_to_bits>:
{
    return duty_cycles;
}

void convert_duty_to_bits(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0

    for (uint8_t i = 1, j = 0; i <= 19; i++, j++)
 80005e6:	1dfb      	adds	r3, r7, #7
 80005e8:	2201      	movs	r2, #1
 80005ea:	701a      	strb	r2, [r3, #0]
 80005ec:	1dbb      	adds	r3, r7, #6
 80005ee:	2200      	movs	r2, #0
 80005f0:	701a      	strb	r2, [r3, #0]
 80005f2:	e018      	b.n	8000626 <convert_duty_to_bits+0x46>
    {
        bit_sequence[j] = (duty_cycles[i] >= DUTY_CYCLE_VALUE_HIGH) ? 1 : 0;
 80005f4:	1dfb      	adds	r3, r7, #7
 80005f6:	781a      	ldrb	r2, [r3, #0]
 80005f8:	4b10      	ldr	r3, [pc, #64]	@ (800063c <convert_duty_to_bits+0x5c>)
 80005fa:	0052      	lsls	r2, r2, #1
 80005fc:	5ad3      	ldrh	r3, [r2, r3]
 80005fe:	2243      	movs	r2, #67	@ 0x43
 8000600:	429a      	cmp	r2, r3
 8000602:	419b      	sbcs	r3, r3
 8000604:	425b      	negs	r3, r3
 8000606:	b2da      	uxtb	r2, r3
 8000608:	1dbb      	adds	r3, r7, #6
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	0011      	movs	r1, r2
 800060e:	4a0c      	ldr	r2, [pc, #48]	@ (8000640 <convert_duty_to_bits+0x60>)
 8000610:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 1, j = 0; i <= 19; i++, j++)
 8000612:	1dfb      	adds	r3, r7, #7
 8000614:	781a      	ldrb	r2, [r3, #0]
 8000616:	1dfb      	adds	r3, r7, #7
 8000618:	3201      	adds	r2, #1
 800061a:	701a      	strb	r2, [r3, #0]
 800061c:	1dbb      	adds	r3, r7, #6
 800061e:	781a      	ldrb	r2, [r3, #0]
 8000620:	1dbb      	adds	r3, r7, #6
 8000622:	3201      	adds	r2, #1
 8000624:	701a      	strb	r2, [r3, #0]
 8000626:	1dfb      	adds	r3, r7, #7
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b13      	cmp	r3, #19
 800062c:	d9e2      	bls.n	80005f4 <convert_duty_to_bits+0x14>
    }
    payload_ready = 1;
 800062e:	4b05      	ldr	r3, [pc, #20]	@ (8000644 <convert_duty_to_bits+0x64>)
 8000630:	2201      	movs	r2, #1
 8000632:	701a      	strb	r2, [r3, #0]
}
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b002      	add	sp, #8
 800063a:	bd80      	pop	{r7, pc}
 800063c:	200000c0 	.word	0x200000c0
 8000640:	200000e8 	.word	0x200000e8
 8000644:	200000fc 	.word	0x200000fc

08000648 <verify_payload>:
{
    return bit_sequence;
}

uint8_t verify_payload(void)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	af00      	add	r7, sp, #0

    return (bit_sequence[0] == EXPECTED_BIT_0) && (bit_sequence[1] == EXPECTED_BIT_1) && (bit_sequence[18] == EXPECTED_BIT_18);
 800064c:	4b09      	ldr	r3, [pc, #36]	@ (8000674 <verify_payload+0x2c>)
 800064e:	781b      	ldrb	r3, [r3, #0]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d109      	bne.n	8000668 <verify_payload+0x20>
 8000654:	4b07      	ldr	r3, [pc, #28]	@ (8000674 <verify_payload+0x2c>)
 8000656:	785b      	ldrb	r3, [r3, #1]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d105      	bne.n	8000668 <verify_payload+0x20>
 800065c:	4b05      	ldr	r3, [pc, #20]	@ (8000674 <verify_payload+0x2c>)
 800065e:	7c9b      	ldrb	r3, [r3, #18]
 8000660:	2b00      	cmp	r3, #0
 8000662:	d101      	bne.n	8000668 <verify_payload+0x20>
 8000664:	2301      	movs	r3, #1
 8000666:	e000      	b.n	800066a <verify_payload+0x22>
 8000668:	2300      	movs	r3, #0
 800066a:	b2db      	uxtb	r3, r3
}
 800066c:	0018      	movs	r0, r3
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	200000e8 	.word	0x200000e8

08000678 <analyze_payload>:

void analyze_payload(void)
{
 8000678:	b580      	push	{r7, lr}
 800067a:	b082      	sub	sp, #8
 800067c:	af00      	add	r7, sp, #0
    // Verifica os bits de controle (posiÃ§Ã£o 0, 1 e 19)
    if (!verify_payload())
 800067e:	f7ff ffe3 	bl	8000648 <verify_payload>
 8000682:	1e03      	subs	r3, r0, #0
 8000684:	d106      	bne.n	8000694 <analyze_payload+0x1c>
    {
        erro_payload++;
 8000686:	4b16      	ldr	r3, [pc, #88]	@ (80006e0 <analyze_payload+0x68>)
 8000688:	881b      	ldrh	r3, [r3, #0]
 800068a:	3301      	adds	r3, #1
 800068c:	b29a      	uxth	r2, r3
 800068e:	4b14      	ldr	r3, [pc, #80]	@ (80006e0 <analyze_payload+0x68>)
 8000690:	801a      	strh	r2, [r3, #0]
        return; // Se o payload estiver incorreto, aborta
 8000692:	e022      	b.n	80006da <analyze_payload+0x62>
    }

    // Extrai os bits de 2 a 18 e armazena em um uint16_t
    valor_PIR = 0;
 8000694:	4b13      	ldr	r3, [pc, #76]	@ (80006e4 <analyze_payload+0x6c>)
 8000696:	2200      	movs	r2, #0
 8000698:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 2; i <= 17; i++)
 800069a:	1dfb      	adds	r3, r7, #7
 800069c:	2202      	movs	r2, #2
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	e017      	b.n	80006d2 <analyze_payload+0x5a>
    {
        valor_PIR <<= 1;
 80006a2:	4b10      	ldr	r3, [pc, #64]	@ (80006e4 <analyze_payload+0x6c>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	5e9b      	ldrsh	r3, [r3, r2]
 80006a8:	18db      	adds	r3, r3, r3
 80006aa:	b21a      	sxth	r2, r3
 80006ac:	4b0d      	ldr	r3, [pc, #52]	@ (80006e4 <analyze_payload+0x6c>)
 80006ae:	801a      	strh	r2, [r3, #0]
        valor_PIR |= bit_sequence[i];
 80006b0:	1dfb      	adds	r3, r7, #7
 80006b2:	781b      	ldrb	r3, [r3, #0]
 80006b4:	4a0c      	ldr	r2, [pc, #48]	@ (80006e8 <analyze_payload+0x70>)
 80006b6:	5cd3      	ldrb	r3, [r2, r3]
 80006b8:	b21a      	sxth	r2, r3
 80006ba:	4b0a      	ldr	r3, [pc, #40]	@ (80006e4 <analyze_payload+0x6c>)
 80006bc:	2100      	movs	r1, #0
 80006be:	5e5b      	ldrsh	r3, [r3, r1]
 80006c0:	4313      	orrs	r3, r2
 80006c2:	b21a      	sxth	r2, r3
 80006c4:	4b07      	ldr	r3, [pc, #28]	@ (80006e4 <analyze_payload+0x6c>)
 80006c6:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 2; i <= 17; i++)
 80006c8:	1dfb      	adds	r3, r7, #7
 80006ca:	781a      	ldrb	r2, [r3, #0]
 80006cc:	1dfb      	adds	r3, r7, #7
 80006ce:	3201      	adds	r2, #1
 80006d0:	701a      	strb	r2, [r3, #0]
 80006d2:	1dfb      	adds	r3, r7, #7
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b11      	cmp	r3, #17
 80006d8:	d9e3      	bls.n	80006a2 <analyze_payload+0x2a>
    }
}
 80006da:	46bd      	mov	sp, r7
 80006dc:	b002      	add	sp, #8
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	200000fe 	.word	0x200000fe
 80006e4:	20000100 	.word	0x20000100
 80006e8:	200000e8 	.word	0x200000e8

080006ec <find_start_pulse_and_realign>:
static TIM_HandleTypeDef *htim = NULL;
static uint32_t idleTimer = 0;
static uint8_t buffer_cleared = 0; // Flag para indicar se o buffer jÃ¡ foi limpo

void find_start_pulse_and_realign(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
    if (data_ready)
 80006f2:	4b58      	ldr	r3, [pc, #352]	@ (8000854 <find_start_pulse_and_realign+0x168>)
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d000      	beq.n	80006fc <find_start_pulse_and_realign+0x10>
 80006fa:	e0a7      	b.n	800084c <find_start_pulse_and_realign+0x160>
        return;

    int8_t start_index = -1;
 80006fc:	1dfb      	adds	r3, r7, #7
 80006fe:	22ff      	movs	r2, #255	@ 0xff
 8000700:	701a      	strb	r2, [r3, #0]

    // Passo 1: Encontrar o Ã­ndice do primeiro pulso de 100Âµs
    for (uint8_t i = 0; i < PULSE_BUFFER_SIZE - 1; i++)
 8000702:	1dbb      	adds	r3, r7, #6
 8000704:	2200      	movs	r2, #0
 8000706:	701a      	strb	r2, [r3, #0]
 8000708:	e03d      	b.n	8000786 <find_start_pulse_and_realign+0x9a>
    {
        uint32_t width = (pulse_buffer[i + 1] >= pulse_buffer[i])
 800070a:	1dbb      	adds	r3, r7, #6
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	1c5a      	adds	r2, r3, #1
 8000710:	4b51      	ldr	r3, [pc, #324]	@ (8000858 <find_start_pulse_and_realign+0x16c>)
 8000712:	0092      	lsls	r2, r2, #2
 8000714:	58d2      	ldr	r2, [r2, r3]
 8000716:	1dbb      	adds	r3, r7, #6
 8000718:	7819      	ldrb	r1, [r3, #0]
 800071a:	4b4f      	ldr	r3, [pc, #316]	@ (8000858 <find_start_pulse_and_realign+0x16c>)
 800071c:	0089      	lsls	r1, r1, #2
 800071e:	58cb      	ldr	r3, [r1, r3]
                             ? (pulse_buffer[i + 1] - pulse_buffer[i])
                             : ((0xFFFF - pulse_buffer[i]) + pulse_buffer[i + 1]);
 8000720:	429a      	cmp	r2, r3
 8000722:	d30c      	bcc.n	800073e <find_start_pulse_and_realign+0x52>
                             ? (pulse_buffer[i + 1] - pulse_buffer[i])
 8000724:	1dbb      	adds	r3, r7, #6
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	1c5a      	adds	r2, r3, #1
 800072a:	4b4b      	ldr	r3, [pc, #300]	@ (8000858 <find_start_pulse_and_realign+0x16c>)
 800072c:	0092      	lsls	r2, r2, #2
 800072e:	58d2      	ldr	r2, [r2, r3]
 8000730:	1dbb      	adds	r3, r7, #6
 8000732:	7819      	ldrb	r1, [r3, #0]
 8000734:	4b48      	ldr	r3, [pc, #288]	@ (8000858 <find_start_pulse_and_realign+0x16c>)
 8000736:	0089      	lsls	r1, r1, #2
 8000738:	58cb      	ldr	r3, [r1, r3]
                             : ((0xFFFF - pulse_buffer[i]) + pulse_buffer[i + 1]);
 800073a:	1ad3      	subs	r3, r2, r3
 800073c:	e00e      	b.n	800075c <find_start_pulse_and_realign+0x70>
 800073e:	1dbb      	adds	r3, r7, #6
 8000740:	781b      	ldrb	r3, [r3, #0]
 8000742:	1c5a      	adds	r2, r3, #1
 8000744:	4b44      	ldr	r3, [pc, #272]	@ (8000858 <find_start_pulse_and_realign+0x16c>)
 8000746:	0092      	lsls	r2, r2, #2
 8000748:	58d2      	ldr	r2, [r2, r3]
 800074a:	1dbb      	adds	r3, r7, #6
 800074c:	7819      	ldrb	r1, [r3, #0]
 800074e:	4b42      	ldr	r3, [pc, #264]	@ (8000858 <find_start_pulse_and_realign+0x16c>)
 8000750:	0089      	lsls	r1, r1, #2
 8000752:	58cb      	ldr	r3, [r1, r3]
 8000754:	1ad3      	subs	r3, r2, r3
 8000756:	4a41      	ldr	r2, [pc, #260]	@ (800085c <find_start_pulse_and_realign+0x170>)
 8000758:	4694      	mov	ip, r2
 800075a:	4463      	add	r3, ip
        uint32_t width = (pulse_buffer[i + 1] >= pulse_buffer[i])
 800075c:	603b      	str	r3, [r7, #0]

        if (width >= (START_PULSE_WIDTH - PULSE_TOLERANCE) &&
 800075e:	683a      	ldr	r2, [r7, #0]
 8000760:	2396      	movs	r3, #150	@ 0x96
 8000762:	009b      	lsls	r3, r3, #2
 8000764:	429a      	cmp	r2, r3
 8000766:	d309      	bcc.n	800077c <find_start_pulse_and_realign+0x90>
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	23c8      	movs	r3, #200	@ 0xc8
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	429a      	cmp	r2, r3
 8000770:	d804      	bhi.n	800077c <find_start_pulse_and_realign+0x90>
            width <= (START_PULSE_WIDTH + PULSE_TOLERANCE))
        {
            start_index = i;
 8000772:	1dfb      	adds	r3, r7, #7
 8000774:	1dba      	adds	r2, r7, #6
 8000776:	7812      	ldrb	r2, [r2, #0]
 8000778:	701a      	strb	r2, [r3, #0]
            break;
 800077a:	e008      	b.n	800078e <find_start_pulse_and_realign+0xa2>
    for (uint8_t i = 0; i < PULSE_BUFFER_SIZE - 1; i++)
 800077c:	1dbb      	adds	r3, r7, #6
 800077e:	781a      	ldrb	r2, [r3, #0]
 8000780:	1dbb      	adds	r3, r7, #6
 8000782:	3201      	adds	r2, #1
 8000784:	701a      	strb	r2, [r3, #0]
 8000786:	1dbb      	adds	r3, r7, #6
 8000788:	781b      	ldrb	r3, [r3, #0]
 800078a:	2b30      	cmp	r3, #48	@ 0x30
 800078c:	d9bd      	bls.n	800070a <find_start_pulse_and_realign+0x1e>
        }
    }

    // Passo 2: Se encontrou, recalcular os pulse_widths a partir deste ponto
    if (start_index != (-1) && (start_index + 40) < PULSE_BUFFER_SIZE)
 800078e:	1dfb      	adds	r3, r7, #7
 8000790:	781b      	ldrb	r3, [r3, #0]
 8000792:	b25b      	sxtb	r3, r3
 8000794:	3301      	adds	r3, #1
 8000796:	d04f      	beq.n	8000838 <find_start_pulse_and_realign+0x14c>
 8000798:	1dfb      	adds	r3, r7, #7
 800079a:	781b      	ldrb	r3, [r3, #0]
 800079c:	b25b      	sxtb	r3, r3
 800079e:	2b09      	cmp	r3, #9
 80007a0:	dc4a      	bgt.n	8000838 <find_start_pulse_and_realign+0x14c>
    {
        for (uint8_t j = 0, i = start_index; j < 40; i++, j++)
 80007a2:	1d7b      	adds	r3, r7, #5
 80007a4:	2200      	movs	r2, #0
 80007a6:	701a      	strb	r2, [r3, #0]
 80007a8:	1d3b      	adds	r3, r7, #4
 80007aa:	1dfa      	adds	r2, r7, #7
 80007ac:	7812      	ldrb	r2, [r2, #0]
 80007ae:	701a      	strb	r2, [r3, #0]
 80007b0:	e037      	b.n	8000822 <find_start_pulse_and_realign+0x136>
        {
            pulse_width[j] = (pulse_buffer[i + 1] >= pulse_buffer[i])
 80007b2:	1d3b      	adds	r3, r7, #4
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	1c5a      	adds	r2, r3, #1
 80007b8:	4b27      	ldr	r3, [pc, #156]	@ (8000858 <find_start_pulse_and_realign+0x16c>)
 80007ba:	0092      	lsls	r2, r2, #2
 80007bc:	58d2      	ldr	r2, [r2, r3]
 80007be:	1d3b      	adds	r3, r7, #4
 80007c0:	7819      	ldrb	r1, [r3, #0]
 80007c2:	4b25      	ldr	r3, [pc, #148]	@ (8000858 <find_start_pulse_and_realign+0x16c>)
 80007c4:	0089      	lsls	r1, r1, #2
 80007c6:	58cb      	ldr	r3, [r1, r3]
                                 ? (pulse_buffer[i + 1] - pulse_buffer[i])
                                 : ((0xFFFF - pulse_buffer[i]) + pulse_buffer[i + 1]);
 80007c8:	429a      	cmp	r2, r3
 80007ca:	d30c      	bcc.n	80007e6 <find_start_pulse_and_realign+0xfa>
                                 ? (pulse_buffer[i + 1] - pulse_buffer[i])
 80007cc:	1d3b      	adds	r3, r7, #4
 80007ce:	781b      	ldrb	r3, [r3, #0]
 80007d0:	1c5a      	adds	r2, r3, #1
 80007d2:	4b21      	ldr	r3, [pc, #132]	@ (8000858 <find_start_pulse_and_realign+0x16c>)
 80007d4:	0092      	lsls	r2, r2, #2
 80007d6:	58d2      	ldr	r2, [r2, r3]
 80007d8:	1d3b      	adds	r3, r7, #4
 80007da:	7819      	ldrb	r1, [r3, #0]
 80007dc:	4b1e      	ldr	r3, [pc, #120]	@ (8000858 <find_start_pulse_and_realign+0x16c>)
 80007de:	0089      	lsls	r1, r1, #2
 80007e0:	58cb      	ldr	r3, [r1, r3]
                                 : ((0xFFFF - pulse_buffer[i]) + pulse_buffer[i + 1]);
 80007e2:	1ad3      	subs	r3, r2, r3
 80007e4:	e00e      	b.n	8000804 <find_start_pulse_and_realign+0x118>
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	1c5a      	adds	r2, r3, #1
 80007ec:	4b1a      	ldr	r3, [pc, #104]	@ (8000858 <find_start_pulse_and_realign+0x16c>)
 80007ee:	0092      	lsls	r2, r2, #2
 80007f0:	58d2      	ldr	r2, [r2, r3]
 80007f2:	1d3b      	adds	r3, r7, #4
 80007f4:	7819      	ldrb	r1, [r3, #0]
 80007f6:	4b18      	ldr	r3, [pc, #96]	@ (8000858 <find_start_pulse_and_realign+0x16c>)
 80007f8:	0089      	lsls	r1, r1, #2
 80007fa:	58cb      	ldr	r3, [r1, r3]
 80007fc:	1ad3      	subs	r3, r2, r3
 80007fe:	4a17      	ldr	r2, [pc, #92]	@ (800085c <find_start_pulse_and_realign+0x170>)
 8000800:	4694      	mov	ip, r2
 8000802:	4463      	add	r3, ip
            pulse_width[j] = (pulse_buffer[i + 1] >= pulse_buffer[i])
 8000804:	1d7a      	adds	r2, r7, #5
 8000806:	7811      	ldrb	r1, [r2, #0]
 8000808:	4a15      	ldr	r2, [pc, #84]	@ (8000860 <find_start_pulse_and_realign+0x174>)
 800080a:	0089      	lsls	r1, r1, #2
 800080c:	508b      	str	r3, [r1, r2]
        for (uint8_t j = 0, i = start_index; j < 40; i++, j++)
 800080e:	1d3b      	adds	r3, r7, #4
 8000810:	781a      	ldrb	r2, [r3, #0]
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	3201      	adds	r2, #1
 8000816:	701a      	strb	r2, [r3, #0]
 8000818:	1d7b      	adds	r3, r7, #5
 800081a:	781a      	ldrb	r2, [r3, #0]
 800081c:	1d7b      	adds	r3, r7, #5
 800081e:	3201      	adds	r2, #1
 8000820:	701a      	strb	r2, [r3, #0]
 8000822:	1d7b      	adds	r3, r7, #5
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b27      	cmp	r3, #39	@ 0x27
 8000828:	d9c3      	bls.n	80007b2 <find_start_pulse_and_realign+0xc6>
        }

        data_ready = 1; // Marca os dados como prontos
 800082a:	4b0a      	ldr	r3, [pc, #40]	@ (8000854 <find_start_pulse_and_realign+0x168>)
 800082c:	2201      	movs	r2, #1
 800082e:	701a      	strb	r2, [r3, #0]
        pulse_index = 0;
 8000830:	4b0c      	ldr	r3, [pc, #48]	@ (8000864 <find_start_pulse_and_realign+0x178>)
 8000832:	2200      	movs	r2, #0
 8000834:	801a      	strh	r2, [r3, #0]
 8000836:	e00a      	b.n	800084e <find_start_pulse_and_realign+0x162>
    }
    else
    {
        // Se nÃ£o encontrou um pulso vÃ¡lido, reseta buffer para evitar dados errados
        pulse_index = 0;
 8000838:	4b0a      	ldr	r3, [pc, #40]	@ (8000864 <find_start_pulse_and_realign+0x178>)
 800083a:	2200      	movs	r2, #0
 800083c:	801a      	strh	r2, [r3, #0]
        idleTimer = 0;
 800083e:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <find_start_pulse_and_realign+0x17c>)
 8000840:	2200      	movs	r2, #0
 8000842:	601a      	str	r2, [r3, #0]
        data_ready = 0;
 8000844:	4b03      	ldr	r3, [pc, #12]	@ (8000854 <find_start_pulse_and_realign+0x168>)
 8000846:	2200      	movs	r2, #0
 8000848:	701a      	strb	r2, [r3, #0]
 800084a:	e000      	b.n	800084e <find_start_pulse_and_realign+0x162>
        return;
 800084c:	46c0      	nop			@ (mov r8, r8)
    }
}
 800084e:	46bd      	mov	sp, r7
 8000850:	b002      	add	sp, #8
 8000852:	bd80      	pop	{r7, pc}
 8000854:	2000026c 	.word	0x2000026c
 8000858:	20000104 	.word	0x20000104
 800085c:	0000ffff 	.word	0x0000ffff
 8000860:	200001cc 	.word	0x200001cc
 8000864:	2000026e 	.word	0x2000026e
 8000868:	20000274 	.word	0x20000274

0800086c <processPulses>:

void processPulses()
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
    //    if (data_ready)
    //        return;

    if ((++idleTimer) > 1) // Garante que pelo menos passou 2 ms da ultima leitura de borda e entao habilita para a leitura
 8000872:	4b1a      	ldr	r3, [pc, #104]	@ (80008dc <processPulses+0x70>)
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	1c5a      	adds	r2, r3, #1
 8000878:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <processPulses+0x70>)
 800087a:	601a      	str	r2, [r3, #0]
 800087c:	4b17      	ldr	r3, [pc, #92]	@ (80008dc <processPulses+0x70>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	2b01      	cmp	r3, #1
 8000882:	d926      	bls.n	80008d2 <processPulses+0x66>
    {
        if (pulse_index >= 40) // Certifica que temos pelo menos 40 pulsos, comeca no zero
 8000884:	4b16      	ldr	r3, [pc, #88]	@ (80008e0 <processPulses+0x74>)
 8000886:	881b      	ldrh	r3, [r3, #0]
 8000888:	2b27      	cmp	r3, #39	@ 0x27
 800088a:	d902      	bls.n	8000892 <processPulses+0x26>
        {
            find_start_pulse_and_realign();
 800088c:	f7ff ff2e 	bl	80006ec <find_start_pulse_and_realign>
                pulse_buffer[i] = 0;
        }
        // pulse_index = 0; // Reinicia o Ã­ndice para a prÃ³xima captura
        // idleTimer = 0;
    }
}
 8000890:	e01f      	b.n	80008d2 <processPulses+0x66>
        else if (!buffer_cleared) // SÃ³ limpa se ainda nÃ£o foi limpo
 8000892:	4b14      	ldr	r3, [pc, #80]	@ (80008e4 <processPulses+0x78>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d11b      	bne.n	80008d2 <processPulses+0x66>
            pulse_index = 0;
 800089a:	4b11      	ldr	r3, [pc, #68]	@ (80008e0 <processPulses+0x74>)
 800089c:	2200      	movs	r2, #0
 800089e:	801a      	strh	r2, [r3, #0]
            idleTimer = 0;
 80008a0:	4b0e      	ldr	r3, [pc, #56]	@ (80008dc <processPulses+0x70>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
            buffer_cleared = 1; // Marca que o buffer foi limpo
 80008a6:	4b0f      	ldr	r3, [pc, #60]	@ (80008e4 <processPulses+0x78>)
 80008a8:	2201      	movs	r2, #1
 80008aa:	701a      	strb	r2, [r3, #0]
            for (uint8_t i = 0; i < PULSE_BUFFER_SIZE; i++)
 80008ac:	1dfb      	adds	r3, r7, #7
 80008ae:	2200      	movs	r2, #0
 80008b0:	701a      	strb	r2, [r3, #0]
 80008b2:	e00a      	b.n	80008ca <processPulses+0x5e>
                pulse_buffer[i] = 0;
 80008b4:	1dfb      	adds	r3, r7, #7
 80008b6:	781a      	ldrb	r2, [r3, #0]
 80008b8:	4b0b      	ldr	r3, [pc, #44]	@ (80008e8 <processPulses+0x7c>)
 80008ba:	0092      	lsls	r2, r2, #2
 80008bc:	2100      	movs	r1, #0
 80008be:	50d1      	str	r1, [r2, r3]
            for (uint8_t i = 0; i < PULSE_BUFFER_SIZE; i++)
 80008c0:	1dfb      	adds	r3, r7, #7
 80008c2:	781a      	ldrb	r2, [r3, #0]
 80008c4:	1dfb      	adds	r3, r7, #7
 80008c6:	3201      	adds	r2, #1
 80008c8:	701a      	strb	r2, [r3, #0]
 80008ca:	1dfb      	adds	r3, r7, #7
 80008cc:	781b      	ldrb	r3, [r3, #0]
 80008ce:	2b31      	cmp	r3, #49	@ 0x31
 80008d0:	d9f0      	bls.n	80008b4 <processPulses+0x48>
}
 80008d2:	46c0      	nop			@ (mov r8, r8)
 80008d4:	46bd      	mov	sp, r7
 80008d6:	b002      	add	sp, #8
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	46c0      	nop			@ (mov r8, r8)
 80008dc:	20000274 	.word	0x20000274
 80008e0:	2000026e 	.word	0x2000026e
 80008e4:	20000278 	.word	0x20000278
 80008e8:	20000104 	.word	0x20000104

080008ec <get_Sample>:

void get_Sample(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0

    if (data_ready)
 80008f0:	4b0e      	ldr	r3, [pc, #56]	@ (800092c <get_Sample+0x40>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d115      	bne.n	8000924 <get_Sample+0x38>
        return; // Se os dados jÃ¡ estÃ£o prontos, ignora novas capturas

    if (pulse_index < PULSE_BUFFER_SIZE)
 80008f8:	4b0d      	ldr	r3, [pc, #52]	@ (8000930 <get_Sample+0x44>)
 80008fa:	881b      	ldrh	r3, [r3, #0]
 80008fc:	2b31      	cmp	r3, #49	@ 0x31
 80008fe:	d812      	bhi.n	8000926 <get_Sample+0x3a>
    {
        pulse_buffer[pulse_index++] = TIM3->CNT;
 8000900:	4b0c      	ldr	r3, [pc, #48]	@ (8000934 <get_Sample+0x48>)
 8000902:	4a0b      	ldr	r2, [pc, #44]	@ (8000930 <get_Sample+0x44>)
 8000904:	8812      	ldrh	r2, [r2, #0]
 8000906:	1c51      	adds	r1, r2, #1
 8000908:	b288      	uxth	r0, r1
 800090a:	4909      	ldr	r1, [pc, #36]	@ (8000930 <get_Sample+0x44>)
 800090c:	8008      	strh	r0, [r1, #0]
 800090e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000910:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <get_Sample+0x4c>)
 8000912:	0092      	lsls	r2, r2, #2
 8000914:	50d1      	str	r1, [r2, r3]
        idleTimer = 0;      // Reset o tempo de inatividade quando um novo pulso chega
 8000916:	4b09      	ldr	r3, [pc, #36]	@ (800093c <get_Sample+0x50>)
 8000918:	2200      	movs	r2, #0
 800091a:	601a      	str	r2, [r3, #0]
        buffer_cleared = 0; // Se chegou um novo pulso, indica que o buffer nÃ£o estÃ¡ limpo
 800091c:	4b08      	ldr	r3, [pc, #32]	@ (8000940 <get_Sample+0x54>)
 800091e:	2200      	movs	r2, #0
 8000920:	701a      	strb	r2, [r3, #0]
 8000922:	e000      	b.n	8000926 <get_Sample+0x3a>
        return; // Se os dados jÃ¡ estÃ£o prontos, ignora novas capturas
 8000924:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	46c0      	nop			@ (mov r8, r8)
 800092c:	2000026c 	.word	0x2000026c
 8000930:	2000026e 	.word	0x2000026e
 8000934:	40000400 	.word	0x40000400
 8000938:	20000104 	.word	0x20000104
 800093c:	20000274 	.word	0x20000274
 8000940:	20000278 	.word	0x20000278

08000944 <get_width_pulses>:
    //         GPIOA->ODR &= ~GPIO_PIN_9;
    //     }
}

const volatile uint32_t *get_width_pulses(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	af00      	add	r7, sp, #0
    return pulse_width;
 8000948:	4b01      	ldr	r3, [pc, #4]	@ (8000950 <get_width_pulses+0xc>)
}
 800094a:	0018      	movs	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	bd80      	pop	{r7, pc}
 8000950:	200001cc 	.word	0x200001cc

08000954 <setTimerPulses>:

void setTimerPulses(TIM_HandleTypeDef *htimChosed)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	b082      	sub	sp, #8
 8000958:	af00      	add	r7, sp, #0
 800095a:	6078      	str	r0, [r7, #4]
    htim = htimChosed;
 800095c:	4b03      	ldr	r3, [pc, #12]	@ (800096c <setTimerPulses+0x18>)
 800095e:	687a      	ldr	r2, [r7, #4]
 8000960:	601a      	str	r2, [r3, #0]
}
 8000962:	46c0      	nop			@ (mov r8, r8)
 8000964:	46bd      	mov	sp, r7
 8000966:	b002      	add	sp, #8
 8000968:	bd80      	pop	{r7, pc}
 800096a:	46c0      	nop			@ (mov r8, r8)
 800096c:	20000270 	.word	0x20000270

08000970 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	b082      	sub	sp, #8
 8000974:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000976:	4b10      	ldr	r3, [pc, #64]	@ (80009b8 <HAL_MspInit+0x48>)
 8000978:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800097a:	4b0f      	ldr	r3, [pc, #60]	@ (80009b8 <HAL_MspInit+0x48>)
 800097c:	2101      	movs	r1, #1
 800097e:	430a      	orrs	r2, r1
 8000980:	641a      	str	r2, [r3, #64]	@ 0x40
 8000982:	4b0d      	ldr	r3, [pc, #52]	@ (80009b8 <HAL_MspInit+0x48>)
 8000984:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000986:	2201      	movs	r2, #1
 8000988:	4013      	ands	r3, r2
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800098e:	4b0a      	ldr	r3, [pc, #40]	@ (80009b8 <HAL_MspInit+0x48>)
 8000990:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000992:	4b09      	ldr	r3, [pc, #36]	@ (80009b8 <HAL_MspInit+0x48>)
 8000994:	2180      	movs	r1, #128	@ 0x80
 8000996:	0549      	lsls	r1, r1, #21
 8000998:	430a      	orrs	r2, r1
 800099a:	63da      	str	r2, [r3, #60]	@ 0x3c
 800099c:	4b06      	ldr	r3, [pc, #24]	@ (80009b8 <HAL_MspInit+0x48>)
 800099e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009a0:	2380      	movs	r3, #128	@ 0x80
 80009a2:	055b      	lsls	r3, r3, #21
 80009a4:	4013      	ands	r3, r2
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 80009aa:	2008      	movs	r0, #8
 80009ac:	f000 f96c 	bl	8000c88 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009b0:	46c0      	nop			@ (mov r8, r8)
 80009b2:	46bd      	mov	sp, r7
 80009b4:	b002      	add	sp, #8
 80009b6:	bd80      	pop	{r7, pc}
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b084      	sub	sp, #16
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a17      	ldr	r2, [pc, #92]	@ (8000a28 <HAL_TIM_Base_MspInit+0x6c>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d10c      	bne.n	80009e8 <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009ce:	4b17      	ldr	r3, [pc, #92]	@ (8000a2c <HAL_TIM_Base_MspInit+0x70>)
 80009d0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80009d2:	4b16      	ldr	r3, [pc, #88]	@ (8000a2c <HAL_TIM_Base_MspInit+0x70>)
 80009d4:	2102      	movs	r1, #2
 80009d6:	430a      	orrs	r2, r1
 80009d8:	63da      	str	r2, [r3, #60]	@ 0x3c
 80009da:	4b14      	ldr	r3, [pc, #80]	@ (8000a2c <HAL_TIM_Base_MspInit+0x70>)
 80009dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80009de:	2202      	movs	r2, #2
 80009e0:	4013      	ands	r3, r2
 80009e2:	60fb      	str	r3, [r7, #12]
 80009e4:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 80009e6:	e01a      	b.n	8000a1e <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM14)
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a10      	ldr	r2, [pc, #64]	@ (8000a30 <HAL_TIM_Base_MspInit+0x74>)
 80009ee:	4293      	cmp	r3, r2
 80009f0:	d115      	bne.n	8000a1e <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM14_CLK_ENABLE();
 80009f2:	4b0e      	ldr	r3, [pc, #56]	@ (8000a2c <HAL_TIM_Base_MspInit+0x70>)
 80009f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80009f6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a2c <HAL_TIM_Base_MspInit+0x70>)
 80009f8:	2180      	movs	r1, #128	@ 0x80
 80009fa:	0209      	lsls	r1, r1, #8
 80009fc:	430a      	orrs	r2, r1
 80009fe:	641a      	str	r2, [r3, #64]	@ 0x40
 8000a00:	4b0a      	ldr	r3, [pc, #40]	@ (8000a2c <HAL_TIM_Base_MspInit+0x70>)
 8000a02:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000a04:	2380      	movs	r3, #128	@ 0x80
 8000a06:	021b      	lsls	r3, r3, #8
 8000a08:	4013      	ands	r3, r2
 8000a0a:	60bb      	str	r3, [r7, #8]
 8000a0c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 8000a0e:	2200      	movs	r2, #0
 8000a10:	2103      	movs	r1, #3
 8000a12:	2013      	movs	r0, #19
 8000a14:	f000 fa00 	bl	8000e18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000a18:	2013      	movs	r0, #19
 8000a1a:	f000 fa12 	bl	8000e42 <HAL_NVIC_EnableIRQ>
}
 8000a1e:	46c0      	nop			@ (mov r8, r8)
 8000a20:	46bd      	mov	sp, r7
 8000a22:	b004      	add	sp, #16
 8000a24:	bd80      	pop	{r7, pc}
 8000a26:	46c0      	nop			@ (mov r8, r8)
 8000a28:	40000400 	.word	0x40000400
 8000a2c:	40021000 	.word	0x40021000
 8000a30:	40002000 	.word	0x40002000

08000a34 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 8000a38:	46c0      	nop			@ (mov r8, r8)
 8000a3a:	e7fd      	b.n	8000a38 <NMI_Handler+0x4>

08000a3c <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 8000a40:	46c0      	nop			@ (mov r8, r8)
 8000a42:	e7fd      	b.n	8000a40 <HardFault_Handler+0x4>

08000a44 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0

    /* USER CODE END SVC_IRQn 0 */
    /* USER CODE BEGIN SVC_IRQn 1 */

    /* USER CODE END SVC_IRQn 1 */
}
 8000a48:	46c0      	nop			@ (mov r8, r8)
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	bd80      	pop	{r7, pc}

08000a4e <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 8000a4e:	b580      	push	{r7, lr}
 8000a50:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8000a52:	46c0      	nop			@ (mov r8, r8)
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd80      	pop	{r7, pc}

08000a58 <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN SysTick_IRQn 0 */

    /* USER CODE END SysTick_IRQn 0 */
    HAL_IncTick();
 8000a5c:	f000 f8f8 	bl	8000c50 <HAL_IncTick>
    /* USER CODE BEGIN SysTick_IRQn 1 */

    /* USER CODE END SysTick_IRQn 1 */
}
 8000a60:	46c0      	nop			@ (mov r8, r8)
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
	...

08000a68 <EXTI4_15_IRQHandler>:

/**
 * @brief This function handles EXTI line 4 to 15 interrupts.
 */
void EXTI4_15_IRQHandler(void)
{
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	af00      	add	r7, sp, #0

    /* USER CODE END EXTI4_15_IRQn 0 */
    // HAL_GPIO_EXTI_IRQHandler(PIR_Pin);
    /* USER CODE BEGIN EXTI4_15_IRQn 1 */

    if (EXTI->RPR1 & EXTI_RPR1_RPIF14)
 8000a6c:	4b18      	ldr	r3, [pc, #96]	@ (8000ad0 <EXTI4_15_IRQHandler+0x68>)
 8000a6e:	68da      	ldr	r2, [r3, #12]
 8000a70:	2380      	movs	r3, #128	@ 0x80
 8000a72:	01db      	lsls	r3, r3, #7
 8000a74:	4013      	ands	r3, r2
 8000a76:	d011      	beq.n	8000a9c <EXTI4_15_IRQHandler+0x34>
    {
        GPIOA->ODR |= GPIO_ODR_OD9;
 8000a78:	23a0      	movs	r3, #160	@ 0xa0
 8000a7a:	05db      	lsls	r3, r3, #23
 8000a7c:	695a      	ldr	r2, [r3, #20]
 8000a7e:	23a0      	movs	r3, #160	@ 0xa0
 8000a80:	05db      	lsls	r3, r3, #23
 8000a82:	2180      	movs	r1, #128	@ 0x80
 8000a84:	0089      	lsls	r1, r1, #2
 8000a86:	430a      	orrs	r2, r1
 8000a88:	615a      	str	r2, [r3, #20]
        EXTI->RPR1 |= EXTI_RPR1_RPIF14;
 8000a8a:	4b11      	ldr	r3, [pc, #68]	@ (8000ad0 <EXTI4_15_IRQHandler+0x68>)
 8000a8c:	68da      	ldr	r2, [r3, #12]
 8000a8e:	4b10      	ldr	r3, [pc, #64]	@ (8000ad0 <EXTI4_15_IRQHandler+0x68>)
 8000a90:	2180      	movs	r1, #128	@ 0x80
 8000a92:	01c9      	lsls	r1, r1, #7
 8000a94:	430a      	orrs	r2, r1
 8000a96:	60da      	str	r2, [r3, #12]
        get_Sample();
 8000a98:	f7ff ff28 	bl	80008ec <get_Sample>
    }
    if (EXTI->FPR1 & EXTI_FPR1_FPIF14)
 8000a9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000ad0 <EXTI4_15_IRQHandler+0x68>)
 8000a9e:	691a      	ldr	r2, [r3, #16]
 8000aa0:	2380      	movs	r3, #128	@ 0x80
 8000aa2:	01db      	lsls	r3, r3, #7
 8000aa4:	4013      	ands	r3, r2
 8000aa6:	d010      	beq.n	8000aca <EXTI4_15_IRQHandler+0x62>
    {
        GPIOA->ODR &= ~GPIO_ODR_OD9;
 8000aa8:	23a0      	movs	r3, #160	@ 0xa0
 8000aaa:	05db      	lsls	r3, r3, #23
 8000aac:	695a      	ldr	r2, [r3, #20]
 8000aae:	23a0      	movs	r3, #160	@ 0xa0
 8000ab0:	05db      	lsls	r3, r3, #23
 8000ab2:	4908      	ldr	r1, [pc, #32]	@ (8000ad4 <EXTI4_15_IRQHandler+0x6c>)
 8000ab4:	400a      	ands	r2, r1
 8000ab6:	615a      	str	r2, [r3, #20]
        EXTI->FPR1 |= EXTI_FPR1_FPIF14;
 8000ab8:	4b05      	ldr	r3, [pc, #20]	@ (8000ad0 <EXTI4_15_IRQHandler+0x68>)
 8000aba:	691a      	ldr	r2, [r3, #16]
 8000abc:	4b04      	ldr	r3, [pc, #16]	@ (8000ad0 <EXTI4_15_IRQHandler+0x68>)
 8000abe:	2180      	movs	r1, #128	@ 0x80
 8000ac0:	01c9      	lsls	r1, r1, #7
 8000ac2:	430a      	orrs	r2, r1
 8000ac4:	611a      	str	r2, [r3, #16]
        get_Sample();
 8000ac6:	f7ff ff11 	bl	80008ec <get_Sample>
    }

    /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000aca:	46c0      	nop			@ (mov r8, r8)
 8000acc:	46bd      	mov	sp, r7
 8000ace:	bd80      	pop	{r7, pc}
 8000ad0:	40021800 	.word	0x40021800
 8000ad4:	fffffdff 	.word	0xfffffdff

08000ad8 <TIM14_IRQHandler>:

/**
 * @brief This function handles TIM14 global interrupt.
 */
void TIM14_IRQHandler(void)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN TIM14_IRQn 0 */

    /* USER CODE END TIM14_IRQn 0 */
    HAL_TIM_IRQHandler(&htim14);
 8000adc:	4b03      	ldr	r3, [pc, #12]	@ (8000aec <TIM14_IRQHandler+0x14>)
 8000ade:	0018      	movs	r0, r3
 8000ae0:	f000 ff66 	bl	80019b0 <HAL_TIM_IRQHandler>
    /* USER CODE BEGIN TIM14_IRQn 1 */

    /* USER CODE END TIM14_IRQn 1 */
}
 8000ae4:	46c0      	nop			@ (mov r8, r8)
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	bd80      	pop	{r7, pc}
 8000aea:	46c0      	nop			@ (mov r8, r8)
 8000aec:	20000074 	.word	0x20000074

08000af0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000af4:	4b03      	ldr	r3, [pc, #12]	@ (8000b04 <SystemInit+0x14>)
 8000af6:	2280      	movs	r2, #128	@ 0x80
 8000af8:	0512      	lsls	r2, r2, #20
 8000afa:	609a      	str	r2, [r3, #8]
#endif
}
 8000afc:	46c0      	nop			@ (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	46c0      	nop			@ (mov r8, r8)
 8000b04:	e000ed00 	.word	0xe000ed00

08000b08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b08:	480d      	ldr	r0, [pc, #52]	@ (8000b40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b0a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b0c:	f7ff fff0 	bl	8000af0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000b10:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000b12:	e003      	b.n	8000b1c <LoopCopyDataInit>

08000b14 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000b14:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000b16:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000b18:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000b1a:	3104      	adds	r1, #4

08000b1c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000b1c:	480a      	ldr	r0, [pc, #40]	@ (8000b48 <LoopForever+0xa>)
  ldr r3, =_edata
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000b4c <LoopForever+0xe>)
  adds r2, r0, r1
 8000b20:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000b22:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000b24:	d3f6      	bcc.n	8000b14 <CopyDataInit>
  ldr r2, =_sbss
 8000b26:	4a0a      	ldr	r2, [pc, #40]	@ (8000b50 <LoopForever+0x12>)
  b LoopFillZerobss
 8000b28:	e002      	b.n	8000b30 <LoopFillZerobss>

08000b2a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  str  r3, [r2]
 8000b2c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b2e:	3204      	adds	r2, #4

08000b30 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000b30:	4b08      	ldr	r3, [pc, #32]	@ (8000b54 <LoopForever+0x16>)
  cmp r2, r3
 8000b32:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000b34:	d3f9      	bcc.n	8000b2a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000b36:	f001 fac9 	bl	80020cc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b3a:	f7ff fba5 	bl	8000288 <main>

08000b3e <LoopForever>:

LoopForever:
    b LoopForever
 8000b3e:	e7fe      	b.n	8000b3e <LoopForever>
  ldr   r0, =_estack
 8000b40:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000b44:	08002174 	.word	0x08002174
  ldr r0, =_sdata
 8000b48:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000b4c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000b50:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000b54:	20000280 	.word	0x20000280

08000b58 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_IRQHandler>
	...

08000b5c <LL_SYSCFG_ConfigPinMux>:
  * @rmtoll SYSCFG_CFGR3 CLL   LL_SYSCFG_ConfigPinMux\n
  * @param  mux_cfg This parameter can be a value of @ref SYSTEM_LL_PINMUX_CFG
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_ConfigPinMux(uint32_t mux_cfg)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR3, (mux_cfg >> 16U), (mux_cfg & 0x0000FFFFU));
 8000b64:	4b08      	ldr	r3, [pc, #32]	@ (8000b88 <LL_SYSCFG_ConfigPinMux+0x2c>)
 8000b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	0c12      	lsrs	r2, r2, #16
 8000b6c:	43d2      	mvns	r2, r2
 8000b6e:	401a      	ands	r2, r3
 8000b70:	0011      	movs	r1, r2
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	041b      	lsls	r3, r3, #16
 8000b76:	0c1a      	lsrs	r2, r3, #16
 8000b78:	4b03      	ldr	r3, [pc, #12]	@ (8000b88 <LL_SYSCFG_ConfigPinMux+0x2c>)
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	46bd      	mov	sp, r7
 8000b82:	b002      	add	sp, #8
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			@ (mov r8, r8)
 8000b88:	40010000 	.word	0x40010000

08000b8c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b92:	1dfb      	adds	r3, r7, #7
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f000 f80f 	bl	8000bbc <HAL_InitTick>
 8000b9e:	1e03      	subs	r3, r0, #0
 8000ba0:	d003      	beq.n	8000baa <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	701a      	strb	r2, [r3, #0]
 8000ba8:	e001      	b.n	8000bae <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000baa:	f7ff fee1 	bl	8000970 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000bae:	1dfb      	adds	r3, r7, #7
 8000bb0:	781b      	ldrb	r3, [r3, #0]
}
 8000bb2:	0018      	movs	r0, r3
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	b002      	add	sp, #8
 8000bb8:	bd80      	pop	{r7, pc}
	...

08000bbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bbc:	b590      	push	{r4, r7, lr}
 8000bbe:	b085      	sub	sp, #20
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000bc4:	230f      	movs	r3, #15
 8000bc6:	18fb      	adds	r3, r7, r3
 8000bc8:	2200      	movs	r2, #0
 8000bca:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8000c44 <HAL_InitTick+0x88>)
 8000bce:	781b      	ldrb	r3, [r3, #0]
 8000bd0:	2b00      	cmp	r3, #0
 8000bd2:	d02b      	beq.n	8000c2c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000bd4:	4b1c      	ldr	r3, [pc, #112]	@ (8000c48 <HAL_InitTick+0x8c>)
 8000bd6:	681c      	ldr	r4, [r3, #0]
 8000bd8:	4b1a      	ldr	r3, [pc, #104]	@ (8000c44 <HAL_InitTick+0x88>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	0019      	movs	r1, r3
 8000bde:	23fa      	movs	r3, #250	@ 0xfa
 8000be0:	0098      	lsls	r0, r3, #2
 8000be2:	f7ff fa91 	bl	8000108 <__udivsi3>
 8000be6:	0003      	movs	r3, r0
 8000be8:	0019      	movs	r1, r3
 8000bea:	0020      	movs	r0, r4
 8000bec:	f7ff fa8c 	bl	8000108 <__udivsi3>
 8000bf0:	0003      	movs	r3, r0
 8000bf2:	0018      	movs	r0, r3
 8000bf4:	f000 f935 	bl	8000e62 <HAL_SYSTICK_Config>
 8000bf8:	1e03      	subs	r3, r0, #0
 8000bfa:	d112      	bne.n	8000c22 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	2b03      	cmp	r3, #3
 8000c00:	d80a      	bhi.n	8000c18 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	2301      	movs	r3, #1
 8000c06:	425b      	negs	r3, r3
 8000c08:	2200      	movs	r2, #0
 8000c0a:	0018      	movs	r0, r3
 8000c0c:	f000 f904 	bl	8000e18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000c10:	4b0e      	ldr	r3, [pc, #56]	@ (8000c4c <HAL_InitTick+0x90>)
 8000c12:	687a      	ldr	r2, [r7, #4]
 8000c14:	601a      	str	r2, [r3, #0]
 8000c16:	e00d      	b.n	8000c34 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000c18:	230f      	movs	r3, #15
 8000c1a:	18fb      	adds	r3, r7, r3
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	701a      	strb	r2, [r3, #0]
 8000c20:	e008      	b.n	8000c34 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c22:	230f      	movs	r3, #15
 8000c24:	18fb      	adds	r3, r7, r3
 8000c26:	2201      	movs	r2, #1
 8000c28:	701a      	strb	r2, [r3, #0]
 8000c2a:	e003      	b.n	8000c34 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c2c:	230f      	movs	r3, #15
 8000c2e:	18fb      	adds	r3, r7, r3
 8000c30:	2201      	movs	r2, #1
 8000c32:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c34:	230f      	movs	r3, #15
 8000c36:	18fb      	adds	r3, r7, r3
 8000c38:	781b      	ldrb	r3, [r3, #0]
}
 8000c3a:	0018      	movs	r0, r3
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	b005      	add	sp, #20
 8000c40:	bd90      	pop	{r4, r7, pc}
 8000c42:	46c0      	nop			@ (mov r8, r8)
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000000 	.word	0x20000000
 8000c4c:	20000004 	.word	0x20000004

08000c50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c54:	4b05      	ldr	r3, [pc, #20]	@ (8000c6c <HAL_IncTick+0x1c>)
 8000c56:	781b      	ldrb	r3, [r3, #0]
 8000c58:	001a      	movs	r2, r3
 8000c5a:	4b05      	ldr	r3, [pc, #20]	@ (8000c70 <HAL_IncTick+0x20>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	18d2      	adds	r2, r2, r3
 8000c60:	4b03      	ldr	r3, [pc, #12]	@ (8000c70 <HAL_IncTick+0x20>)
 8000c62:	601a      	str	r2, [r3, #0]
}
 8000c64:	46c0      	nop			@ (mov r8, r8)
 8000c66:	46bd      	mov	sp, r7
 8000c68:	bd80      	pop	{r7, pc}
 8000c6a:	46c0      	nop			@ (mov r8, r8)
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	2000027c 	.word	0x2000027c

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b02      	ldr	r3, [pc, #8]	@ (8000c84 <HAL_GetTick+0x10>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	0018      	movs	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	46c0      	nop			@ (mov r8, r8)
 8000c84:	2000027c 	.word	0x2000027c

08000c88 <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8000c90:	4b04      	ldr	r3, [pc, #16]	@ (8000ca4 <HAL_SYSCFG_EnableRemap+0x1c>)
 8000c92:	6819      	ldr	r1, [r3, #0]
 8000c94:	4b03      	ldr	r3, [pc, #12]	@ (8000ca4 <HAL_SYSCFG_EnableRemap+0x1c>)
 8000c96:	687a      	ldr	r2, [r7, #4]
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	601a      	str	r2, [r3, #0]
}
 8000c9c:	46c0      	nop			@ (mov r8, r8)
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	b002      	add	sp, #8
 8000ca2:	bd80      	pop	{r7, pc}
 8000ca4:	40010000 	.word	0x40010000

08000ca8 <HAL_SYSCFG_SetPinBinding>:
  *         for each die package
  *         This parameter can be a value of @ref HAL_BIND_CFG
  * @retval None
  */
void HAL_SYSCFG_SetPinBinding(uint32_t pin_binding)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_SYSCFG_PINBINDING(pin_binding));
  LL_SYSCFG_ConfigPinMux(pin_binding);
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f7ff ff52 	bl	8000b5c <LL_SYSCFG_ConfigPinMux>
}
 8000cb8:	46c0      	nop			@ (mov r8, r8)
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	b002      	add	sp, #8
 8000cbe:	bd80      	pop	{r7, pc}

08000cc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b082      	sub	sp, #8
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	0002      	movs	r2, r0
 8000cc8:	1dfb      	adds	r3, r7, #7
 8000cca:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ccc:	1dfb      	adds	r3, r7, #7
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b7f      	cmp	r3, #127	@ 0x7f
 8000cd2:	d809      	bhi.n	8000ce8 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cd4:	1dfb      	adds	r3, r7, #7
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	001a      	movs	r2, r3
 8000cda:	231f      	movs	r3, #31
 8000cdc:	401a      	ands	r2, r3
 8000cde:	4b04      	ldr	r3, [pc, #16]	@ (8000cf0 <__NVIC_EnableIRQ+0x30>)
 8000ce0:	2101      	movs	r1, #1
 8000ce2:	4091      	lsls	r1, r2
 8000ce4:	000a      	movs	r2, r1
 8000ce6:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ce8:	46c0      	nop			@ (mov r8, r8)
 8000cea:	46bd      	mov	sp, r7
 8000cec:	b002      	add	sp, #8
 8000cee:	bd80      	pop	{r7, pc}
 8000cf0:	e000e100 	.word	0xe000e100

08000cf4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cf4:	b590      	push	{r4, r7, lr}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	0002      	movs	r2, r0
 8000cfc:	6039      	str	r1, [r7, #0]
 8000cfe:	1dfb      	adds	r3, r7, #7
 8000d00:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000d02:	1dfb      	adds	r3, r7, #7
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b7f      	cmp	r3, #127	@ 0x7f
 8000d08:	d828      	bhi.n	8000d5c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d0a:	4a2f      	ldr	r2, [pc, #188]	@ (8000dc8 <__NVIC_SetPriority+0xd4>)
 8000d0c:	1dfb      	adds	r3, r7, #7
 8000d0e:	781b      	ldrb	r3, [r3, #0]
 8000d10:	b25b      	sxtb	r3, r3
 8000d12:	089b      	lsrs	r3, r3, #2
 8000d14:	33c0      	adds	r3, #192	@ 0xc0
 8000d16:	009b      	lsls	r3, r3, #2
 8000d18:	589b      	ldr	r3, [r3, r2]
 8000d1a:	1dfa      	adds	r2, r7, #7
 8000d1c:	7812      	ldrb	r2, [r2, #0]
 8000d1e:	0011      	movs	r1, r2
 8000d20:	2203      	movs	r2, #3
 8000d22:	400a      	ands	r2, r1
 8000d24:	00d2      	lsls	r2, r2, #3
 8000d26:	21ff      	movs	r1, #255	@ 0xff
 8000d28:	4091      	lsls	r1, r2
 8000d2a:	000a      	movs	r2, r1
 8000d2c:	43d2      	mvns	r2, r2
 8000d2e:	401a      	ands	r2, r3
 8000d30:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	019b      	lsls	r3, r3, #6
 8000d36:	22ff      	movs	r2, #255	@ 0xff
 8000d38:	401a      	ands	r2, r3
 8000d3a:	1dfb      	adds	r3, r7, #7
 8000d3c:	781b      	ldrb	r3, [r3, #0]
 8000d3e:	0018      	movs	r0, r3
 8000d40:	2303      	movs	r3, #3
 8000d42:	4003      	ands	r3, r0
 8000d44:	00db      	lsls	r3, r3, #3
 8000d46:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d48:	481f      	ldr	r0, [pc, #124]	@ (8000dc8 <__NVIC_SetPriority+0xd4>)
 8000d4a:	1dfb      	adds	r3, r7, #7
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	b25b      	sxtb	r3, r3
 8000d50:	089b      	lsrs	r3, r3, #2
 8000d52:	430a      	orrs	r2, r1
 8000d54:	33c0      	adds	r3, #192	@ 0xc0
 8000d56:	009b      	lsls	r3, r3, #2
 8000d58:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000d5a:	e031      	b.n	8000dc0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000d5c:	4a1b      	ldr	r2, [pc, #108]	@ (8000dcc <__NVIC_SetPriority+0xd8>)
 8000d5e:	1dfb      	adds	r3, r7, #7
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	0019      	movs	r1, r3
 8000d64:	230f      	movs	r3, #15
 8000d66:	400b      	ands	r3, r1
 8000d68:	3b08      	subs	r3, #8
 8000d6a:	089b      	lsrs	r3, r3, #2
 8000d6c:	3306      	adds	r3, #6
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	18d3      	adds	r3, r2, r3
 8000d72:	3304      	adds	r3, #4
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	1dfa      	adds	r2, r7, #7
 8000d78:	7812      	ldrb	r2, [r2, #0]
 8000d7a:	0011      	movs	r1, r2
 8000d7c:	2203      	movs	r2, #3
 8000d7e:	400a      	ands	r2, r1
 8000d80:	00d2      	lsls	r2, r2, #3
 8000d82:	21ff      	movs	r1, #255	@ 0xff
 8000d84:	4091      	lsls	r1, r2
 8000d86:	000a      	movs	r2, r1
 8000d88:	43d2      	mvns	r2, r2
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000d8e:	683b      	ldr	r3, [r7, #0]
 8000d90:	019b      	lsls	r3, r3, #6
 8000d92:	22ff      	movs	r2, #255	@ 0xff
 8000d94:	401a      	ands	r2, r3
 8000d96:	1dfb      	adds	r3, r7, #7
 8000d98:	781b      	ldrb	r3, [r3, #0]
 8000d9a:	0018      	movs	r0, r3
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	4003      	ands	r3, r0
 8000da0:	00db      	lsls	r3, r3, #3
 8000da2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000da4:	4809      	ldr	r0, [pc, #36]	@ (8000dcc <__NVIC_SetPriority+0xd8>)
 8000da6:	1dfb      	adds	r3, r7, #7
 8000da8:	781b      	ldrb	r3, [r3, #0]
 8000daa:	001c      	movs	r4, r3
 8000dac:	230f      	movs	r3, #15
 8000dae:	4023      	ands	r3, r4
 8000db0:	3b08      	subs	r3, #8
 8000db2:	089b      	lsrs	r3, r3, #2
 8000db4:	430a      	orrs	r2, r1
 8000db6:	3306      	adds	r3, #6
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	18c3      	adds	r3, r0, r3
 8000dbc:	3304      	adds	r3, #4
 8000dbe:	601a      	str	r2, [r3, #0]
}
 8000dc0:	46c0      	nop			@ (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b003      	add	sp, #12
 8000dc6:	bd90      	pop	{r4, r7, pc}
 8000dc8:	e000e100 	.word	0xe000e100
 8000dcc:	e000ed00 	.word	0xe000ed00

08000dd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	1e5a      	subs	r2, r3, #1
 8000ddc:	2380      	movs	r3, #128	@ 0x80
 8000dde:	045b      	lsls	r3, r3, #17
 8000de0:	429a      	cmp	r2, r3
 8000de2:	d301      	bcc.n	8000de8 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000de4:	2301      	movs	r3, #1
 8000de6:	e010      	b.n	8000e0a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000de8:	4b0a      	ldr	r3, [pc, #40]	@ (8000e14 <SysTick_Config+0x44>)
 8000dea:	687a      	ldr	r2, [r7, #4]
 8000dec:	3a01      	subs	r2, #1
 8000dee:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000df0:	2301      	movs	r3, #1
 8000df2:	425b      	negs	r3, r3
 8000df4:	2103      	movs	r1, #3
 8000df6:	0018      	movs	r0, r3
 8000df8:	f7ff ff7c 	bl	8000cf4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000dfc:	4b05      	ldr	r3, [pc, #20]	@ (8000e14 <SysTick_Config+0x44>)
 8000dfe:	2200      	movs	r2, #0
 8000e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e02:	4b04      	ldr	r3, [pc, #16]	@ (8000e14 <SysTick_Config+0x44>)
 8000e04:	2207      	movs	r2, #7
 8000e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e08:	2300      	movs	r3, #0
}
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b002      	add	sp, #8
 8000e10:	bd80      	pop	{r7, pc}
 8000e12:	46c0      	nop			@ (mov r8, r8)
 8000e14:	e000e010 	.word	0xe000e010

08000e18 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	60b9      	str	r1, [r7, #8]
 8000e20:	607a      	str	r2, [r7, #4]
 8000e22:	210f      	movs	r1, #15
 8000e24:	187b      	adds	r3, r7, r1
 8000e26:	1c02      	adds	r2, r0, #0
 8000e28:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8000e2a:	68ba      	ldr	r2, [r7, #8]
 8000e2c:	187b      	adds	r3, r7, r1
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	0011      	movs	r1, r2
 8000e34:	0018      	movs	r0, r3
 8000e36:	f7ff ff5d 	bl	8000cf4 <__NVIC_SetPriority>
}
 8000e3a:	46c0      	nop			@ (mov r8, r8)
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	b004      	add	sp, #16
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	b082      	sub	sp, #8
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	0002      	movs	r2, r0
 8000e4a:	1dfb      	adds	r3, r7, #7
 8000e4c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e4e:	1dfb      	adds	r3, r7, #7
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	b25b      	sxtb	r3, r3
 8000e54:	0018      	movs	r0, r3
 8000e56:	f7ff ff33 	bl	8000cc0 <__NVIC_EnableIRQ>
}
 8000e5a:	46c0      	nop			@ (mov r8, r8)
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	b002      	add	sp, #8
 8000e60:	bd80      	pop	{r7, pc}

08000e62 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e62:	b580      	push	{r7, lr}
 8000e64:	b082      	sub	sp, #8
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	0018      	movs	r0, r3
 8000e6e:	f7ff ffaf 	bl	8000dd0 <SysTick_Config>
 8000e72:	0003      	movs	r3, r0
}
 8000e74:	0018      	movs	r0, r3
 8000e76:	46bd      	mov	sp, r7
 8000e78:	b002      	add	sp, #8
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b086      	sub	sp, #24
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000e86:	2300      	movs	r3, #0
 8000e88:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000e8a:	e14d      	b.n	8001128 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2101      	movs	r1, #1
 8000e92:	693a      	ldr	r2, [r7, #16]
 8000e94:	4091      	lsls	r1, r2
 8000e96:	000a      	movs	r2, r1
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d100      	bne.n	8000ea4 <HAL_GPIO_Init+0x28>
 8000ea2:	e13e      	b.n	8001122 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	2b02      	cmp	r3, #2
 8000eaa:	d003      	beq.n	8000eb4 <HAL_GPIO_Init+0x38>
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	685b      	ldr	r3, [r3, #4]
 8000eb0:	2b12      	cmp	r3, #18
 8000eb2:	d125      	bne.n	8000f00 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	08da      	lsrs	r2, r3, #3
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	3208      	adds	r2, #8
 8000ebc:	0092      	lsls	r2, r2, #2
 8000ebe:	58d3      	ldr	r3, [r2, r3]
 8000ec0:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000ec2:	693b      	ldr	r3, [r7, #16]
 8000ec4:	2207      	movs	r2, #7
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	009b      	lsls	r3, r3, #2
 8000eca:	220f      	movs	r2, #15
 8000ecc:	409a      	lsls	r2, r3
 8000ece:	0013      	movs	r3, r2
 8000ed0:	43da      	mvns	r2, r3
 8000ed2:	697b      	ldr	r3, [r7, #20]
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000ed8:	683b      	ldr	r3, [r7, #0]
 8000eda:	691b      	ldr	r3, [r3, #16]
 8000edc:	220f      	movs	r2, #15
 8000ede:	401a      	ands	r2, r3
 8000ee0:	693b      	ldr	r3, [r7, #16]
 8000ee2:	2107      	movs	r1, #7
 8000ee4:	400b      	ands	r3, r1
 8000ee6:	009b      	lsls	r3, r3, #2
 8000ee8:	409a      	lsls	r2, r3
 8000eea:	0013      	movs	r3, r2
 8000eec:	697a      	ldr	r2, [r7, #20]
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000ef2:	693b      	ldr	r3, [r7, #16]
 8000ef4:	08da      	lsrs	r2, r3, #3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	3208      	adds	r2, #8
 8000efa:	0092      	lsls	r2, r2, #2
 8000efc:	6979      	ldr	r1, [r7, #20]
 8000efe:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	005b      	lsls	r3, r3, #1
 8000f0a:	2203      	movs	r2, #3
 8000f0c:	409a      	lsls	r2, r3
 8000f0e:	0013      	movs	r3, r2
 8000f10:	43da      	mvns	r2, r3
 8000f12:	697b      	ldr	r3, [r7, #20]
 8000f14:	4013      	ands	r3, r2
 8000f16:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000f18:	683b      	ldr	r3, [r7, #0]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	2203      	movs	r2, #3
 8000f1e:	401a      	ands	r2, r3
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	005b      	lsls	r3, r3, #1
 8000f24:	409a      	lsls	r2, r3
 8000f26:	0013      	movs	r3, r2
 8000f28:	697a      	ldr	r2, [r7, #20]
 8000f2a:	4313      	orrs	r3, r2
 8000f2c:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	697a      	ldr	r2, [r7, #20]
 8000f32:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d00b      	beq.n	8000f54 <HAL_GPIO_Init+0xd8>
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	2b02      	cmp	r3, #2
 8000f42:	d007      	beq.n	8000f54 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f44:	683b      	ldr	r3, [r7, #0]
 8000f46:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f48:	2b11      	cmp	r3, #17
 8000f4a:	d003      	beq.n	8000f54 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f4c:	683b      	ldr	r3, [r7, #0]
 8000f4e:	685b      	ldr	r3, [r3, #4]
 8000f50:	2b12      	cmp	r3, #18
 8000f52:	d130      	bne.n	8000fb6 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	689b      	ldr	r3, [r3, #8]
 8000f58:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	2203      	movs	r2, #3
 8000f60:	409a      	lsls	r2, r3
 8000f62:	0013      	movs	r3, r2
 8000f64:	43da      	mvns	r2, r3
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	4013      	ands	r3, r2
 8000f6a:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	68da      	ldr	r2, [r3, #12]
 8000f70:	693b      	ldr	r3, [r7, #16]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	409a      	lsls	r2, r3
 8000f76:	0013      	movs	r3, r2
 8000f78:	697a      	ldr	r2, [r7, #20]
 8000f7a:	4313      	orrs	r3, r2
 8000f7c:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	693b      	ldr	r3, [r7, #16]
 8000f8e:	409a      	lsls	r2, r3
 8000f90:	0013      	movs	r3, r2
 8000f92:	43da      	mvns	r2, r3
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	4013      	ands	r3, r2
 8000f98:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f9a:	683b      	ldr	r3, [r7, #0]
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	091b      	lsrs	r3, r3, #4
 8000fa0:	2201      	movs	r2, #1
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	693b      	ldr	r3, [r7, #16]
 8000fa6:	409a      	lsls	r2, r3
 8000fa8:	0013      	movs	r3, r2
 8000faa:	697a      	ldr	r2, [r7, #20]
 8000fac:	4313      	orrs	r3, r2
 8000fae:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	697a      	ldr	r2, [r7, #20]
 8000fb4:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	685b      	ldr	r3, [r3, #4]
 8000fba:	2b03      	cmp	r3, #3
 8000fbc:	d017      	beq.n	8000fee <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	68db      	ldr	r3, [r3, #12]
 8000fc2:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000fc4:	693b      	ldr	r3, [r7, #16]
 8000fc6:	005b      	lsls	r3, r3, #1
 8000fc8:	2203      	movs	r2, #3
 8000fca:	409a      	lsls	r2, r3
 8000fcc:	0013      	movs	r3, r2
 8000fce:	43da      	mvns	r2, r3
 8000fd0:	697b      	ldr	r3, [r7, #20]
 8000fd2:	4013      	ands	r3, r2
 8000fd4:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	689a      	ldr	r2, [r3, #8]
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	005b      	lsls	r3, r3, #1
 8000fde:	409a      	lsls	r2, r3
 8000fe0:	0013      	movs	r3, r2
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	4313      	orrs	r3, r2
 8000fe6:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	697a      	ldr	r2, [r7, #20]
 8000fec:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685a      	ldr	r2, [r3, #4]
 8000ff2:	2380      	movs	r3, #128	@ 0x80
 8000ff4:	055b      	lsls	r3, r3, #21
 8000ff6:	4013      	ands	r3, r2
 8000ff8:	d100      	bne.n	8000ffc <HAL_GPIO_Init+0x180>
 8000ffa:	e092      	b.n	8001122 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000ffc:	4a50      	ldr	r2, [pc, #320]	@ (8001140 <HAL_GPIO_Init+0x2c4>)
 8000ffe:	693b      	ldr	r3, [r7, #16]
 8001000:	089b      	lsrs	r3, r3, #2
 8001002:	3318      	adds	r3, #24
 8001004:	009b      	lsls	r3, r3, #2
 8001006:	589b      	ldr	r3, [r3, r2]
 8001008:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	2203      	movs	r2, #3
 800100e:	4013      	ands	r3, r2
 8001010:	00db      	lsls	r3, r3, #3
 8001012:	220f      	movs	r2, #15
 8001014:	409a      	lsls	r2, r3
 8001016:	0013      	movs	r3, r2
 8001018:	43da      	mvns	r2, r3
 800101a:	697b      	ldr	r3, [r7, #20]
 800101c:	4013      	ands	r3, r2
 800101e:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001020:	687a      	ldr	r2, [r7, #4]
 8001022:	23a0      	movs	r3, #160	@ 0xa0
 8001024:	05db      	lsls	r3, r3, #23
 8001026:	429a      	cmp	r2, r3
 8001028:	d013      	beq.n	8001052 <HAL_GPIO_Init+0x1d6>
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	4a45      	ldr	r2, [pc, #276]	@ (8001144 <HAL_GPIO_Init+0x2c8>)
 800102e:	4293      	cmp	r3, r2
 8001030:	d00d      	beq.n	800104e <HAL_GPIO_Init+0x1d2>
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	4a44      	ldr	r2, [pc, #272]	@ (8001148 <HAL_GPIO_Init+0x2cc>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d007      	beq.n	800104a <HAL_GPIO_Init+0x1ce>
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	4a43      	ldr	r2, [pc, #268]	@ (800114c <HAL_GPIO_Init+0x2d0>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d101      	bne.n	8001046 <HAL_GPIO_Init+0x1ca>
 8001042:	2305      	movs	r3, #5
 8001044:	e006      	b.n	8001054 <HAL_GPIO_Init+0x1d8>
 8001046:	2306      	movs	r3, #6
 8001048:	e004      	b.n	8001054 <HAL_GPIO_Init+0x1d8>
 800104a:	2302      	movs	r3, #2
 800104c:	e002      	b.n	8001054 <HAL_GPIO_Init+0x1d8>
 800104e:	2301      	movs	r3, #1
 8001050:	e000      	b.n	8001054 <HAL_GPIO_Init+0x1d8>
 8001052:	2300      	movs	r3, #0
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	2103      	movs	r1, #3
 8001058:	400a      	ands	r2, r1
 800105a:	00d2      	lsls	r2, r2, #3
 800105c:	4093      	lsls	r3, r2
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	4313      	orrs	r3, r2
 8001062:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001064:	4936      	ldr	r1, [pc, #216]	@ (8001140 <HAL_GPIO_Init+0x2c4>)
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	089b      	lsrs	r3, r3, #2
 800106a:	3318      	adds	r3, #24
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	697a      	ldr	r2, [r7, #20]
 8001070:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001072:	4a33      	ldr	r2, [pc, #204]	@ (8001140 <HAL_GPIO_Init+0x2c4>)
 8001074:	2380      	movs	r3, #128	@ 0x80
 8001076:	58d3      	ldr	r3, [r2, r3]
 8001078:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800107a:	68fb      	ldr	r3, [r7, #12]
 800107c:	43da      	mvns	r2, r3
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	4013      	ands	r3, r2
 8001082:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	2380      	movs	r3, #128	@ 0x80
 800108a:	025b      	lsls	r3, r3, #9
 800108c:	4013      	ands	r3, r2
 800108e:	d003      	beq.n	8001098 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001090:	697a      	ldr	r2, [r7, #20]
 8001092:	68fb      	ldr	r3, [r7, #12]
 8001094:	4313      	orrs	r3, r2
 8001096:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001098:	4929      	ldr	r1, [pc, #164]	@ (8001140 <HAL_GPIO_Init+0x2c4>)
 800109a:	2280      	movs	r2, #128	@ 0x80
 800109c:	697b      	ldr	r3, [r7, #20]
 800109e:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 80010a0:	4a27      	ldr	r2, [pc, #156]	@ (8001140 <HAL_GPIO_Init+0x2c4>)
 80010a2:	2384      	movs	r3, #132	@ 0x84
 80010a4:	58d3      	ldr	r3, [r2, r3]
 80010a6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	43da      	mvns	r2, r3
 80010ac:	697b      	ldr	r3, [r7, #20]
 80010ae:	4013      	ands	r3, r2
 80010b0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	685a      	ldr	r2, [r3, #4]
 80010b6:	2380      	movs	r3, #128	@ 0x80
 80010b8:	029b      	lsls	r3, r3, #10
 80010ba:	4013      	ands	r3, r2
 80010bc:	d003      	beq.n	80010c6 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 80010be:	697a      	ldr	r2, [r7, #20]
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 80010c6:	491e      	ldr	r1, [pc, #120]	@ (8001140 <HAL_GPIO_Init+0x2c4>)
 80010c8:	2284      	movs	r2, #132	@ 0x84
 80010ca:	697b      	ldr	r3, [r7, #20]
 80010cc:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 80010ce:	4b1c      	ldr	r3, [pc, #112]	@ (8001140 <HAL_GPIO_Init+0x2c4>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	43da      	mvns	r2, r3
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	4013      	ands	r3, r2
 80010dc:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010de:	683b      	ldr	r3, [r7, #0]
 80010e0:	685a      	ldr	r2, [r3, #4]
 80010e2:	2380      	movs	r3, #128	@ 0x80
 80010e4:	035b      	lsls	r3, r3, #13
 80010e6:	4013      	ands	r3, r2
 80010e8:	d003      	beq.n	80010f2 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 80010ea:	697a      	ldr	r2, [r7, #20]
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4313      	orrs	r3, r2
 80010f0:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 80010f2:	4b13      	ldr	r3, [pc, #76]	@ (8001140 <HAL_GPIO_Init+0x2c4>)
 80010f4:	697a      	ldr	r2, [r7, #20]
 80010f6:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80010f8:	4b11      	ldr	r3, [pc, #68]	@ (8001140 <HAL_GPIO_Init+0x2c4>)
 80010fa:	685b      	ldr	r3, [r3, #4]
 80010fc:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80010fe:	68fb      	ldr	r3, [r7, #12]
 8001100:	43da      	mvns	r2, r3
 8001102:	697b      	ldr	r3, [r7, #20]
 8001104:	4013      	ands	r3, r2
 8001106:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	685a      	ldr	r2, [r3, #4]
 800110c:	2380      	movs	r3, #128	@ 0x80
 800110e:	039b      	lsls	r3, r3, #14
 8001110:	4013      	ands	r3, r2
 8001112:	d003      	beq.n	800111c <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001114:	697a      	ldr	r2, [r7, #20]
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	4313      	orrs	r3, r2
 800111a:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 800111c:	4b08      	ldr	r3, [pc, #32]	@ (8001140 <HAL_GPIO_Init+0x2c4>)
 800111e:	697a      	ldr	r2, [r7, #20]
 8001120:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	3301      	adds	r3, #1
 8001126:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	681a      	ldr	r2, [r3, #0]
 800112c:	693b      	ldr	r3, [r7, #16]
 800112e:	40da      	lsrs	r2, r3
 8001130:	1e13      	subs	r3, r2, #0
 8001132:	d000      	beq.n	8001136 <HAL_GPIO_Init+0x2ba>
 8001134:	e6aa      	b.n	8000e8c <HAL_GPIO_Init+0x10>
  }
}
 8001136:	46c0      	nop			@ (mov r8, r8)
 8001138:	46c0      	nop			@ (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	b006      	add	sp, #24
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40021800 	.word	0x40021800
 8001144:	50000400 	.word	0x50000400
 8001148:	50000800 	.word	0x50000800
 800114c:	50001400 	.word	0x50001400

08001150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	0008      	movs	r0, r1
 800115a:	0011      	movs	r1, r2
 800115c:	1cbb      	adds	r3, r7, #2
 800115e:	1c02      	adds	r2, r0, #0
 8001160:	801a      	strh	r2, [r3, #0]
 8001162:	1c7b      	adds	r3, r7, #1
 8001164:	1c0a      	adds	r2, r1, #0
 8001166:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001168:	1c7b      	adds	r3, r7, #1
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	2b00      	cmp	r3, #0
 800116e:	d004      	beq.n	800117a <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001170:	1cbb      	adds	r3, r7, #2
 8001172:	881a      	ldrh	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001178:	e003      	b.n	8001182 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800117a:	1cbb      	adds	r3, r7, #2
 800117c:	881a      	ldrh	r2, [r3, #0]
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001182:	46c0      	nop			@ (mov r8, r8)
 8001184:	46bd      	mov	sp, r7
 8001186:	b002      	add	sp, #8
 8001188:	bd80      	pop	{r7, pc}
	...

0800118c <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b086      	sub	sp, #24
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e1d0      	b.n	8001540 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2201      	movs	r2, #1
 80011a4:	4013      	ands	r3, r2
 80011a6:	d100      	bne.n	80011aa <HAL_RCC_OscConfig+0x1e>
 80011a8:	e069      	b.n	800127e <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80011aa:	4bc8      	ldr	r3, [pc, #800]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 80011ac:	689b      	ldr	r3, [r3, #8]
 80011ae:	2238      	movs	r2, #56	@ 0x38
 80011b0:	4013      	ands	r3, r2
 80011b2:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	2b08      	cmp	r3, #8
 80011b8:	d105      	bne.n	80011c6 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	685b      	ldr	r3, [r3, #4]
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d15d      	bne.n	800127e <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e1bc      	b.n	8001540 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685a      	ldr	r2, [r3, #4]
 80011ca:	2380      	movs	r3, #128	@ 0x80
 80011cc:	025b      	lsls	r3, r3, #9
 80011ce:	429a      	cmp	r2, r3
 80011d0:	d107      	bne.n	80011e2 <HAL_RCC_OscConfig+0x56>
 80011d2:	4bbe      	ldr	r3, [pc, #760]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 80011d4:	681a      	ldr	r2, [r3, #0]
 80011d6:	4bbd      	ldr	r3, [pc, #756]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 80011d8:	2180      	movs	r1, #128	@ 0x80
 80011da:	0249      	lsls	r1, r1, #9
 80011dc:	430a      	orrs	r2, r1
 80011de:	601a      	str	r2, [r3, #0]
 80011e0:	e020      	b.n	8001224 <HAL_RCC_OscConfig+0x98>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	23a0      	movs	r3, #160	@ 0xa0
 80011e8:	02db      	lsls	r3, r3, #11
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d10e      	bne.n	800120c <HAL_RCC_OscConfig+0x80>
 80011ee:	4bb7      	ldr	r3, [pc, #732]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 80011f0:	681a      	ldr	r2, [r3, #0]
 80011f2:	4bb6      	ldr	r3, [pc, #728]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 80011f4:	2180      	movs	r1, #128	@ 0x80
 80011f6:	02c9      	lsls	r1, r1, #11
 80011f8:	430a      	orrs	r2, r1
 80011fa:	601a      	str	r2, [r3, #0]
 80011fc:	4bb3      	ldr	r3, [pc, #716]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	4bb2      	ldr	r3, [pc, #712]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 8001202:	2180      	movs	r1, #128	@ 0x80
 8001204:	0249      	lsls	r1, r1, #9
 8001206:	430a      	orrs	r2, r1
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	e00b      	b.n	8001224 <HAL_RCC_OscConfig+0x98>
 800120c:	4baf      	ldr	r3, [pc, #700]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 800120e:	681a      	ldr	r2, [r3, #0]
 8001210:	4bae      	ldr	r3, [pc, #696]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 8001212:	49af      	ldr	r1, [pc, #700]	@ (80014d0 <HAL_RCC_OscConfig+0x344>)
 8001214:	400a      	ands	r2, r1
 8001216:	601a      	str	r2, [r3, #0]
 8001218:	4bac      	ldr	r3, [pc, #688]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 800121a:	681a      	ldr	r2, [r3, #0]
 800121c:	4bab      	ldr	r3, [pc, #684]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 800121e:	49ad      	ldr	r1, [pc, #692]	@ (80014d4 <HAL_RCC_OscConfig+0x348>)
 8001220:	400a      	ands	r2, r1
 8001222:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	685b      	ldr	r3, [r3, #4]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d014      	beq.n	8001256 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800122c:	f7ff fd22 	bl	8000c74 <HAL_GetTick>
 8001230:	0003      	movs	r3, r0
 8001232:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001234:	e008      	b.n	8001248 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001236:	f7ff fd1d 	bl	8000c74 <HAL_GetTick>
 800123a:	0002      	movs	r2, r0
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b64      	cmp	r3, #100	@ 0x64
 8001242:	d901      	bls.n	8001248 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001244:	2303      	movs	r3, #3
 8001246:	e17b      	b.n	8001540 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001248:	4ba0      	ldr	r3, [pc, #640]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 800124a:	681a      	ldr	r2, [r3, #0]
 800124c:	2380      	movs	r3, #128	@ 0x80
 800124e:	029b      	lsls	r3, r3, #10
 8001250:	4013      	ands	r3, r2
 8001252:	d0f0      	beq.n	8001236 <HAL_RCC_OscConfig+0xaa>
 8001254:	e013      	b.n	800127e <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001256:	f7ff fd0d 	bl	8000c74 <HAL_GetTick>
 800125a:	0003      	movs	r3, r0
 800125c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800125e:	e008      	b.n	8001272 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001260:	f7ff fd08 	bl	8000c74 <HAL_GetTick>
 8001264:	0002      	movs	r2, r0
 8001266:	693b      	ldr	r3, [r7, #16]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	2b64      	cmp	r3, #100	@ 0x64
 800126c:	d901      	bls.n	8001272 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800126e:	2303      	movs	r3, #3
 8001270:	e166      	b.n	8001540 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001272:	4b96      	ldr	r3, [pc, #600]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 8001274:	681a      	ldr	r2, [r3, #0]
 8001276:	2380      	movs	r3, #128	@ 0x80
 8001278:	029b      	lsls	r3, r3, #10
 800127a:	4013      	ands	r3, r2
 800127c:	d1f0      	bne.n	8001260 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	2202      	movs	r2, #2
 8001284:	4013      	ands	r3, r2
 8001286:	d100      	bne.n	800128a <HAL_RCC_OscConfig+0xfe>
 8001288:	e086      	b.n	8001398 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800128a:	4b90      	ldr	r3, [pc, #576]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 800128c:	689b      	ldr	r3, [r3, #8]
 800128e:	2238      	movs	r2, #56	@ 0x38
 8001290:	4013      	ands	r3, r2
 8001292:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001294:	697b      	ldr	r3, [r7, #20]
 8001296:	2b00      	cmp	r3, #0
 8001298:	d12f      	bne.n	80012fa <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	68db      	ldr	r3, [r3, #12]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d101      	bne.n	80012a6 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e14c      	b.n	8001540 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a6:	4b89      	ldr	r3, [pc, #548]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	4a8b      	ldr	r2, [pc, #556]	@ (80014d8 <HAL_RCC_OscConfig+0x34c>)
 80012ac:	4013      	ands	r3, r2
 80012ae:	0019      	movs	r1, r3
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	695b      	ldr	r3, [r3, #20]
 80012b4:	021a      	lsls	r2, r3, #8
 80012b6:	4b85      	ldr	r3, [pc, #532]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 80012b8:	430a      	orrs	r2, r1
 80012ba:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d112      	bne.n	80012e8 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80012c2:	4b82      	ldr	r3, [pc, #520]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a85      	ldr	r2, [pc, #532]	@ (80014dc <HAL_RCC_OscConfig+0x350>)
 80012c8:	4013      	ands	r3, r2
 80012ca:	0019      	movs	r1, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	691a      	ldr	r2, [r3, #16]
 80012d0:	4b7e      	ldr	r3, [pc, #504]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 80012d2:	430a      	orrs	r2, r1
 80012d4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80012d6:	4b7d      	ldr	r3, [pc, #500]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	0adb      	lsrs	r3, r3, #11
 80012dc:	2207      	movs	r2, #7
 80012de:	4013      	ands	r3, r2
 80012e0:	4a7f      	ldr	r2, [pc, #508]	@ (80014e0 <HAL_RCC_OscConfig+0x354>)
 80012e2:	40da      	lsrs	r2, r3
 80012e4:	4b7f      	ldr	r3, [pc, #508]	@ (80014e4 <HAL_RCC_OscConfig+0x358>)
 80012e6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80012e8:	4b7f      	ldr	r3, [pc, #508]	@ (80014e8 <HAL_RCC_OscConfig+0x35c>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	0018      	movs	r0, r3
 80012ee:	f7ff fc65 	bl	8000bbc <HAL_InitTick>
 80012f2:	1e03      	subs	r3, r0, #0
 80012f4:	d050      	beq.n	8001398 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80012f6:	2301      	movs	r3, #1
 80012f8:	e122      	b.n	8001540 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	68db      	ldr	r3, [r3, #12]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d030      	beq.n	8001364 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001302:	4b72      	ldr	r3, [pc, #456]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	4a75      	ldr	r2, [pc, #468]	@ (80014dc <HAL_RCC_OscConfig+0x350>)
 8001308:	4013      	ands	r3, r2
 800130a:	0019      	movs	r1, r3
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	691a      	ldr	r2, [r3, #16]
 8001310:	4b6e      	ldr	r3, [pc, #440]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 8001312:	430a      	orrs	r2, r1
 8001314:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001316:	4b6d      	ldr	r3, [pc, #436]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	4b6c      	ldr	r3, [pc, #432]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 800131c:	2180      	movs	r1, #128	@ 0x80
 800131e:	0049      	lsls	r1, r1, #1
 8001320:	430a      	orrs	r2, r1
 8001322:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001324:	f7ff fca6 	bl	8000c74 <HAL_GetTick>
 8001328:	0003      	movs	r3, r0
 800132a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800132c:	e008      	b.n	8001340 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800132e:	f7ff fca1 	bl	8000c74 <HAL_GetTick>
 8001332:	0002      	movs	r2, r0
 8001334:	693b      	ldr	r3, [r7, #16]
 8001336:	1ad3      	subs	r3, r2, r3
 8001338:	2b02      	cmp	r3, #2
 800133a:	d901      	bls.n	8001340 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800133c:	2303      	movs	r3, #3
 800133e:	e0ff      	b.n	8001540 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001340:	4b62      	ldr	r3, [pc, #392]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 8001342:	681a      	ldr	r2, [r3, #0]
 8001344:	2380      	movs	r3, #128	@ 0x80
 8001346:	00db      	lsls	r3, r3, #3
 8001348:	4013      	ands	r3, r2
 800134a:	d0f0      	beq.n	800132e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800134c:	4b5f      	ldr	r3, [pc, #380]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 800134e:	685b      	ldr	r3, [r3, #4]
 8001350:	4a61      	ldr	r2, [pc, #388]	@ (80014d8 <HAL_RCC_OscConfig+0x34c>)
 8001352:	4013      	ands	r3, r2
 8001354:	0019      	movs	r1, r3
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	695b      	ldr	r3, [r3, #20]
 800135a:	021a      	lsls	r2, r3, #8
 800135c:	4b5b      	ldr	r3, [pc, #364]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 800135e:	430a      	orrs	r2, r1
 8001360:	605a      	str	r2, [r3, #4]
 8001362:	e019      	b.n	8001398 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001364:	4b59      	ldr	r3, [pc, #356]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 8001366:	681a      	ldr	r2, [r3, #0]
 8001368:	4b58      	ldr	r3, [pc, #352]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 800136a:	4960      	ldr	r1, [pc, #384]	@ (80014ec <HAL_RCC_OscConfig+0x360>)
 800136c:	400a      	ands	r2, r1
 800136e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001370:	f7ff fc80 	bl	8000c74 <HAL_GetTick>
 8001374:	0003      	movs	r3, r0
 8001376:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800137a:	f7ff fc7b 	bl	8000c74 <HAL_GetTick>
 800137e:	0002      	movs	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e0d9      	b.n	8001540 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800138c:	4b4f      	ldr	r3, [pc, #316]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 800138e:	681a      	ldr	r2, [r3, #0]
 8001390:	2380      	movs	r3, #128	@ 0x80
 8001392:	00db      	lsls	r3, r3, #3
 8001394:	4013      	ands	r3, r2
 8001396:	d1f0      	bne.n	800137a <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	681b      	ldr	r3, [r3, #0]
 800139c:	2208      	movs	r2, #8
 800139e:	4013      	ands	r3, r2
 80013a0:	d042      	beq.n	8001428 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80013a2:	4b4a      	ldr	r3, [pc, #296]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	2238      	movs	r2, #56	@ 0x38
 80013a8:	4013      	ands	r3, r2
 80013aa:	2b18      	cmp	r3, #24
 80013ac:	d105      	bne.n	80013ba <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	699b      	ldr	r3, [r3, #24]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d138      	bne.n	8001428 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	e0c2      	b.n	8001540 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	699b      	ldr	r3, [r3, #24]
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d019      	beq.n	80013f6 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80013c2:	4b42      	ldr	r3, [pc, #264]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 80013c4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013c6:	4b41      	ldr	r3, [pc, #260]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 80013c8:	2101      	movs	r1, #1
 80013ca:	430a      	orrs	r2, r1
 80013cc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ce:	f7ff fc51 	bl	8000c74 <HAL_GetTick>
 80013d2:	0003      	movs	r3, r0
 80013d4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80013d8:	f7ff fc4c 	bl	8000c74 <HAL_GetTick>
 80013dc:	0002      	movs	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b02      	cmp	r3, #2
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e0aa      	b.n	8001540 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80013ea:	4b38      	ldr	r3, [pc, #224]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 80013ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013ee:	2202      	movs	r2, #2
 80013f0:	4013      	ands	r3, r2
 80013f2:	d0f1      	beq.n	80013d8 <HAL_RCC_OscConfig+0x24c>
 80013f4:	e018      	b.n	8001428 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80013f6:	4b35      	ldr	r3, [pc, #212]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 80013f8:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80013fa:	4b34      	ldr	r3, [pc, #208]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 80013fc:	2101      	movs	r1, #1
 80013fe:	438a      	bics	r2, r1
 8001400:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001402:	f7ff fc37 	bl	8000c74 <HAL_GetTick>
 8001406:	0003      	movs	r3, r0
 8001408:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800140a:	e008      	b.n	800141e <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800140c:	f7ff fc32 	bl	8000c74 <HAL_GetTick>
 8001410:	0002      	movs	r2, r0
 8001412:	693b      	ldr	r3, [r7, #16]
 8001414:	1ad3      	subs	r3, r2, r3
 8001416:	2b02      	cmp	r3, #2
 8001418:	d901      	bls.n	800141e <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800141a:	2303      	movs	r3, #3
 800141c:	e090      	b.n	8001540 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800141e:	4b2b      	ldr	r3, [pc, #172]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 8001420:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001422:	2202      	movs	r2, #2
 8001424:	4013      	ands	r3, r2
 8001426:	d1f1      	bne.n	800140c <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2204      	movs	r2, #4
 800142e:	4013      	ands	r3, r2
 8001430:	d100      	bne.n	8001434 <HAL_RCC_OscConfig+0x2a8>
 8001432:	e084      	b.n	800153e <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001434:	230f      	movs	r3, #15
 8001436:	18fb      	adds	r3, r7, r3
 8001438:	2200      	movs	r2, #0
 800143a:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800143c:	4b23      	ldr	r3, [pc, #140]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 800143e:	689b      	ldr	r3, [r3, #8]
 8001440:	2238      	movs	r2, #56	@ 0x38
 8001442:	4013      	ands	r3, r2
 8001444:	2b20      	cmp	r3, #32
 8001446:	d106      	bne.n	8001456 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	689b      	ldr	r3, [r3, #8]
 800144c:	2b00      	cmp	r3, #0
 800144e:	d000      	beq.n	8001452 <HAL_RCC_OscConfig+0x2c6>
 8001450:	e075      	b.n	800153e <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e074      	b.n	8001540 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	689b      	ldr	r3, [r3, #8]
 800145a:	2b01      	cmp	r3, #1
 800145c:	d106      	bne.n	800146c <HAL_RCC_OscConfig+0x2e0>
 800145e:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 8001460:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001462:	4b1a      	ldr	r3, [pc, #104]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 8001464:	2101      	movs	r1, #1
 8001466:	430a      	orrs	r2, r1
 8001468:	65da      	str	r2, [r3, #92]	@ 0x5c
 800146a:	e01c      	b.n	80014a6 <HAL_RCC_OscConfig+0x31a>
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	689b      	ldr	r3, [r3, #8]
 8001470:	2b05      	cmp	r3, #5
 8001472:	d10c      	bne.n	800148e <HAL_RCC_OscConfig+0x302>
 8001474:	4b15      	ldr	r3, [pc, #84]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 8001476:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001478:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 800147a:	2104      	movs	r1, #4
 800147c:	430a      	orrs	r2, r1
 800147e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 8001482:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001484:	4b11      	ldr	r3, [pc, #68]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 8001486:	2101      	movs	r1, #1
 8001488:	430a      	orrs	r2, r1
 800148a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800148c:	e00b      	b.n	80014a6 <HAL_RCC_OscConfig+0x31a>
 800148e:	4b0f      	ldr	r3, [pc, #60]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 8001490:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001492:	4b0e      	ldr	r3, [pc, #56]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 8001494:	2101      	movs	r1, #1
 8001496:	438a      	bics	r2, r1
 8001498:	65da      	str	r2, [r3, #92]	@ 0x5c
 800149a:	4b0c      	ldr	r3, [pc, #48]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 800149c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800149e:	4b0b      	ldr	r3, [pc, #44]	@ (80014cc <HAL_RCC_OscConfig+0x340>)
 80014a0:	2104      	movs	r1, #4
 80014a2:	438a      	bics	r2, r1
 80014a4:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d028      	beq.n	8001500 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ae:	f7ff fbe1 	bl	8000c74 <HAL_GetTick>
 80014b2:	0003      	movs	r3, r0
 80014b4:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80014b6:	e01d      	b.n	80014f4 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80014b8:	f7ff fbdc 	bl	8000c74 <HAL_GetTick>
 80014bc:	0002      	movs	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	4a0b      	ldr	r2, [pc, #44]	@ (80014f0 <HAL_RCC_OscConfig+0x364>)
 80014c4:	4293      	cmp	r3, r2
 80014c6:	d915      	bls.n	80014f4 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80014c8:	2303      	movs	r3, #3
 80014ca:	e039      	b.n	8001540 <HAL_RCC_OscConfig+0x3b4>
 80014cc:	40021000 	.word	0x40021000
 80014d0:	fffeffff 	.word	0xfffeffff
 80014d4:	fffbffff 	.word	0xfffbffff
 80014d8:	ffff80ff 	.word	0xffff80ff
 80014dc:	ffffc7ff 	.word	0xffffc7ff
 80014e0:	02dc6c00 	.word	0x02dc6c00
 80014e4:	20000000 	.word	0x20000000
 80014e8:	20000004 	.word	0x20000004
 80014ec:	fffffeff 	.word	0xfffffeff
 80014f0:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80014f4:	4b14      	ldr	r3, [pc, #80]	@ (8001548 <HAL_RCC_OscConfig+0x3bc>)
 80014f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80014f8:	2202      	movs	r2, #2
 80014fa:	4013      	ands	r3, r2
 80014fc:	d0dc      	beq.n	80014b8 <HAL_RCC_OscConfig+0x32c>
 80014fe:	e013      	b.n	8001528 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001500:	f7ff fbb8 	bl	8000c74 <HAL_GetTick>
 8001504:	0003      	movs	r3, r0
 8001506:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001508:	e009      	b.n	800151e <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800150a:	f7ff fbb3 	bl	8000c74 <HAL_GetTick>
 800150e:	0002      	movs	r2, r0
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	1ad3      	subs	r3, r2, r3
 8001514:	4a0d      	ldr	r2, [pc, #52]	@ (800154c <HAL_RCC_OscConfig+0x3c0>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d901      	bls.n	800151e <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800151a:	2303      	movs	r3, #3
 800151c:	e010      	b.n	8001540 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800151e:	4b0a      	ldr	r3, [pc, #40]	@ (8001548 <HAL_RCC_OscConfig+0x3bc>)
 8001520:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001522:	2202      	movs	r2, #2
 8001524:	4013      	ands	r3, r2
 8001526:	d1f0      	bne.n	800150a <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001528:	230f      	movs	r3, #15
 800152a:	18fb      	adds	r3, r7, r3
 800152c:	781b      	ldrb	r3, [r3, #0]
 800152e:	2b01      	cmp	r3, #1
 8001530:	d105      	bne.n	800153e <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001532:	4b05      	ldr	r3, [pc, #20]	@ (8001548 <HAL_RCC_OscConfig+0x3bc>)
 8001534:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001536:	4b04      	ldr	r3, [pc, #16]	@ (8001548 <HAL_RCC_OscConfig+0x3bc>)
 8001538:	4905      	ldr	r1, [pc, #20]	@ (8001550 <HAL_RCC_OscConfig+0x3c4>)
 800153a:	400a      	ands	r2, r1
 800153c:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 800153e:	2300      	movs	r3, #0
}
 8001540:	0018      	movs	r0, r3
 8001542:	46bd      	mov	sp, r7
 8001544:	b006      	add	sp, #24
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40021000 	.word	0x40021000
 800154c:	00001388 	.word	0x00001388
 8001550:	efffffff 	.word	0xefffffff

08001554 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	b084      	sub	sp, #16
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
 800155c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d101      	bne.n	8001568 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001564:	2301      	movs	r3, #1
 8001566:	e0df      	b.n	8001728 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001568:	4b71      	ldr	r3, [pc, #452]	@ (8001730 <HAL_RCC_ClockConfig+0x1dc>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	2207      	movs	r2, #7
 800156e:	4013      	ands	r3, r2
 8001570:	683a      	ldr	r2, [r7, #0]
 8001572:	429a      	cmp	r2, r3
 8001574:	d91e      	bls.n	80015b4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001576:	4b6e      	ldr	r3, [pc, #440]	@ (8001730 <HAL_RCC_ClockConfig+0x1dc>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2207      	movs	r2, #7
 800157c:	4393      	bics	r3, r2
 800157e:	0019      	movs	r1, r3
 8001580:	4b6b      	ldr	r3, [pc, #428]	@ (8001730 <HAL_RCC_ClockConfig+0x1dc>)
 8001582:	683a      	ldr	r2, [r7, #0]
 8001584:	430a      	orrs	r2, r1
 8001586:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001588:	f7ff fb74 	bl	8000c74 <HAL_GetTick>
 800158c:	0003      	movs	r3, r0
 800158e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001590:	e009      	b.n	80015a6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001592:	f7ff fb6f 	bl	8000c74 <HAL_GetTick>
 8001596:	0002      	movs	r2, r0
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	1ad3      	subs	r3, r2, r3
 800159c:	4a65      	ldr	r2, [pc, #404]	@ (8001734 <HAL_RCC_ClockConfig+0x1e0>)
 800159e:	4293      	cmp	r3, r2
 80015a0:	d901      	bls.n	80015a6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80015a2:	2303      	movs	r3, #3
 80015a4:	e0c0      	b.n	8001728 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80015a6:	4b62      	ldr	r3, [pc, #392]	@ (8001730 <HAL_RCC_ClockConfig+0x1dc>)
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2207      	movs	r2, #7
 80015ac:	4013      	ands	r3, r2
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	429a      	cmp	r2, r3
 80015b2:	d1ee      	bne.n	8001592 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	2202      	movs	r2, #2
 80015ba:	4013      	ands	r3, r2
 80015bc:	d017      	beq.n	80015ee <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	2204      	movs	r2, #4
 80015c4:	4013      	ands	r3, r2
 80015c6:	d008      	beq.n	80015da <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80015c8:	4b5b      	ldr	r3, [pc, #364]	@ (8001738 <HAL_RCC_ClockConfig+0x1e4>)
 80015ca:	689b      	ldr	r3, [r3, #8]
 80015cc:	4a5b      	ldr	r2, [pc, #364]	@ (800173c <HAL_RCC_ClockConfig+0x1e8>)
 80015ce:	401a      	ands	r2, r3
 80015d0:	4b59      	ldr	r3, [pc, #356]	@ (8001738 <HAL_RCC_ClockConfig+0x1e4>)
 80015d2:	21b0      	movs	r1, #176	@ 0xb0
 80015d4:	0109      	lsls	r1, r1, #4
 80015d6:	430a      	orrs	r2, r1
 80015d8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80015da:	4b57      	ldr	r3, [pc, #348]	@ (8001738 <HAL_RCC_ClockConfig+0x1e4>)
 80015dc:	689b      	ldr	r3, [r3, #8]
 80015de:	4a58      	ldr	r2, [pc, #352]	@ (8001740 <HAL_RCC_ClockConfig+0x1ec>)
 80015e0:	4013      	ands	r3, r2
 80015e2:	0019      	movs	r1, r3
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	68da      	ldr	r2, [r3, #12]
 80015e8:	4b53      	ldr	r3, [pc, #332]	@ (8001738 <HAL_RCC_ClockConfig+0x1e4>)
 80015ea:	430a      	orrs	r2, r1
 80015ec:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	2201      	movs	r2, #1
 80015f4:	4013      	ands	r3, r2
 80015f6:	d04b      	beq.n	8001690 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	2b01      	cmp	r3, #1
 80015fe:	d107      	bne.n	8001610 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001600:	4b4d      	ldr	r3, [pc, #308]	@ (8001738 <HAL_RCC_ClockConfig+0x1e4>)
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	2380      	movs	r3, #128	@ 0x80
 8001606:	029b      	lsls	r3, r3, #10
 8001608:	4013      	ands	r3, r2
 800160a:	d11f      	bne.n	800164c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800160c:	2301      	movs	r3, #1
 800160e:	e08b      	b.n	8001728 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	2b00      	cmp	r3, #0
 8001616:	d107      	bne.n	8001628 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001618:	4b47      	ldr	r3, [pc, #284]	@ (8001738 <HAL_RCC_ClockConfig+0x1e4>)
 800161a:	681a      	ldr	r2, [r3, #0]
 800161c:	2380      	movs	r3, #128	@ 0x80
 800161e:	00db      	lsls	r3, r3, #3
 8001620:	4013      	ands	r3, r2
 8001622:	d113      	bne.n	800164c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001624:	2301      	movs	r3, #1
 8001626:	e07f      	b.n	8001728 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	685b      	ldr	r3, [r3, #4]
 800162c:	2b03      	cmp	r3, #3
 800162e:	d106      	bne.n	800163e <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001630:	4b41      	ldr	r3, [pc, #260]	@ (8001738 <HAL_RCC_ClockConfig+0x1e4>)
 8001632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001634:	2202      	movs	r2, #2
 8001636:	4013      	ands	r3, r2
 8001638:	d108      	bne.n	800164c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800163a:	2301      	movs	r3, #1
 800163c:	e074      	b.n	8001728 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800163e:	4b3e      	ldr	r3, [pc, #248]	@ (8001738 <HAL_RCC_ClockConfig+0x1e4>)
 8001640:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001642:	2202      	movs	r2, #2
 8001644:	4013      	ands	r3, r2
 8001646:	d101      	bne.n	800164c <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	e06d      	b.n	8001728 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800164c:	4b3a      	ldr	r3, [pc, #232]	@ (8001738 <HAL_RCC_ClockConfig+0x1e4>)
 800164e:	689b      	ldr	r3, [r3, #8]
 8001650:	2207      	movs	r2, #7
 8001652:	4393      	bics	r3, r2
 8001654:	0019      	movs	r1, r3
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	685a      	ldr	r2, [r3, #4]
 800165a:	4b37      	ldr	r3, [pc, #220]	@ (8001738 <HAL_RCC_ClockConfig+0x1e4>)
 800165c:	430a      	orrs	r2, r1
 800165e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001660:	f7ff fb08 	bl	8000c74 <HAL_GetTick>
 8001664:	0003      	movs	r3, r0
 8001666:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001668:	e009      	b.n	800167e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800166a:	f7ff fb03 	bl	8000c74 <HAL_GetTick>
 800166e:	0002      	movs	r2, r0
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	1ad3      	subs	r3, r2, r3
 8001674:	4a2f      	ldr	r2, [pc, #188]	@ (8001734 <HAL_RCC_ClockConfig+0x1e0>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d901      	bls.n	800167e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e054      	b.n	8001728 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800167e:	4b2e      	ldr	r3, [pc, #184]	@ (8001738 <HAL_RCC_ClockConfig+0x1e4>)
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	2238      	movs	r2, #56	@ 0x38
 8001684:	401a      	ands	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	00db      	lsls	r3, r3, #3
 800168c:	429a      	cmp	r2, r3
 800168e:	d1ec      	bne.n	800166a <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001690:	4b27      	ldr	r3, [pc, #156]	@ (8001730 <HAL_RCC_ClockConfig+0x1dc>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2207      	movs	r2, #7
 8001696:	4013      	ands	r3, r2
 8001698:	683a      	ldr	r2, [r7, #0]
 800169a:	429a      	cmp	r2, r3
 800169c:	d21e      	bcs.n	80016dc <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800169e:	4b24      	ldr	r3, [pc, #144]	@ (8001730 <HAL_RCC_ClockConfig+0x1dc>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	2207      	movs	r2, #7
 80016a4:	4393      	bics	r3, r2
 80016a6:	0019      	movs	r1, r3
 80016a8:	4b21      	ldr	r3, [pc, #132]	@ (8001730 <HAL_RCC_ClockConfig+0x1dc>)
 80016aa:	683a      	ldr	r2, [r7, #0]
 80016ac:	430a      	orrs	r2, r1
 80016ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80016b0:	f7ff fae0 	bl	8000c74 <HAL_GetTick>
 80016b4:	0003      	movs	r3, r0
 80016b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016b8:	e009      	b.n	80016ce <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80016ba:	f7ff fadb 	bl	8000c74 <HAL_GetTick>
 80016be:	0002      	movs	r2, r0
 80016c0:	68fb      	ldr	r3, [r7, #12]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	4a1b      	ldr	r2, [pc, #108]	@ (8001734 <HAL_RCC_ClockConfig+0x1e0>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e02c      	b.n	8001728 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80016ce:	4b18      	ldr	r3, [pc, #96]	@ (8001730 <HAL_RCC_ClockConfig+0x1dc>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	2207      	movs	r2, #7
 80016d4:	4013      	ands	r3, r2
 80016d6:	683a      	ldr	r2, [r7, #0]
 80016d8:	429a      	cmp	r2, r3
 80016da:	d1ee      	bne.n	80016ba <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	2204      	movs	r2, #4
 80016e2:	4013      	ands	r3, r2
 80016e4:	d009      	beq.n	80016fa <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80016e6:	4b14      	ldr	r3, [pc, #80]	@ (8001738 <HAL_RCC_ClockConfig+0x1e4>)
 80016e8:	689b      	ldr	r3, [r3, #8]
 80016ea:	4a16      	ldr	r2, [pc, #88]	@ (8001744 <HAL_RCC_ClockConfig+0x1f0>)
 80016ec:	4013      	ands	r3, r2
 80016ee:	0019      	movs	r1, r3
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	691a      	ldr	r2, [r3, #16]
 80016f4:	4b10      	ldr	r3, [pc, #64]	@ (8001738 <HAL_RCC_ClockConfig+0x1e4>)
 80016f6:	430a      	orrs	r2, r1
 80016f8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80016fa:	f000 f82b 	bl	8001754 <HAL_RCC_GetSysClockFreq>
 80016fe:	0001      	movs	r1, r0
 8001700:	4b0d      	ldr	r3, [pc, #52]	@ (8001738 <HAL_RCC_ClockConfig+0x1e4>)
 8001702:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001704:	0a1b      	lsrs	r3, r3, #8
 8001706:	220f      	movs	r2, #15
 8001708:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800170a:	4b0f      	ldr	r3, [pc, #60]	@ (8001748 <HAL_RCC_ClockConfig+0x1f4>)
 800170c:	0092      	lsls	r2, r2, #2
 800170e:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001710:	221f      	movs	r2, #31
 8001712:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001714:	000a      	movs	r2, r1
 8001716:	40da      	lsrs	r2, r3
 8001718:	4b0c      	ldr	r3, [pc, #48]	@ (800174c <HAL_RCC_ClockConfig+0x1f8>)
 800171a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800171c:	4b0c      	ldr	r3, [pc, #48]	@ (8001750 <HAL_RCC_ClockConfig+0x1fc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	0018      	movs	r0, r3
 8001722:	f7ff fa4b 	bl	8000bbc <HAL_InitTick>
 8001726:	0003      	movs	r3, r0
}
 8001728:	0018      	movs	r0, r3
 800172a:	46bd      	mov	sp, r7
 800172c:	b004      	add	sp, #16
 800172e:	bd80      	pop	{r7, pc}
 8001730:	40022000 	.word	0x40022000
 8001734:	00001388 	.word	0x00001388
 8001738:	40021000 	.word	0x40021000
 800173c:	ffff84ff 	.word	0xffff84ff
 8001740:	fffff0ff 	.word	0xfffff0ff
 8001744:	ffff8fff 	.word	0xffff8fff
 8001748:	0800212c 	.word	0x0800212c
 800174c:	20000000 	.word	0x20000000
 8001750:	20000004 	.word	0x20000004

08001754 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b082      	sub	sp, #8
 8001758:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800175a:	4b1c      	ldr	r3, [pc, #112]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x78>)
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2238      	movs	r2, #56	@ 0x38
 8001760:	4013      	ands	r3, r2
 8001762:	d10f      	bne.n	8001784 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001764:	4b19      	ldr	r3, [pc, #100]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x78>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	0adb      	lsrs	r3, r3, #11
 800176a:	2207      	movs	r2, #7
 800176c:	4013      	ands	r3, r2
 800176e:	2201      	movs	r2, #1
 8001770:	409a      	lsls	r2, r3
 8001772:	0013      	movs	r3, r2
 8001774:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001776:	6839      	ldr	r1, [r7, #0]
 8001778:	4815      	ldr	r0, [pc, #84]	@ (80017d0 <HAL_RCC_GetSysClockFreq+0x7c>)
 800177a:	f7fe fcc5 	bl	8000108 <__udivsi3>
 800177e:	0003      	movs	r3, r0
 8001780:	607b      	str	r3, [r7, #4]
 8001782:	e01e      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001784:	4b11      	ldr	r3, [pc, #68]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x78>)
 8001786:	689b      	ldr	r3, [r3, #8]
 8001788:	2238      	movs	r2, #56	@ 0x38
 800178a:	4013      	ands	r3, r2
 800178c:	2b08      	cmp	r3, #8
 800178e:	d102      	bne.n	8001796 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001790:	4b10      	ldr	r3, [pc, #64]	@ (80017d4 <HAL_RCC_GetSysClockFreq+0x80>)
 8001792:	607b      	str	r3, [r7, #4]
 8001794:	e015      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001796:	4b0d      	ldr	r3, [pc, #52]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x78>)
 8001798:	689b      	ldr	r3, [r3, #8]
 800179a:	2238      	movs	r2, #56	@ 0x38
 800179c:	4013      	ands	r3, r2
 800179e:	2b20      	cmp	r3, #32
 80017a0:	d103      	bne.n	80017aa <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80017a2:	2380      	movs	r3, #128	@ 0x80
 80017a4:	021b      	lsls	r3, r3, #8
 80017a6:	607b      	str	r3, [r7, #4]
 80017a8:	e00b      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80017aa:	4b08      	ldr	r3, [pc, #32]	@ (80017cc <HAL_RCC_GetSysClockFreq+0x78>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	2238      	movs	r2, #56	@ 0x38
 80017b0:	4013      	ands	r3, r2
 80017b2:	2b18      	cmp	r3, #24
 80017b4:	d103      	bne.n	80017be <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80017b6:	23fa      	movs	r3, #250	@ 0xfa
 80017b8:	01db      	lsls	r3, r3, #7
 80017ba:	607b      	str	r3, [r7, #4]
 80017bc:	e001      	b.n	80017c2 <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80017be:	2300      	movs	r3, #0
 80017c0:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80017c2:	687b      	ldr	r3, [r7, #4]
}
 80017c4:	0018      	movs	r0, r3
 80017c6:	46bd      	mov	sp, r7
 80017c8:	b002      	add	sp, #8
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40021000 	.word	0x40021000
 80017d0:	02dc6c00 	.word	0x02dc6c00
 80017d4:	007a1200 	.word	0x007a1200

080017d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b082      	sub	sp, #8
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e04a      	b.n	8001880 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	223d      	movs	r2, #61	@ 0x3d
 80017ee:	5c9b      	ldrb	r3, [r3, r2]
 80017f0:	b2db      	uxtb	r3, r3
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d107      	bne.n	8001806 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	223c      	movs	r2, #60	@ 0x3c
 80017fa:	2100      	movs	r1, #0
 80017fc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	0018      	movs	r0, r3
 8001802:	f7ff f8db 	bl	80009bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	223d      	movs	r2, #61	@ 0x3d
 800180a:	2102      	movs	r1, #2
 800180c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681a      	ldr	r2, [r3, #0]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	3304      	adds	r3, #4
 8001816:	0019      	movs	r1, r3
 8001818:	0010      	movs	r0, r2
 800181a:	f000 fac7 	bl	8001dac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2248      	movs	r2, #72	@ 0x48
 8001822:	2101      	movs	r1, #1
 8001824:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	223e      	movs	r2, #62	@ 0x3e
 800182a:	2101      	movs	r1, #1
 800182c:	5499      	strb	r1, [r3, r2]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	223f      	movs	r2, #63	@ 0x3f
 8001832:	2101      	movs	r1, #1
 8001834:	5499      	strb	r1, [r3, r2]
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2240      	movs	r2, #64	@ 0x40
 800183a:	2101      	movs	r1, #1
 800183c:	5499      	strb	r1, [r3, r2]
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	2241      	movs	r2, #65	@ 0x41
 8001842:	2101      	movs	r1, #1
 8001844:	5499      	strb	r1, [r3, r2]
 8001846:	687b      	ldr	r3, [r7, #4]
 8001848:	2242      	movs	r2, #66	@ 0x42
 800184a:	2101      	movs	r1, #1
 800184c:	5499      	strb	r1, [r3, r2]
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	2243      	movs	r2, #67	@ 0x43
 8001852:	2101      	movs	r1, #1
 8001854:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	2244      	movs	r2, #68	@ 0x44
 800185a:	2101      	movs	r1, #1
 800185c:	5499      	strb	r1, [r3, r2]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2245      	movs	r2, #69	@ 0x45
 8001862:	2101      	movs	r1, #1
 8001864:	5499      	strb	r1, [r3, r2]
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	2246      	movs	r2, #70	@ 0x46
 800186a:	2101      	movs	r1, #1
 800186c:	5499      	strb	r1, [r3, r2]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	2247      	movs	r2, #71	@ 0x47
 8001872:	2101      	movs	r1, #1
 8001874:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	223d      	movs	r2, #61	@ 0x3d
 800187a:	2101      	movs	r1, #1
 800187c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800187e:	2300      	movs	r3, #0
}
 8001880:	0018      	movs	r0, r3
 8001882:	46bd      	mov	sp, r7
 8001884:	b002      	add	sp, #8
 8001886:	bd80      	pop	{r7, pc}

08001888 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b084      	sub	sp, #16
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	223d      	movs	r2, #61	@ 0x3d
 8001894:	5c9b      	ldrb	r3, [r3, r2]
 8001896:	b2db      	uxtb	r3, r3
 8001898:	2b01      	cmp	r3, #1
 800189a:	d001      	beq.n	80018a0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800189c:	2301      	movs	r3, #1
 800189e:	e02f      	b.n	8001900 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	223d      	movs	r2, #61	@ 0x3d
 80018a4:	2102      	movs	r1, #2
 80018a6:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a16      	ldr	r2, [pc, #88]	@ (8001908 <HAL_TIM_Base_Start+0x80>)
 80018ae:	4293      	cmp	r3, r2
 80018b0:	d004      	beq.n	80018bc <HAL_TIM_Base_Start+0x34>
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a15      	ldr	r2, [pc, #84]	@ (800190c <HAL_TIM_Base_Start+0x84>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d116      	bne.n	80018ea <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	4a13      	ldr	r2, [pc, #76]	@ (8001910 <HAL_TIM_Base_Start+0x88>)
 80018c4:	4013      	ands	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2b06      	cmp	r3, #6
 80018cc:	d016      	beq.n	80018fc <HAL_TIM_Base_Start+0x74>
 80018ce:	68fa      	ldr	r2, [r7, #12]
 80018d0:	2380      	movs	r3, #128	@ 0x80
 80018d2:	025b      	lsls	r3, r3, #9
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d011      	beq.n	80018fc <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	681a      	ldr	r2, [r3, #0]
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	2101      	movs	r1, #1
 80018e4:	430a      	orrs	r2, r1
 80018e6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018e8:	e008      	b.n	80018fc <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	681a      	ldr	r2, [r3, #0]
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	2101      	movs	r1, #1
 80018f6:	430a      	orrs	r2, r1
 80018f8:	601a      	str	r2, [r3, #0]
 80018fa:	e000      	b.n	80018fe <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80018fc:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80018fe:	2300      	movs	r3, #0
}
 8001900:	0018      	movs	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	b004      	add	sp, #16
 8001906:	bd80      	pop	{r7, pc}
 8001908:	40012c00 	.word	0x40012c00
 800190c:	40000400 	.word	0x40000400
 8001910:	00010007 	.word	0x00010007

08001914 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	223d      	movs	r2, #61	@ 0x3d
 8001920:	5c9b      	ldrb	r3, [r3, r2]
 8001922:	b2db      	uxtb	r3, r3
 8001924:	2b01      	cmp	r3, #1
 8001926:	d001      	beq.n	800192c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e037      	b.n	800199c <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	223d      	movs	r2, #61	@ 0x3d
 8001930:	2102      	movs	r1, #2
 8001932:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	68da      	ldr	r2, [r3, #12]
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	2101      	movs	r1, #1
 8001940:	430a      	orrs	r2, r1
 8001942:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4a16      	ldr	r2, [pc, #88]	@ (80019a4 <HAL_TIM_Base_Start_IT+0x90>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d004      	beq.n	8001958 <HAL_TIM_Base_Start_IT+0x44>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4a15      	ldr	r2, [pc, #84]	@ (80019a8 <HAL_TIM_Base_Start_IT+0x94>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d116      	bne.n	8001986 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689b      	ldr	r3, [r3, #8]
 800195e:	4a13      	ldr	r2, [pc, #76]	@ (80019ac <HAL_TIM_Base_Start_IT+0x98>)
 8001960:	4013      	ands	r3, r2
 8001962:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	2b06      	cmp	r3, #6
 8001968:	d016      	beq.n	8001998 <HAL_TIM_Base_Start_IT+0x84>
 800196a:	68fa      	ldr	r2, [r7, #12]
 800196c:	2380      	movs	r3, #128	@ 0x80
 800196e:	025b      	lsls	r3, r3, #9
 8001970:	429a      	cmp	r2, r3
 8001972:	d011      	beq.n	8001998 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	2101      	movs	r1, #1
 8001980:	430a      	orrs	r2, r1
 8001982:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001984:	e008      	b.n	8001998 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	681a      	ldr	r2, [r3, #0]
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	2101      	movs	r1, #1
 8001992:	430a      	orrs	r2, r1
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	e000      	b.n	800199a <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001998:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800199a:	2300      	movs	r3, #0
}
 800199c:	0018      	movs	r0, r3
 800199e:	46bd      	mov	sp, r7
 80019a0:	b004      	add	sp, #16
 80019a2:	bd80      	pop	{r7, pc}
 80019a4:	40012c00 	.word	0x40012c00
 80019a8:	40000400 	.word	0x40000400
 80019ac:	00010007 	.word	0x00010007

080019b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80019c8:	68bb      	ldr	r3, [r7, #8]
 80019ca:	2202      	movs	r2, #2
 80019cc:	4013      	ands	r3, r2
 80019ce:	d021      	beq.n	8001a14 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2202      	movs	r2, #2
 80019d4:	4013      	ands	r3, r2
 80019d6:	d01d      	beq.n	8001a14 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2203      	movs	r2, #3
 80019de:	4252      	negs	r2, r2
 80019e0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2201      	movs	r2, #1
 80019e6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	699b      	ldr	r3, [r3, #24]
 80019ee:	2203      	movs	r2, #3
 80019f0:	4013      	ands	r3, r2
 80019f2:	d004      	beq.n	80019fe <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	0018      	movs	r0, r3
 80019f8:	f000 f9c0 	bl	8001d7c <HAL_TIM_IC_CaptureCallback>
 80019fc:	e007      	b.n	8001a0e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	0018      	movs	r0, r3
 8001a02:	f000 f9b3 	bl	8001d6c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	0018      	movs	r0, r3
 8001a0a:	f000 f9bf 	bl	8001d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	2200      	movs	r2, #0
 8001a12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	2204      	movs	r2, #4
 8001a18:	4013      	ands	r3, r2
 8001a1a:	d022      	beq.n	8001a62 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001a1c:	68fb      	ldr	r3, [r7, #12]
 8001a1e:	2204      	movs	r2, #4
 8001a20:	4013      	ands	r3, r2
 8001a22:	d01e      	beq.n	8001a62 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	2205      	movs	r2, #5
 8001a2a:	4252      	negs	r2, r2
 8001a2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2202      	movs	r2, #2
 8001a32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	699a      	ldr	r2, [r3, #24]
 8001a3a:	23c0      	movs	r3, #192	@ 0xc0
 8001a3c:	009b      	lsls	r3, r3, #2
 8001a3e:	4013      	ands	r3, r2
 8001a40:	d004      	beq.n	8001a4c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	0018      	movs	r0, r3
 8001a46:	f000 f999 	bl	8001d7c <HAL_TIM_IC_CaptureCallback>
 8001a4a:	e007      	b.n	8001a5c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f000 f98c 	bl	8001d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	0018      	movs	r0, r3
 8001a58:	f000 f998 	bl	8001d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2200      	movs	r2, #0
 8001a60:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001a62:	68bb      	ldr	r3, [r7, #8]
 8001a64:	2208      	movs	r2, #8
 8001a66:	4013      	ands	r3, r2
 8001a68:	d021      	beq.n	8001aae <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2208      	movs	r2, #8
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d01d      	beq.n	8001aae <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	2209      	movs	r2, #9
 8001a78:	4252      	negs	r2, r2
 8001a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	2204      	movs	r2, #4
 8001a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	69db      	ldr	r3, [r3, #28]
 8001a88:	2203      	movs	r2, #3
 8001a8a:	4013      	ands	r3, r2
 8001a8c:	d004      	beq.n	8001a98 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	0018      	movs	r0, r3
 8001a92:	f000 f973 	bl	8001d7c <HAL_TIM_IC_CaptureCallback>
 8001a96:	e007      	b.n	8001aa8 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	0018      	movs	r0, r3
 8001a9c:	f000 f966 	bl	8001d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	0018      	movs	r0, r3
 8001aa4:	f000 f972 	bl	8001d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2210      	movs	r2, #16
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d022      	beq.n	8001afc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	2210      	movs	r2, #16
 8001aba:	4013      	ands	r3, r2
 8001abc:	d01e      	beq.n	8001afc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2211      	movs	r2, #17
 8001ac4:	4252      	negs	r2, r2
 8001ac6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2208      	movs	r2, #8
 8001acc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	69da      	ldr	r2, [r3, #28]
 8001ad4:	23c0      	movs	r3, #192	@ 0xc0
 8001ad6:	009b      	lsls	r3, r3, #2
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d004      	beq.n	8001ae6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	0018      	movs	r0, r3
 8001ae0:	f000 f94c 	bl	8001d7c <HAL_TIM_IC_CaptureCallback>
 8001ae4:	e007      	b.n	8001af6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	0018      	movs	r0, r3
 8001aea:	f000 f93f 	bl	8001d6c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	0018      	movs	r0, r3
 8001af2:	f000 f94b 	bl	8001d8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	2201      	movs	r2, #1
 8001b00:	4013      	ands	r3, r2
 8001b02:	d00c      	beq.n	8001b1e <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	2201      	movs	r2, #1
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d008      	beq.n	8001b1e <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	2202      	movs	r2, #2
 8001b12:	4252      	negs	r2, r2
 8001b14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	0018      	movs	r0, r3
 8001b1a:	f7fe fb81 	bl	8000220 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	2280      	movs	r2, #128	@ 0x80
 8001b22:	4013      	ands	r3, r2
 8001b24:	d104      	bne.n	8001b30 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001b26:	68ba      	ldr	r2, [r7, #8]
 8001b28:	2380      	movs	r3, #128	@ 0x80
 8001b2a:	019b      	lsls	r3, r3, #6
 8001b2c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001b2e:	d00b      	beq.n	8001b48 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	2280      	movs	r2, #128	@ 0x80
 8001b34:	4013      	ands	r3, r2
 8001b36:	d007      	beq.n	8001b48 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a1e      	ldr	r2, [pc, #120]	@ (8001bb8 <HAL_TIM_IRQHandler+0x208>)
 8001b3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	0018      	movs	r0, r3
 8001b44:	f000 faaa 	bl	800209c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001b48:	68ba      	ldr	r2, [r7, #8]
 8001b4a:	2380      	movs	r3, #128	@ 0x80
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d00b      	beq.n	8001b6a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	2280      	movs	r2, #128	@ 0x80
 8001b56:	4013      	ands	r3, r2
 8001b58:	d007      	beq.n	8001b6a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a17      	ldr	r2, [pc, #92]	@ (8001bbc <HAL_TIM_IRQHandler+0x20c>)
 8001b60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	0018      	movs	r0, r3
 8001b66:	f000 faa1 	bl	80020ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001b6a:	68bb      	ldr	r3, [r7, #8]
 8001b6c:	2240      	movs	r2, #64	@ 0x40
 8001b6e:	4013      	ands	r3, r2
 8001b70:	d00c      	beq.n	8001b8c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	2240      	movs	r2, #64	@ 0x40
 8001b76:	4013      	ands	r3, r2
 8001b78:	d008      	beq.n	8001b8c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	2241      	movs	r2, #65	@ 0x41
 8001b80:	4252      	negs	r2, r2
 8001b82:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	0018      	movs	r0, r3
 8001b88:	f000 f908 	bl	8001d9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	2220      	movs	r2, #32
 8001b90:	4013      	ands	r3, r2
 8001b92:	d00c      	beq.n	8001bae <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	2220      	movs	r2, #32
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d008      	beq.n	8001bae <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	2221      	movs	r2, #33	@ 0x21
 8001ba2:	4252      	negs	r2, r2
 8001ba4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	0018      	movs	r0, r3
 8001baa:	f000 fa6f 	bl	800208c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001bae:	46c0      	nop			@ (mov r8, r8)
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	b004      	add	sp, #16
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	46c0      	nop			@ (mov r8, r8)
 8001bb8:	ffffdf7f 	.word	0xffffdf7f
 8001bbc:	fffffeff 	.word	0xfffffeff

08001bc0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001bca:	230f      	movs	r3, #15
 8001bcc:	18fb      	adds	r3, r7, r3
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	223c      	movs	r2, #60	@ 0x3c
 8001bd6:	5c9b      	ldrb	r3, [r3, r2]
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	d101      	bne.n	8001be0 <HAL_TIM_ConfigClockSource+0x20>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e0bc      	b.n	8001d5a <HAL_TIM_ConfigClockSource+0x19a>
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	223c      	movs	r2, #60	@ 0x3c
 8001be4:	2101      	movs	r1, #1
 8001be6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	223d      	movs	r2, #61	@ 0x3d
 8001bec:	2102      	movs	r1, #2
 8001bee:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	689b      	ldr	r3, [r3, #8]
 8001bf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001bf8:	68bb      	ldr	r3, [r7, #8]
 8001bfa:	4a5a      	ldr	r2, [pc, #360]	@ (8001d64 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001bfc:	4013      	ands	r3, r2
 8001bfe:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001c00:	68bb      	ldr	r3, [r7, #8]
 8001c02:	4a59      	ldr	r2, [pc, #356]	@ (8001d68 <HAL_TIM_ConfigClockSource+0x1a8>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	68ba      	ldr	r2, [r7, #8]
 8001c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	2280      	movs	r2, #128	@ 0x80
 8001c16:	0192      	lsls	r2, r2, #6
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d040      	beq.n	8001c9e <HAL_TIM_ConfigClockSource+0xde>
 8001c1c:	2280      	movs	r2, #128	@ 0x80
 8001c1e:	0192      	lsls	r2, r2, #6
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d900      	bls.n	8001c26 <HAL_TIM_ConfigClockSource+0x66>
 8001c24:	e088      	b.n	8001d38 <HAL_TIM_ConfigClockSource+0x178>
 8001c26:	2280      	movs	r2, #128	@ 0x80
 8001c28:	0152      	lsls	r2, r2, #5
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d100      	bne.n	8001c30 <HAL_TIM_ConfigClockSource+0x70>
 8001c2e:	e088      	b.n	8001d42 <HAL_TIM_ConfigClockSource+0x182>
 8001c30:	2280      	movs	r2, #128	@ 0x80
 8001c32:	0152      	lsls	r2, r2, #5
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d900      	bls.n	8001c3a <HAL_TIM_ConfigClockSource+0x7a>
 8001c38:	e07e      	b.n	8001d38 <HAL_TIM_ConfigClockSource+0x178>
 8001c3a:	2b70      	cmp	r3, #112	@ 0x70
 8001c3c:	d018      	beq.n	8001c70 <HAL_TIM_ConfigClockSource+0xb0>
 8001c3e:	d900      	bls.n	8001c42 <HAL_TIM_ConfigClockSource+0x82>
 8001c40:	e07a      	b.n	8001d38 <HAL_TIM_ConfigClockSource+0x178>
 8001c42:	2b60      	cmp	r3, #96	@ 0x60
 8001c44:	d04f      	beq.n	8001ce6 <HAL_TIM_ConfigClockSource+0x126>
 8001c46:	d900      	bls.n	8001c4a <HAL_TIM_ConfigClockSource+0x8a>
 8001c48:	e076      	b.n	8001d38 <HAL_TIM_ConfigClockSource+0x178>
 8001c4a:	2b50      	cmp	r3, #80	@ 0x50
 8001c4c:	d03b      	beq.n	8001cc6 <HAL_TIM_ConfigClockSource+0x106>
 8001c4e:	d900      	bls.n	8001c52 <HAL_TIM_ConfigClockSource+0x92>
 8001c50:	e072      	b.n	8001d38 <HAL_TIM_ConfigClockSource+0x178>
 8001c52:	2b40      	cmp	r3, #64	@ 0x40
 8001c54:	d057      	beq.n	8001d06 <HAL_TIM_ConfigClockSource+0x146>
 8001c56:	d900      	bls.n	8001c5a <HAL_TIM_ConfigClockSource+0x9a>
 8001c58:	e06e      	b.n	8001d38 <HAL_TIM_ConfigClockSource+0x178>
 8001c5a:	2b30      	cmp	r3, #48	@ 0x30
 8001c5c:	d063      	beq.n	8001d26 <HAL_TIM_ConfigClockSource+0x166>
 8001c5e:	d86b      	bhi.n	8001d38 <HAL_TIM_ConfigClockSource+0x178>
 8001c60:	2b20      	cmp	r3, #32
 8001c62:	d060      	beq.n	8001d26 <HAL_TIM_ConfigClockSource+0x166>
 8001c64:	d868      	bhi.n	8001d38 <HAL_TIM_ConfigClockSource+0x178>
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d05d      	beq.n	8001d26 <HAL_TIM_ConfigClockSource+0x166>
 8001c6a:	2b10      	cmp	r3, #16
 8001c6c:	d05b      	beq.n	8001d26 <HAL_TIM_ConfigClockSource+0x166>
 8001c6e:	e063      	b.n	8001d38 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001c80:	f000 f982 	bl	8001f88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	2277      	movs	r2, #119	@ 0x77
 8001c90:	4313      	orrs	r3, r2
 8001c92:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	68ba      	ldr	r2, [r7, #8]
 8001c9a:	609a      	str	r2, [r3, #8]
      break;
 8001c9c:	e052      	b.n	8001d44 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001ca6:	683b      	ldr	r3, [r7, #0]
 8001ca8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001cae:	f000 f96b 	bl	8001f88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	689a      	ldr	r2, [r3, #8]
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	2180      	movs	r1, #128	@ 0x80
 8001cbe:	01c9      	lsls	r1, r1, #7
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	609a      	str	r2, [r3, #8]
      break;
 8001cc4:	e03e      	b.n	8001d44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cca:	683b      	ldr	r3, [r7, #0]
 8001ccc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001cd2:	001a      	movs	r2, r3
 8001cd4:	f000 f8dc 	bl	8001e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	2150      	movs	r1, #80	@ 0x50
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f000 f936 	bl	8001f50 <TIM_ITRx_SetConfig>
      break;
 8001ce4:	e02e      	b.n	8001d44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8001cf2:	001a      	movs	r2, r3
 8001cf4:	f000 f8fa 	bl	8001eec <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2160      	movs	r1, #96	@ 0x60
 8001cfe:	0018      	movs	r0, r3
 8001d00:	f000 f926 	bl	8001f50 <TIM_ITRx_SetConfig>
      break;
 8001d04:	e01e      	b.n	8001d44 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8001d12:	001a      	movs	r2, r3
 8001d14:	f000 f8bc 	bl	8001e90 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	2140      	movs	r1, #64	@ 0x40
 8001d1e:	0018      	movs	r0, r3
 8001d20:	f000 f916 	bl	8001f50 <TIM_ITRx_SetConfig>
      break;
 8001d24:	e00e      	b.n	8001d44 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681a      	ldr	r2, [r3, #0]
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	0019      	movs	r1, r3
 8001d30:	0010      	movs	r0, r2
 8001d32:	f000 f90d 	bl	8001f50 <TIM_ITRx_SetConfig>
      break;
 8001d36:	e005      	b.n	8001d44 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8001d38:	230f      	movs	r3, #15
 8001d3a:	18fb      	adds	r3, r7, r3
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	701a      	strb	r2, [r3, #0]
      break;
 8001d40:	e000      	b.n	8001d44 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8001d42:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	223d      	movs	r2, #61	@ 0x3d
 8001d48:	2101      	movs	r1, #1
 8001d4a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	223c      	movs	r2, #60	@ 0x3c
 8001d50:	2100      	movs	r1, #0
 8001d52:	5499      	strb	r1, [r3, r2]

  return status;
 8001d54:	230f      	movs	r3, #15
 8001d56:	18fb      	adds	r3, r7, r3
 8001d58:	781b      	ldrb	r3, [r3, #0]
}
 8001d5a:	0018      	movs	r0, r3
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	b004      	add	sp, #16
 8001d60:	bd80      	pop	{r7, pc}
 8001d62:	46c0      	nop			@ (mov r8, r8)
 8001d64:	ffceff88 	.word	0xffceff88
 8001d68:	ffff00ff 	.word	0xffff00ff

08001d6c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001d74:	46c0      	nop			@ (mov r8, r8)
 8001d76:	46bd      	mov	sp, r7
 8001d78:	b002      	add	sp, #8
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001d84:	46c0      	nop			@ (mov r8, r8)
 8001d86:	46bd      	mov	sp, r7
 8001d88:	b002      	add	sp, #8
 8001d8a:	bd80      	pop	{r7, pc}

08001d8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001d94:	46c0      	nop			@ (mov r8, r8)
 8001d96:	46bd      	mov	sp, r7
 8001d98:	b002      	add	sp, #8
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001da4:	46c0      	nop			@ (mov r8, r8)
 8001da6:	46bd      	mov	sp, r7
 8001da8:	b002      	add	sp, #8
 8001daa:	bd80      	pop	{r7, pc}

08001dac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
 8001db2:	6078      	str	r0, [r7, #4]
 8001db4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	4a2e      	ldr	r2, [pc, #184]	@ (8001e78 <TIM_Base_SetConfig+0xcc>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	d003      	beq.n	8001dcc <TIM_Base_SetConfig+0x20>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a2d      	ldr	r2, [pc, #180]	@ (8001e7c <TIM_Base_SetConfig+0xd0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d108      	bne.n	8001dde <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	2270      	movs	r2, #112	@ 0x70
 8001dd0:	4393      	bics	r3, r2
 8001dd2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	68fa      	ldr	r2, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	4a25      	ldr	r2, [pc, #148]	@ (8001e78 <TIM_Base_SetConfig+0xcc>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d00f      	beq.n	8001e06 <TIM_Base_SetConfig+0x5a>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	4a24      	ldr	r2, [pc, #144]	@ (8001e7c <TIM_Base_SetConfig+0xd0>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d00b      	beq.n	8001e06 <TIM_Base_SetConfig+0x5a>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	4a23      	ldr	r2, [pc, #140]	@ (8001e80 <TIM_Base_SetConfig+0xd4>)
 8001df2:	4293      	cmp	r3, r2
 8001df4:	d007      	beq.n	8001e06 <TIM_Base_SetConfig+0x5a>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4a22      	ldr	r2, [pc, #136]	@ (8001e84 <TIM_Base_SetConfig+0xd8>)
 8001dfa:	4293      	cmp	r3, r2
 8001dfc:	d003      	beq.n	8001e06 <TIM_Base_SetConfig+0x5a>
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a21      	ldr	r2, [pc, #132]	@ (8001e88 <TIM_Base_SetConfig+0xdc>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d108      	bne.n	8001e18 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	4a20      	ldr	r2, [pc, #128]	@ (8001e8c <TIM_Base_SetConfig+0xe0>)
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	68db      	ldr	r3, [r3, #12]
 8001e12:	68fa      	ldr	r2, [r7, #12]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	2280      	movs	r2, #128	@ 0x80
 8001e1c:	4393      	bics	r3, r2
 8001e1e:	001a      	movs	r2, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	695b      	ldr	r3, [r3, #20]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	689a      	ldr	r2, [r3, #8]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e78 <TIM_Base_SetConfig+0xcc>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d007      	beq.n	8001e50 <TIM_Base_SetConfig+0xa4>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a10      	ldr	r2, [pc, #64]	@ (8001e84 <TIM_Base_SetConfig+0xd8>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d003      	beq.n	8001e50 <TIM_Base_SetConfig+0xa4>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a0f      	ldr	r2, [pc, #60]	@ (8001e88 <TIM_Base_SetConfig+0xdc>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d103      	bne.n	8001e58 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	691a      	ldr	r2, [r3, #16]
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	431a      	orrs	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	68fa      	ldr	r2, [r7, #12]
 8001e6e:	601a      	str	r2, [r3, #0]
}
 8001e70:	46c0      	nop			@ (mov r8, r8)
 8001e72:	46bd      	mov	sp, r7
 8001e74:	b004      	add	sp, #16
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	40012c00 	.word	0x40012c00
 8001e7c:	40000400 	.word	0x40000400
 8001e80:	40002000 	.word	0x40002000
 8001e84:	40014400 	.word	0x40014400
 8001e88:	40014800 	.word	0x40014800
 8001e8c:	fffffcff 	.word	0xfffffcff

08001e90 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b086      	sub	sp, #24
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	60f8      	str	r0, [r7, #12]
 8001e98:	60b9      	str	r1, [r7, #8]
 8001e9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8001e9c:	68fb      	ldr	r3, [r7, #12]
 8001e9e:	6a1b      	ldr	r3, [r3, #32]
 8001ea0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6a1b      	ldr	r3, [r3, #32]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	4393      	bics	r3, r2
 8001eaa:	001a      	movs	r2, r3
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001eb6:	693b      	ldr	r3, [r7, #16]
 8001eb8:	22f0      	movs	r2, #240	@ 0xf0
 8001eba:	4393      	bics	r3, r2
 8001ebc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	011b      	lsls	r3, r3, #4
 8001ec2:	693a      	ldr	r2, [r7, #16]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ec8:	697b      	ldr	r3, [r7, #20]
 8001eca:	220a      	movs	r2, #10
 8001ecc:	4393      	bics	r3, r2
 8001ece:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8001ed0:	697a      	ldr	r2, [r7, #20]
 8001ed2:	68bb      	ldr	r3, [r7, #8]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	693a      	ldr	r2, [r7, #16]
 8001edc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	697a      	ldr	r2, [r7, #20]
 8001ee2:	621a      	str	r2, [r3, #32]
}
 8001ee4:	46c0      	nop			@ (mov r8, r8)
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b006      	add	sp, #24
 8001eea:	bd80      	pop	{r7, pc}

08001eec <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	6a1b      	ldr	r3, [r3, #32]
 8001efc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	6a1b      	ldr	r3, [r3, #32]
 8001f02:	2210      	movs	r2, #16
 8001f04:	4393      	bics	r3, r2
 8001f06:	001a      	movs	r2, r3
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	699b      	ldr	r3, [r3, #24]
 8001f10:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	4a0d      	ldr	r2, [pc, #52]	@ (8001f4c <TIM_TI2_ConfigInputStage+0x60>)
 8001f16:	4013      	ands	r3, r2
 8001f18:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	031b      	lsls	r3, r3, #12
 8001f1e:	693a      	ldr	r2, [r7, #16]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001f24:	697b      	ldr	r3, [r7, #20]
 8001f26:	22a0      	movs	r2, #160	@ 0xa0
 8001f28:	4393      	bics	r3, r2
 8001f2a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	011b      	lsls	r3, r3, #4
 8001f30:	697a      	ldr	r2, [r7, #20]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	693a      	ldr	r2, [r7, #16]
 8001f3a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	697a      	ldr	r2, [r7, #20]
 8001f40:	621a      	str	r2, [r3, #32]
}
 8001f42:	46c0      	nop			@ (mov r8, r8)
 8001f44:	46bd      	mov	sp, r7
 8001f46:	b006      	add	sp, #24
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	46c0      	nop			@ (mov r8, r8)
 8001f4c:	ffff0fff 	.word	0xffff0fff

08001f50 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b084      	sub	sp, #16
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
 8001f58:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	4a08      	ldr	r2, [pc, #32]	@ (8001f84 <TIM_ITRx_SetConfig+0x34>)
 8001f64:	4013      	ands	r3, r2
 8001f66:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8001f68:	683a      	ldr	r2, [r7, #0]
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	2207      	movs	r2, #7
 8001f70:	4313      	orrs	r3, r2
 8001f72:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	68fa      	ldr	r2, [r7, #12]
 8001f78:	609a      	str	r2, [r3, #8]
}
 8001f7a:	46c0      	nop			@ (mov r8, r8)
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	b004      	add	sp, #16
 8001f80:	bd80      	pop	{r7, pc}
 8001f82:	46c0      	nop			@ (mov r8, r8)
 8001f84:	ffcfff8f 	.word	0xffcfff8f

08001f88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	60b9      	str	r1, [r7, #8]
 8001f92:	607a      	str	r2, [r7, #4]
 8001f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f9c:	697b      	ldr	r3, [r7, #20]
 8001f9e:	4a09      	ldr	r2, [pc, #36]	@ (8001fc4 <TIM_ETR_SetConfig+0x3c>)
 8001fa0:	4013      	ands	r3, r2
 8001fa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	021a      	lsls	r2, r3, #8
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	431a      	orrs	r2, r3
 8001fac:	68bb      	ldr	r3, [r7, #8]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	697a      	ldr	r2, [r7, #20]
 8001fb2:	4313      	orrs	r3, r2
 8001fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	697a      	ldr	r2, [r7, #20]
 8001fba:	609a      	str	r2, [r3, #8]
}
 8001fbc:	46c0      	nop			@ (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b006      	add	sp, #24
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	ffff00ff 	.word	0xffff00ff

08001fc8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	223c      	movs	r2, #60	@ 0x3c
 8001fd6:	5c9b      	ldrb	r3, [r3, r2]
 8001fd8:	2b01      	cmp	r3, #1
 8001fda:	d101      	bne.n	8001fe0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	e04a      	b.n	8002076 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	223c      	movs	r2, #60	@ 0x3c
 8001fe4:	2101      	movs	r1, #1
 8001fe6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	223d      	movs	r2, #61	@ 0x3d
 8001fec:	2102      	movs	r1, #2
 8001fee:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	685b      	ldr	r3, [r3, #4]
 8001ff6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4a1e      	ldr	r2, [pc, #120]	@ (8002080 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002006:	4293      	cmp	r3, r2
 8002008:	d108      	bne.n	800201c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	4a1d      	ldr	r2, [pc, #116]	@ (8002084 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800200e:	4013      	ands	r3, r2
 8002010:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	68fa      	ldr	r2, [r7, #12]
 8002018:	4313      	orrs	r3, r2
 800201a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	2270      	movs	r2, #112	@ 0x70
 8002020:	4393      	bics	r3, r2
 8002022:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68fa      	ldr	r2, [r7, #12]
 800202a:	4313      	orrs	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	68fa      	ldr	r2, [r7, #12]
 8002034:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4a11      	ldr	r2, [pc, #68]	@ (8002080 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800203c:	4293      	cmp	r3, r2
 800203e:	d004      	beq.n	800204a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a10      	ldr	r2, [pc, #64]	@ (8002088 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d10c      	bne.n	8002064 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	2280      	movs	r2, #128	@ 0x80
 800204e:	4393      	bics	r3, r2
 8002050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	689b      	ldr	r3, [r3, #8]
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	4313      	orrs	r3, r2
 800205a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	223d      	movs	r2, #61	@ 0x3d
 8002068:	2101      	movs	r1, #1
 800206a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	223c      	movs	r2, #60	@ 0x3c
 8002070:	2100      	movs	r1, #0
 8002072:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002074:	2300      	movs	r3, #0
}
 8002076:	0018      	movs	r0, r3
 8002078:	46bd      	mov	sp, r7
 800207a:	b004      	add	sp, #16
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			@ (mov r8, r8)
 8002080:	40012c00 	.word	0x40012c00
 8002084:	ff0fffff 	.word	0xff0fffff
 8002088:	40000400 	.word	0x40000400

0800208c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002094:	46c0      	nop			@ (mov r8, r8)
 8002096:	46bd      	mov	sp, r7
 8002098:	b002      	add	sp, #8
 800209a:	bd80      	pop	{r7, pc}

0800209c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80020a4:	46c0      	nop			@ (mov r8, r8)
 80020a6:	46bd      	mov	sp, r7
 80020a8:	b002      	add	sp, #8
 80020aa:	bd80      	pop	{r7, pc}

080020ac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b082      	sub	sp, #8
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80020b4:	46c0      	nop			@ (mov r8, r8)
 80020b6:	46bd      	mov	sp, r7
 80020b8:	b002      	add	sp, #8
 80020ba:	bd80      	pop	{r7, pc}

080020bc <memset>:
 80020bc:	0003      	movs	r3, r0
 80020be:	1882      	adds	r2, r0, r2
 80020c0:	4293      	cmp	r3, r2
 80020c2:	d100      	bne.n	80020c6 <memset+0xa>
 80020c4:	4770      	bx	lr
 80020c6:	7019      	strb	r1, [r3, #0]
 80020c8:	3301      	adds	r3, #1
 80020ca:	e7f9      	b.n	80020c0 <memset+0x4>

080020cc <__libc_init_array>:
 80020cc:	b570      	push	{r4, r5, r6, lr}
 80020ce:	2600      	movs	r6, #0
 80020d0:	4c0c      	ldr	r4, [pc, #48]	@ (8002104 <__libc_init_array+0x38>)
 80020d2:	4d0d      	ldr	r5, [pc, #52]	@ (8002108 <__libc_init_array+0x3c>)
 80020d4:	1b64      	subs	r4, r4, r5
 80020d6:	10a4      	asrs	r4, r4, #2
 80020d8:	42a6      	cmp	r6, r4
 80020da:	d109      	bne.n	80020f0 <__libc_init_array+0x24>
 80020dc:	2600      	movs	r6, #0
 80020de:	f000 f819 	bl	8002114 <_init>
 80020e2:	4c0a      	ldr	r4, [pc, #40]	@ (800210c <__libc_init_array+0x40>)
 80020e4:	4d0a      	ldr	r5, [pc, #40]	@ (8002110 <__libc_init_array+0x44>)
 80020e6:	1b64      	subs	r4, r4, r5
 80020e8:	10a4      	asrs	r4, r4, #2
 80020ea:	42a6      	cmp	r6, r4
 80020ec:	d105      	bne.n	80020fa <__libc_init_array+0x2e>
 80020ee:	bd70      	pop	{r4, r5, r6, pc}
 80020f0:	00b3      	lsls	r3, r6, #2
 80020f2:	58eb      	ldr	r3, [r5, r3]
 80020f4:	4798      	blx	r3
 80020f6:	3601      	adds	r6, #1
 80020f8:	e7ee      	b.n	80020d8 <__libc_init_array+0xc>
 80020fa:	00b3      	lsls	r3, r6, #2
 80020fc:	58eb      	ldr	r3, [r5, r3]
 80020fe:	4798      	blx	r3
 8002100:	3601      	adds	r6, #1
 8002102:	e7f2      	b.n	80020ea <__libc_init_array+0x1e>
 8002104:	0800216c 	.word	0x0800216c
 8002108:	0800216c 	.word	0x0800216c
 800210c:	08002170 	.word	0x08002170
 8002110:	0800216c 	.word	0x0800216c

08002114 <_init>:
 8002114:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002116:	46c0      	nop			@ (mov r8, r8)
 8002118:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800211a:	bc08      	pop	{r3}
 800211c:	469e      	mov	lr, r3
 800211e:	4770      	bx	lr

08002120 <_fini>:
 8002120:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002122:	46c0      	nop			@ (mov r8, r8)
 8002124:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002126:	bc08      	pop	{r3}
 8002128:	469e      	mov	lr, r3
 800212a:	4770      	bx	lr
