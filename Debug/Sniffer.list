
Sniffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003aa0  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000088  08003b60  08003b60  00004b60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003be8  08003be8  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003be8  08003be8  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003be8  08003be8  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003be8  08003be8  00004be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003bec  08003bec  00004bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003bf0  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000484  2000000c  08003bfc  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000490  08003bfc  00005490  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f7f  00000000  00000000  00005034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002687  00000000  00000000  00015fb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e50  00000000  00000000  00018640  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b3f  00000000  00000000  00019490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013733  00000000  00000000  00019fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000120ec  00000000  00000000  0002d702  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007aa9f  00000000  00000000  0003f7ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ba28d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003338  00000000  00000000  000ba2d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000bd608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08003b48 	.word	0x08003b48

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08003b48 	.word	0x08003b48

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	@ 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	@ 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			@ (mov r8, r8)

080003f4 <HAL_TIM_PeriodElapsedCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80003f4:	b580      	push	{r7, lr}
 80003f6:	b082      	sub	sp, #8
 80003f8:	af00      	add	r7, sp, #0
 80003fa:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM14) // Verifica se é o TIM2
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681b      	ldr	r3, [r3, #0]
 8000400:	4a1a      	ldr	r2, [pc, #104]	@ (800046c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000402:	4293      	cmp	r3, r2
 8000404:	d125      	bne.n	8000452 <HAL_TIM_PeriodElapsedCallback+0x5e>
    {
        // HAL_GPIO_TogglePin(GPIOA, GPIO_PIN_9);
        //  Chamar funções a cada 1ms
        processPulses();
 8000406:	f000 fbff 	bl	8000c08 <processPulses>

        if (data_ready)
 800040a:	4b19      	ldr	r3, [pc, #100]	@ (8000470 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 800040c:	781b      	ldrb	r3, [r3, #0]
 800040e:	2b00      	cmp	r3, #0
 8000410:	d005      	beq.n	800041e <HAL_TIM_PeriodElapsedCallback+0x2a>
        {
            // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_SET);
            analyze_pulses();
 8000412:	f000 fa15 	bl	8000840 <analyze_pulses>
            data_ready = 0; // Reseta a flag após o uso
 8000416:	4b16      	ldr	r3, [pc, #88]	@ (8000470 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000418:	2200      	movs	r2, #0
 800041a:	701a      	strb	r2, [r3, #0]
 800041c:	e019      	b.n	8000452 <HAL_TIM_PeriodElapsedCallback+0x5e>
        }

        else if (decode_ready)
 800041e:	4b15      	ldr	r3, [pc, #84]	@ (8000474 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	2b00      	cmp	r3, #0
 8000424:	d005      	beq.n	8000432 <HAL_TIM_PeriodElapsedCallback+0x3e>
        {
            convert_duty_to_bits();
 8000426:	f000 fa69 	bl	80008fc <convert_duty_to_bits>
            decode_ready = 0; // Reseta a flag após o uso
 800042a:	4b12      	ldr	r3, [pc, #72]	@ (8000474 <HAL_TIM_PeriodElapsedCallback+0x80>)
 800042c:	2200      	movs	r2, #0
 800042e:	701a      	strb	r2, [r3, #0]
 8000430:	e00f      	b.n	8000452 <HAL_TIM_PeriodElapsedCallback+0x5e>
        }

        else if (payload_ready)
 8000432:	4b11      	ldr	r3, [pc, #68]	@ (8000478 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	2b00      	cmp	r3, #0
 8000438:	d005      	beq.n	8000446 <HAL_TIM_PeriodElapsedCallback+0x52>
        {

            analyze_payload();
 800043a:	f000 faab 	bl	8000994 <analyze_payload>
            payload_ready = 0;
 800043e:	4b0e      	ldr	r3, [pc, #56]	@ (8000478 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000440:	2200      	movs	r2, #0
 8000442:	701a      	strb	r2, [r3, #0]
 8000444:	e005      	b.n	8000452 <HAL_TIM_PeriodElapsedCallback+0x5e>
            // HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9,GPIO_PIN_RESET);
        }
        else if (message_done){
 8000446:	4b0d      	ldr	r3, [pc, #52]	@ (800047c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000448:	781b      	ldrb	r3, [r3, #0]
 800044a:	2b00      	cmp	r3, #0
 800044c:	d001      	beq.n	8000452 <HAL_TIM_PeriodElapsedCallback+0x5e>
        	send_uart_data();
 800044e:	f000 fe07 	bl	8001060 <send_uart_data>
        }
    }

#ifdef DEBUG
    if (htim->Instance == TIM16)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	681b      	ldr	r3, [r3, #0]
 8000456:	4a0a      	ldr	r2, [pc, #40]	@ (8000480 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000458:	4293      	cmp	r3, r2
 800045a:	d102      	bne.n	8000462 <HAL_TIM_PeriodElapsedCallback+0x6e>
    {
    	sample_count = 0;
 800045c:	4b09      	ldr	r3, [pc, #36]	@ (8000484 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800045e:	2200      	movs	r2, #0
 8000460:	601a      	str	r2, [r3, #0]
    }
#endif
}
 8000462:	46c0      	nop			@ (mov r8, r8)
 8000464:	46bd      	mov	sp, r7
 8000466:	b002      	add	sp, #8
 8000468:	bd80      	pop	{r7, pc}
 800046a:	46c0      	nop			@ (mov r8, r8)
 800046c:	40002000 	.word	0x40002000
 8000470:	20000470 	.word	0x20000470
 8000474:	20000237 	.word	0x20000237
 8000478:	20000238 	.word	0x20000238
 800047c:	20000239 	.word	0x20000239
 8000480:	40014400 	.word	0x40014400
 8000484:	20000480 	.word	0x20000480

08000488 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000488:	b580      	push	{r7, lr}
 800048a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800048c:	f000 fe96 	bl	80011bc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000490:	f000 f82a 	bl	80004e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000494:	f000 f988 	bl	80007a8 <MX_GPIO_Init>
  MX_DMA_Init();
 8000498:	f000 f968 	bl	800076c <MX_DMA_Init>
  MX_TIM3_Init();
 800049c:	f000 f872 	bl	8000584 <MX_TIM3_Init>
  MX_TIM14_Init();
 80004a0:	f000 f8c6 	bl	8000630 <MX_TIM14_Init>
  MX_TIM16_Init();
 80004a4:	f000 f8ea 	bl	800067c <MX_TIM16_Init>
  MX_USART1_UART_Init();
 80004a8:	f000 f912 	bl	80006d0 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
    // HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
    HAL_TIM_Base_Start(&htim3);
 80004ac:	4b0a      	ldr	r3, [pc, #40]	@ (80004d8 <main+0x50>)
 80004ae:	0018      	movs	r0, r3
 80004b0:	f002 f85a 	bl	8002568 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start_IT(&htim14);
 80004b4:	4b09      	ldr	r3, [pc, #36]	@ (80004dc <main+0x54>)
 80004b6:	0018      	movs	r0, r3
 80004b8:	f002 f89c 	bl	80025f4 <HAL_TIM_Base_Start_IT>
#ifdef DEBUG
    HAL_TIM_Base_Start_IT(&htim16);
 80004bc:	4b08      	ldr	r3, [pc, #32]	@ (80004e0 <main+0x58>)
 80004be:	0018      	movs	r0, r3
 80004c0:	f002 f898 	bl	80025f4 <HAL_TIM_Base_Start_IT>
#endif
    setTimerPulses(&htim3);
 80004c4:	4b04      	ldr	r3, [pc, #16]	@ (80004d8 <main+0x50>)
 80004c6:	0018      	movs	r0, r3
 80004c8:	f000 fbe6 	bl	8000c98 <setTimerPulses>
    setUart(&huart1);
 80004cc:	4b05      	ldr	r3, [pc, #20]	@ (80004e4 <main+0x5c>)
 80004ce:	0018      	movs	r0, r3
 80004d0:	f000 fe24 	bl	800111c <setUart>



  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    while (1)
 80004d4:	46c0      	nop			@ (mov r8, r8)
 80004d6:	e7fd      	b.n	80004d4 <main+0x4c>
 80004d8:	20000028 	.word	0x20000028
 80004dc:	20000074 	.word	0x20000074
 80004e0:	200000c0 	.word	0x200000c0
 80004e4:	2000010c 	.word	0x2000010c

080004e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80004e8:	b590      	push	{r4, r7, lr}
 80004ea:	b08d      	sub	sp, #52	@ 0x34
 80004ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80004ee:	2414      	movs	r4, #20
 80004f0:	193b      	adds	r3, r7, r4
 80004f2:	0018      	movs	r0, r3
 80004f4:	231c      	movs	r3, #28
 80004f6:	001a      	movs	r2, r3
 80004f8:	2100      	movs	r1, #0
 80004fa:	f003 faf9 	bl	8003af0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004fe:	003b      	movs	r3, r7
 8000500:	0018      	movs	r0, r3
 8000502:	2314      	movs	r3, #20
 8000504:	001a      	movs	r2, r3
 8000506:	2100      	movs	r1, #0
 8000508:	f003 faf2 	bl	8003af0 <memset>

  __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 800050c:	4b1c      	ldr	r3, [pc, #112]	@ (8000580 <SystemClock_Config+0x98>)
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	2207      	movs	r2, #7
 8000512:	4393      	bics	r3, r2
 8000514:	001a      	movs	r2, r3
 8000516:	4b1a      	ldr	r3, [pc, #104]	@ (8000580 <SystemClock_Config+0x98>)
 8000518:	2101      	movs	r1, #1
 800051a:	430a      	orrs	r2, r1
 800051c:	601a      	str	r2, [r3, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800051e:	193b      	adds	r3, r7, r4
 8000520:	2202      	movs	r2, #2
 8000522:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000524:	193b      	adds	r3, r7, r4
 8000526:	2280      	movs	r2, #128	@ 0x80
 8000528:	0052      	lsls	r2, r2, #1
 800052a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800052c:	193b      	adds	r3, r7, r4
 800052e:	2200      	movs	r2, #0
 8000530:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000532:	193b      	adds	r3, r7, r4
 8000534:	2240      	movs	r2, #64	@ 0x40
 8000536:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000538:	193b      	adds	r3, r7, r4
 800053a:	0018      	movs	r0, r3
 800053c:	f001 fb74 	bl	8001c28 <HAL_RCC_OscConfig>
 8000540:	1e03      	subs	r3, r0, #0
 8000542:	d001      	beq.n	8000548 <SystemClock_Config+0x60>
  {
    Error_Handler();
 8000544:	f000 f976 	bl	8000834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000548:	003b      	movs	r3, r7
 800054a:	2207      	movs	r2, #7
 800054c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800054e:	003b      	movs	r3, r7
 8000550:	2200      	movs	r2, #0
 8000552:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000554:	003b      	movs	r3, r7
 8000556:	2200      	movs	r2, #0
 8000558:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800055a:	003b      	movs	r3, r7
 800055c:	2200      	movs	r2, #0
 800055e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000560:	003b      	movs	r3, r7
 8000562:	2200      	movs	r2, #0
 8000564:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000566:	003b      	movs	r3, r7
 8000568:	2101      	movs	r1, #1
 800056a:	0018      	movs	r0, r3
 800056c:	f001 fd40 	bl	8001ff0 <HAL_RCC_ClockConfig>
 8000570:	1e03      	subs	r3, r0, #0
 8000572:	d001      	beq.n	8000578 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000574:	f000 f95e 	bl	8000834 <Error_Handler>
  }
}
 8000578:	46c0      	nop			@ (mov r8, r8)
 800057a:	46bd      	mov	sp, r7
 800057c:	b00d      	add	sp, #52	@ 0x34
 800057e:	bd90      	pop	{r4, r7, pc}
 8000580:	40022000 	.word	0x40022000

08000584 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	b088      	sub	sp, #32
 8000588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800058a:	2310      	movs	r3, #16
 800058c:	18fb      	adds	r3, r7, r3
 800058e:	0018      	movs	r0, r3
 8000590:	2310      	movs	r3, #16
 8000592:	001a      	movs	r2, r3
 8000594:	2100      	movs	r1, #0
 8000596:	f003 faab 	bl	8003af0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800059a:	1d3b      	adds	r3, r7, #4
 800059c:	0018      	movs	r0, r3
 800059e:	230c      	movs	r3, #12
 80005a0:	001a      	movs	r2, r3
 80005a2:	2100      	movs	r1, #0
 80005a4:	f003 faa4 	bl	8003af0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005a8:	4b1e      	ldr	r3, [pc, #120]	@ (8000624 <MX_TIM3_Init+0xa0>)
 80005aa:	4a1f      	ldr	r2, [pc, #124]	@ (8000628 <MX_TIM3_Init+0xa4>)
 80005ac:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 5;
 80005ae:	4b1d      	ldr	r3, [pc, #116]	@ (8000624 <MX_TIM3_Init+0xa0>)
 80005b0:	2205      	movs	r2, #5
 80005b2:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80005b4:	4b1b      	ldr	r3, [pc, #108]	@ (8000624 <MX_TIM3_Init+0xa0>)
 80005b6:	2200      	movs	r2, #0
 80005b8:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80005ba:	4b1a      	ldr	r3, [pc, #104]	@ (8000624 <MX_TIM3_Init+0xa0>)
 80005bc:	4a1b      	ldr	r2, [pc, #108]	@ (800062c <MX_TIM3_Init+0xa8>)
 80005be:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80005c0:	4b18      	ldr	r3, [pc, #96]	@ (8000624 <MX_TIM3_Init+0xa0>)
 80005c2:	2200      	movs	r2, #0
 80005c4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80005c6:	4b17      	ldr	r3, [pc, #92]	@ (8000624 <MX_TIM3_Init+0xa0>)
 80005c8:	2200      	movs	r2, #0
 80005ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80005cc:	4b15      	ldr	r3, [pc, #84]	@ (8000624 <MX_TIM3_Init+0xa0>)
 80005ce:	0018      	movs	r0, r3
 80005d0:	f001 ff72 	bl	80024b8 <HAL_TIM_Base_Init>
 80005d4:	1e03      	subs	r3, r0, #0
 80005d6:	d001      	beq.n	80005dc <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 80005d8:	f000 f92c 	bl	8000834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80005dc:	2110      	movs	r1, #16
 80005de:	187b      	adds	r3, r7, r1
 80005e0:	2280      	movs	r2, #128	@ 0x80
 80005e2:	0152      	lsls	r2, r2, #5
 80005e4:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80005e6:	187a      	adds	r2, r7, r1
 80005e8:	4b0e      	ldr	r3, [pc, #56]	@ (8000624 <MX_TIM3_Init+0xa0>)
 80005ea:	0011      	movs	r1, r2
 80005ec:	0018      	movs	r0, r3
 80005ee:	f002 f957 	bl	80028a0 <HAL_TIM_ConfigClockSource>
 80005f2:	1e03      	subs	r3, r0, #0
 80005f4:	d001      	beq.n	80005fa <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 80005f6:	f000 f91d 	bl	8000834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2200      	movs	r2, #0
 80005fe:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2200      	movs	r2, #0
 8000604:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000606:	1d3a      	adds	r2, r7, #4
 8000608:	4b06      	ldr	r3, [pc, #24]	@ (8000624 <MX_TIM3_Init+0xa0>)
 800060a:	0011      	movs	r1, r2
 800060c:	0018      	movs	r0, r3
 800060e:	f002 fb4b 	bl	8002ca8 <HAL_TIMEx_MasterConfigSynchronization>
 8000612:	1e03      	subs	r3, r0, #0
 8000614:	d001      	beq.n	800061a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000616:	f000 f90d 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800061a:	46c0      	nop			@ (mov r8, r8)
 800061c:	46bd      	mov	sp, r7
 800061e:	b008      	add	sp, #32
 8000620:	bd80      	pop	{r7, pc}
 8000622:	46c0      	nop			@ (mov r8, r8)
 8000624:	20000028 	.word	0x20000028
 8000628:	40000400 	.word	0x40000400
 800062c:	0000ffff 	.word	0x0000ffff

08000630 <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000630:	b580      	push	{r7, lr}
 8000632:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000634:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MX_TIM14_Init+0x40>)
 8000636:	4a0f      	ldr	r2, [pc, #60]	@ (8000674 <MX_TIM14_Init+0x44>)
 8000638:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 47;
 800063a:	4b0d      	ldr	r3, [pc, #52]	@ (8000670 <MX_TIM14_Init+0x40>)
 800063c:	222f      	movs	r2, #47	@ 0x2f
 800063e:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000640:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <MX_TIM14_Init+0x40>)
 8000642:	2200      	movs	r2, #0
 8000644:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 999;
 8000646:	4b0a      	ldr	r3, [pc, #40]	@ (8000670 <MX_TIM14_Init+0x40>)
 8000648:	4a0b      	ldr	r2, [pc, #44]	@ (8000678 <MX_TIM14_Init+0x48>)
 800064a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800064c:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <MX_TIM14_Init+0x40>)
 800064e:	2200      	movs	r2, #0
 8000650:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000652:	4b07      	ldr	r3, [pc, #28]	@ (8000670 <MX_TIM14_Init+0x40>)
 8000654:	2200      	movs	r2, #0
 8000656:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000658:	4b05      	ldr	r3, [pc, #20]	@ (8000670 <MX_TIM14_Init+0x40>)
 800065a:	0018      	movs	r0, r3
 800065c:	f001 ff2c 	bl	80024b8 <HAL_TIM_Base_Init>
 8000660:	1e03      	subs	r3, r0, #0
 8000662:	d001      	beq.n	8000668 <MX_TIM14_Init+0x38>
  {
    Error_Handler();
 8000664:	f000 f8e6 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000668:	46c0      	nop			@ (mov r8, r8)
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}
 800066e:	46c0      	nop			@ (mov r8, r8)
 8000670:	20000074 	.word	0x20000074
 8000674:	40002000 	.word	0x40002000
 8000678:	000003e7 	.word	0x000003e7

0800067c <MX_TIM16_Init>:
  * @brief TIM16 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM16_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM16_Init 0 */

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 8000680:	4b10      	ldr	r3, [pc, #64]	@ (80006c4 <MX_TIM16_Init+0x48>)
 8000682:	4a11      	ldr	r2, [pc, #68]	@ (80006c8 <MX_TIM16_Init+0x4c>)
 8000684:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 47999;
 8000686:	4b0f      	ldr	r3, [pc, #60]	@ (80006c4 <MX_TIM16_Init+0x48>)
 8000688:	4a10      	ldr	r2, [pc, #64]	@ (80006cc <MX_TIM16_Init+0x50>)
 800068a:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800068c:	4b0d      	ldr	r3, [pc, #52]	@ (80006c4 <MX_TIM16_Init+0x48>)
 800068e:	2200      	movs	r2, #0
 8000690:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 1000;
 8000692:	4b0c      	ldr	r3, [pc, #48]	@ (80006c4 <MX_TIM16_Init+0x48>)
 8000694:	22fa      	movs	r2, #250	@ 0xfa
 8000696:	0092      	lsls	r2, r2, #2
 8000698:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800069a:	4b0a      	ldr	r3, [pc, #40]	@ (80006c4 <MX_TIM16_Init+0x48>)
 800069c:	2200      	movs	r2, #0
 800069e:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 80006a0:	4b08      	ldr	r3, [pc, #32]	@ (80006c4 <MX_TIM16_Init+0x48>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80006a6:	4b07      	ldr	r3, [pc, #28]	@ (80006c4 <MX_TIM16_Init+0x48>)
 80006a8:	2200      	movs	r2, #0
 80006aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 80006ac:	4b05      	ldr	r3, [pc, #20]	@ (80006c4 <MX_TIM16_Init+0x48>)
 80006ae:	0018      	movs	r0, r3
 80006b0:	f001 ff02 	bl	80024b8 <HAL_TIM_Base_Init>
 80006b4:	1e03      	subs	r3, r0, #0
 80006b6:	d001      	beq.n	80006bc <MX_TIM16_Init+0x40>
  {
    Error_Handler();
 80006b8:	f000 f8bc 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */

}
 80006bc:	46c0      	nop			@ (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
 80006c2:	46c0      	nop			@ (mov r8, r8)
 80006c4:	200000c0 	.word	0x200000c0
 80006c8:	40014400 	.word	0x40014400
 80006cc:	0000bb7f 	.word	0x0000bb7f

080006d0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80006d4:	4b23      	ldr	r3, [pc, #140]	@ (8000764 <MX_USART1_UART_Init+0x94>)
 80006d6:	4a24      	ldr	r2, [pc, #144]	@ (8000768 <MX_USART1_UART_Init+0x98>)
 80006d8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80006da:	4b22      	ldr	r3, [pc, #136]	@ (8000764 <MX_USART1_UART_Init+0x94>)
 80006dc:	22e1      	movs	r2, #225	@ 0xe1
 80006de:	0252      	lsls	r2, r2, #9
 80006e0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80006e2:	4b20      	ldr	r3, [pc, #128]	@ (8000764 <MX_USART1_UART_Init+0x94>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80006e8:	4b1e      	ldr	r3, [pc, #120]	@ (8000764 <MX_USART1_UART_Init+0x94>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80006ee:	4b1d      	ldr	r3, [pc, #116]	@ (8000764 <MX_USART1_UART_Init+0x94>)
 80006f0:	2200      	movs	r2, #0
 80006f2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80006f4:	4b1b      	ldr	r3, [pc, #108]	@ (8000764 <MX_USART1_UART_Init+0x94>)
 80006f6:	220c      	movs	r2, #12
 80006f8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000764 <MX_USART1_UART_Init+0x94>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000700:	4b18      	ldr	r3, [pc, #96]	@ (8000764 <MX_USART1_UART_Init+0x94>)
 8000702:	2200      	movs	r2, #0
 8000704:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000706:	4b17      	ldr	r3, [pc, #92]	@ (8000764 <MX_USART1_UART_Init+0x94>)
 8000708:	2200      	movs	r2, #0
 800070a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800070c:	4b15      	ldr	r3, [pc, #84]	@ (8000764 <MX_USART1_UART_Init+0x94>)
 800070e:	2200      	movs	r2, #0
 8000710:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000712:	4b14      	ldr	r3, [pc, #80]	@ (8000764 <MX_USART1_UART_Init+0x94>)
 8000714:	2200      	movs	r2, #0
 8000716:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000718:	4b12      	ldr	r3, [pc, #72]	@ (8000764 <MX_USART1_UART_Init+0x94>)
 800071a:	0018      	movs	r0, r3
 800071c:	f002 fb3e 	bl	8002d9c <HAL_UART_Init>
 8000720:	1e03      	subs	r3, r0, #0
 8000722:	d001      	beq.n	8000728 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000724:	f000 f886 	bl	8000834 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000728:	4b0e      	ldr	r3, [pc, #56]	@ (8000764 <MX_USART1_UART_Init+0x94>)
 800072a:	2100      	movs	r1, #0
 800072c:	0018      	movs	r0, r3
 800072e:	f003 f8ff 	bl	8003930 <HAL_UARTEx_SetTxFifoThreshold>
 8000732:	1e03      	subs	r3, r0, #0
 8000734:	d001      	beq.n	800073a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000736:	f000 f87d 	bl	8000834 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800073a:	4b0a      	ldr	r3, [pc, #40]	@ (8000764 <MX_USART1_UART_Init+0x94>)
 800073c:	2100      	movs	r1, #0
 800073e:	0018      	movs	r0, r3
 8000740:	f003 f936 	bl	80039b0 <HAL_UARTEx_SetRxFifoThreshold>
 8000744:	1e03      	subs	r3, r0, #0
 8000746:	d001      	beq.n	800074c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000748:	f000 f874 	bl	8000834 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 800074c:	4b05      	ldr	r3, [pc, #20]	@ (8000764 <MX_USART1_UART_Init+0x94>)
 800074e:	0018      	movs	r0, r3
 8000750:	f003 f8b4 	bl	80038bc <HAL_UARTEx_DisableFifoMode>
 8000754:	1e03      	subs	r3, r0, #0
 8000756:	d001      	beq.n	800075c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000758:	f000 f86c 	bl	8000834 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800075c:	46c0      	nop			@ (mov r8, r8)
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			@ (mov r8, r8)
 8000764:	2000010c 	.word	0x2000010c
 8000768:	40013800 	.word	0x40013800

0800076c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000772:	4b0c      	ldr	r3, [pc, #48]	@ (80007a4 <MX_DMA_Init+0x38>)
 8000774:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000776:	4b0b      	ldr	r3, [pc, #44]	@ (80007a4 <MX_DMA_Init+0x38>)
 8000778:	2101      	movs	r1, #1
 800077a:	430a      	orrs	r2, r1
 800077c:	639a      	str	r2, [r3, #56]	@ 0x38
 800077e:	4b09      	ldr	r3, [pc, #36]	@ (80007a4 <MX_DMA_Init+0x38>)
 8000780:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000782:	2201      	movs	r2, #1
 8000784:	4013      	ands	r3, r2
 8000786:	607b      	str	r3, [r7, #4]
 8000788:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800078a:	2200      	movs	r2, #0
 800078c:	2100      	movs	r1, #0
 800078e:	2009      	movs	r0, #9
 8000790:	f000 fe5a 	bl	8001448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000794:	2009      	movs	r0, #9
 8000796:	f000 fe6c 	bl	8001472 <HAL_NVIC_EnableIRQ>

}
 800079a:	46c0      	nop			@ (mov r8, r8)
 800079c:	46bd      	mov	sp, r7
 800079e:	b002      	add	sp, #8
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	46c0      	nop			@ (mov r8, r8)
 80007a4:	40021000 	.word	0x40021000

080007a8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a8:	b590      	push	{r4, r7, lr}
 80007aa:	b089      	sub	sp, #36	@ 0x24
 80007ac:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ae:	240c      	movs	r4, #12
 80007b0:	193b      	adds	r3, r7, r4
 80007b2:	0018      	movs	r0, r3
 80007b4:	2314      	movs	r3, #20
 80007b6:	001a      	movs	r2, r3
 80007b8:	2100      	movs	r1, #0
 80007ba:	f003 f999 	bl	8003af0 <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007be:	4b1a      	ldr	r3, [pc, #104]	@ (8000828 <MX_GPIO_Init+0x80>)
 80007c0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007c2:	4b19      	ldr	r3, [pc, #100]	@ (8000828 <MX_GPIO_Init+0x80>)
 80007c4:	2104      	movs	r1, #4
 80007c6:	430a      	orrs	r2, r1
 80007c8:	635a      	str	r2, [r3, #52]	@ 0x34
 80007ca:	4b17      	ldr	r3, [pc, #92]	@ (8000828 <MX_GPIO_Init+0x80>)
 80007cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007ce:	2204      	movs	r2, #4
 80007d0:	4013      	ands	r3, r2
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	4b14      	ldr	r3, [pc, #80]	@ (8000828 <MX_GPIO_Init+0x80>)
 80007d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80007da:	4b13      	ldr	r3, [pc, #76]	@ (8000828 <MX_GPIO_Init+0x80>)
 80007dc:	2101      	movs	r1, #1
 80007de:	430a      	orrs	r2, r1
 80007e0:	635a      	str	r2, [r3, #52]	@ 0x34
 80007e2:	4b11      	ldr	r3, [pc, #68]	@ (8000828 <MX_GPIO_Init+0x80>)
 80007e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80007e6:	2201      	movs	r2, #1
 80007e8:	4013      	ands	r3, r2
 80007ea:	607b      	str	r3, [r7, #4]
 80007ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PIR_Pin */
  GPIO_InitStruct.Pin = PIR_Pin;
 80007ee:	193b      	adds	r3, r7, r4
 80007f0:	2280      	movs	r2, #128	@ 0x80
 80007f2:	01d2      	lsls	r2, r2, #7
 80007f4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80007f6:	193b      	adds	r3, r7, r4
 80007f8:	4a0c      	ldr	r2, [pc, #48]	@ (800082c <MX_GPIO_Init+0x84>)
 80007fa:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	193b      	adds	r3, r7, r4
 80007fe:	2200      	movs	r2, #0
 8000800:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 8000802:	193b      	adds	r3, r7, r4
 8000804:	4a0a      	ldr	r2, [pc, #40]	@ (8000830 <MX_GPIO_Init+0x88>)
 8000806:	0019      	movs	r1, r3
 8000808:	0010      	movs	r0, r2
 800080a:	f001 f8a3 	bl	8001954 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	2100      	movs	r1, #0
 8000812:	2007      	movs	r0, #7
 8000814:	f000 fe18 	bl	8001448 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000818:	2007      	movs	r0, #7
 800081a:	f000 fe2a 	bl	8001472 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800081e:	46c0      	nop			@ (mov r8, r8)
 8000820:	46bd      	mov	sp, r7
 8000822:	b009      	add	sp, #36	@ 0x24
 8000824:	bd90      	pop	{r4, r7, pc}
 8000826:	46c0      	nop			@ (mov r8, r8)
 8000828:	40021000 	.word	0x40021000
 800082c:	10310000 	.word	0x10310000
 8000830:	50000800 	.word	0x50000800

08000834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000834:	b580      	push	{r7, lr}
 8000836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000838:	b672      	cpsid	i
}
 800083a:	46c0      	nop			@ (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800083c:	46c0      	nop			@ (mov r8, r8)
 800083e:	e7fd      	b.n	800083c <Error_Handler+0x8>

08000840 <analyze_pulses>:
int16_t valor_PIR = 0;

uint8_t verify_payload(void);

void analyze_pulses(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b086      	sub	sp, #24
 8000844:	af00      	add	r7, sp, #0
    const volatile uint32_t *pulse_widths = get_width_pulses();
 8000846:	f000 fa1f 	bl	8000c88 <get_width_pulses>
 800084a:	0003      	movs	r3, r0
 800084c:	613b      	str	r3, [r7, #16]
    uint32_t highTime, lowTime, totalTime;

    for (uint8_t i = 0, j = 0; i < PULSE_BUFFER_SIZE - 1; i += 2, j++)
 800084e:	2317      	movs	r3, #23
 8000850:	18fb      	adds	r3, r7, r3
 8000852:	2200      	movs	r2, #0
 8000854:	701a      	strb	r2, [r3, #0]
 8000856:	2316      	movs	r3, #22
 8000858:	18fb      	adds	r3, r7, r3
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
 800085e:	e03d      	b.n	80008dc <analyze_pulses+0x9c>
    {
        highTime = pulse_widths[i];
 8000860:	2117      	movs	r1, #23
 8000862:	187b      	adds	r3, r7, r1
 8000864:	781b      	ldrb	r3, [r3, #0]
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	693a      	ldr	r2, [r7, #16]
 800086a:	18d3      	adds	r3, r2, r3
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	60fb      	str	r3, [r7, #12]
        lowTime = pulse_widths[i + 1];
 8000870:	187b      	adds	r3, r7, r1
 8000872:	781b      	ldrb	r3, [r3, #0]
 8000874:	3301      	adds	r3, #1
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	693a      	ldr	r2, [r7, #16]
 800087a:	18d3      	adds	r3, r2, r3
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	60bb      	str	r3, [r7, #8]
        totalTime = highTime + lowTime;
 8000880:	68fa      	ldr	r2, [r7, #12]
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	18d3      	adds	r3, r2, r3
 8000886:	607b      	str	r3, [r7, #4]
             duty_cycles[j] = 0; // Evita divisão por zero
         }*/

        // Outra Estrategia

        if (j == BIT_FINAL)
 8000888:	2316      	movs	r3, #22
 800088a:	18fb      	adds	r3, r7, r3
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	2b13      	cmp	r3, #19
 8000890:	d10c      	bne.n	80008ac <analyze_pulses+0x6c>
        {
            duty_cycles[j] = (highTime <= LAST_BIT_LENGTH) ? 50 : 90;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	2b82      	cmp	r3, #130	@ 0x82
 8000896:	d801      	bhi.n	800089c <analyze_pulses+0x5c>
 8000898:	2132      	movs	r1, #50	@ 0x32
 800089a:	e000      	b.n	800089e <analyze_pulses+0x5e>
 800089c:	215a      	movs	r1, #90	@ 0x5a
 800089e:	2316      	movs	r3, #22
 80008a0:	18fb      	adds	r3, r7, r3
 80008a2:	781a      	ldrb	r2, [r3, #0]
 80008a4:	4b13      	ldr	r3, [pc, #76]	@ (80008f4 <analyze_pulses+0xb4>)
 80008a6:	0052      	lsls	r2, r2, #1
 80008a8:	52d1      	strh	r1, [r2, r3]
 80008aa:	e00b      	b.n	80008c4 <analyze_pulses+0x84>
        }
        else
        {

            duty_cycles[j] = (highTime <= MAX_TIME_LOW) ? 50 : 90;
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	2b60      	cmp	r3, #96	@ 0x60
 80008b0:	d801      	bhi.n	80008b6 <analyze_pulses+0x76>
 80008b2:	2132      	movs	r1, #50	@ 0x32
 80008b4:	e000      	b.n	80008b8 <analyze_pulses+0x78>
 80008b6:	215a      	movs	r1, #90	@ 0x5a
 80008b8:	2316      	movs	r3, #22
 80008ba:	18fb      	adds	r3, r7, r3
 80008bc:	781a      	ldrb	r2, [r3, #0]
 80008be:	4b0d      	ldr	r3, [pc, #52]	@ (80008f4 <analyze_pulses+0xb4>)
 80008c0:	0052      	lsls	r2, r2, #1
 80008c2:	52d1      	strh	r1, [r2, r3]
    for (uint8_t i = 0, j = 0; i < PULSE_BUFFER_SIZE - 1; i += 2, j++)
 80008c4:	2217      	movs	r2, #23
 80008c6:	18bb      	adds	r3, r7, r2
 80008c8:	18ba      	adds	r2, r7, r2
 80008ca:	7812      	ldrb	r2, [r2, #0]
 80008cc:	3202      	adds	r2, #2
 80008ce:	701a      	strb	r2, [r3, #0]
 80008d0:	2116      	movs	r1, #22
 80008d2:	187b      	adds	r3, r7, r1
 80008d4:	781a      	ldrb	r2, [r3, #0]
 80008d6:	187b      	adds	r3, r7, r1
 80008d8:	3201      	adds	r2, #1
 80008da:	701a      	strb	r2, [r3, #0]
 80008dc:	2317      	movs	r3, #23
 80008de:	18fb      	adds	r3, r7, r3
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b30      	cmp	r3, #48	@ 0x30
 80008e4:	d9bc      	bls.n	8000860 <analyze_pulses+0x20>
        }
    }

    decode_ready = 1;
 80008e6:	4b04      	ldr	r3, [pc, #16]	@ (80008f8 <analyze_pulses+0xb8>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	701a      	strb	r2, [r3, #0]
}
 80008ec:	46c0      	nop			@ (mov r8, r8)
 80008ee:	46bd      	mov	sp, r7
 80008f0:	b006      	add	sp, #24
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	200001fc 	.word	0x200001fc
 80008f8:	20000237 	.word	0x20000237

080008fc <convert_duty_to_bits>:
{
    return duty_cycles;
}

void convert_duty_to_bits(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b082      	sub	sp, #8
 8000900:	af00      	add	r7, sp, #0

    for (uint8_t i = 1, j = 0; i <= 19; i++, j++)
 8000902:	1dfb      	adds	r3, r7, #7
 8000904:	2201      	movs	r2, #1
 8000906:	701a      	strb	r2, [r3, #0]
 8000908:	1dbb      	adds	r3, r7, #6
 800090a:	2200      	movs	r2, #0
 800090c:	701a      	strb	r2, [r3, #0]
 800090e:	e018      	b.n	8000942 <convert_duty_to_bits+0x46>
    {
        bit_sequence[j] = (duty_cycles[i] >= DUTY_CYCLE_VALUE_HIGH) ? 1 : 0;
 8000910:	1dfb      	adds	r3, r7, #7
 8000912:	781a      	ldrb	r2, [r3, #0]
 8000914:	4b10      	ldr	r3, [pc, #64]	@ (8000958 <convert_duty_to_bits+0x5c>)
 8000916:	0052      	lsls	r2, r2, #1
 8000918:	5ad3      	ldrh	r3, [r2, r3]
 800091a:	2243      	movs	r2, #67	@ 0x43
 800091c:	429a      	cmp	r2, r3
 800091e:	419b      	sbcs	r3, r3
 8000920:	425b      	negs	r3, r3
 8000922:	b2da      	uxtb	r2, r3
 8000924:	1dbb      	adds	r3, r7, #6
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	0011      	movs	r1, r2
 800092a:	4a0c      	ldr	r2, [pc, #48]	@ (800095c <convert_duty_to_bits+0x60>)
 800092c:	54d1      	strb	r1, [r2, r3]
    for (uint8_t i = 1, j = 0; i <= 19; i++, j++)
 800092e:	1dfb      	adds	r3, r7, #7
 8000930:	781a      	ldrb	r2, [r3, #0]
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	3201      	adds	r2, #1
 8000936:	701a      	strb	r2, [r3, #0]
 8000938:	1dbb      	adds	r3, r7, #6
 800093a:	781a      	ldrb	r2, [r3, #0]
 800093c:	1dbb      	adds	r3, r7, #6
 800093e:	3201      	adds	r2, #1
 8000940:	701a      	strb	r2, [r3, #0]
 8000942:	1dfb      	adds	r3, r7, #7
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	2b13      	cmp	r3, #19
 8000948:	d9e2      	bls.n	8000910 <convert_duty_to_bits+0x14>
    }
    payload_ready = 1;
 800094a:	4b05      	ldr	r3, [pc, #20]	@ (8000960 <convert_duty_to_bits+0x64>)
 800094c:	2201      	movs	r2, #1
 800094e:	701a      	strb	r2, [r3, #0]
}
 8000950:	46c0      	nop			@ (mov r8, r8)
 8000952:	46bd      	mov	sp, r7
 8000954:	b002      	add	sp, #8
 8000956:	bd80      	pop	{r7, pc}
 8000958:	200001fc 	.word	0x200001fc
 800095c:	20000224 	.word	0x20000224
 8000960:	20000238 	.word	0x20000238

08000964 <verify_payload>:
{
    return bit_sequence;
}

uint8_t verify_payload(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

    return (bit_sequence[0] == EXPECTED_BIT_0) && (bit_sequence[1] == EXPECTED_BIT_1) && (bit_sequence[18] == EXPECTED_BIT_18);
 8000968:	4b09      	ldr	r3, [pc, #36]	@ (8000990 <verify_payload+0x2c>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	2b01      	cmp	r3, #1
 800096e:	d109      	bne.n	8000984 <verify_payload+0x20>
 8000970:	4b07      	ldr	r3, [pc, #28]	@ (8000990 <verify_payload+0x2c>)
 8000972:	785b      	ldrb	r3, [r3, #1]
 8000974:	2b00      	cmp	r3, #0
 8000976:	d105      	bne.n	8000984 <verify_payload+0x20>
 8000978:	4b05      	ldr	r3, [pc, #20]	@ (8000990 <verify_payload+0x2c>)
 800097a:	7c9b      	ldrb	r3, [r3, #18]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d101      	bne.n	8000984 <verify_payload+0x20>
 8000980:	2301      	movs	r3, #1
 8000982:	e000      	b.n	8000986 <verify_payload+0x22>
 8000984:	2300      	movs	r3, #0
 8000986:	b2db      	uxtb	r3, r3
}
 8000988:	0018      	movs	r0, r3
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	46c0      	nop			@ (mov r8, r8)
 8000990:	20000224 	.word	0x20000224

08000994 <analyze_payload>:

void analyze_payload(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b082      	sub	sp, #8
 8000998:	af00      	add	r7, sp, #0
    // Verifica os bits de controle (posição 0, 1 e 19)
    if (!verify_payload())
 800099a:	f7ff ffe3 	bl	8000964 <verify_payload>
 800099e:	1e03      	subs	r3, r0, #0
 80009a0:	d109      	bne.n	80009b6 <analyze_payload+0x22>
    {
        erro_payload++;
 80009a2:	4b19      	ldr	r3, [pc, #100]	@ (8000a08 <analyze_payload+0x74>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	5e9b      	ldrsh	r3, [r3, r2]
 80009a8:	b29b      	uxth	r3, r3
 80009aa:	3301      	adds	r3, #1
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	b21a      	sxth	r2, r3
 80009b0:	4b15      	ldr	r3, [pc, #84]	@ (8000a08 <analyze_payload+0x74>)
 80009b2:	801a      	strh	r2, [r3, #0]
        return; // Se o payload estiver incorreto, aborta
 80009b4:	e025      	b.n	8000a02 <analyze_payload+0x6e>
    }

    // Extrai os bits de 2 a 18 e armazena em um uint16_t
    valor_PIR = 0;
 80009b6:	4b15      	ldr	r3, [pc, #84]	@ (8000a0c <analyze_payload+0x78>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 2; i <= 17; i++)
 80009bc:	1dfb      	adds	r3, r7, #7
 80009be:	2202      	movs	r2, #2
 80009c0:	701a      	strb	r2, [r3, #0]
 80009c2:	e017      	b.n	80009f4 <analyze_payload+0x60>
    {
        valor_PIR <<= 1;
 80009c4:	4b11      	ldr	r3, [pc, #68]	@ (8000a0c <analyze_payload+0x78>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	5e9b      	ldrsh	r3, [r3, r2]
 80009ca:	18db      	adds	r3, r3, r3
 80009cc:	b21a      	sxth	r2, r3
 80009ce:	4b0f      	ldr	r3, [pc, #60]	@ (8000a0c <analyze_payload+0x78>)
 80009d0:	801a      	strh	r2, [r3, #0]
        valor_PIR |= bit_sequence[i];
 80009d2:	1dfb      	adds	r3, r7, #7
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	4a0e      	ldr	r2, [pc, #56]	@ (8000a10 <analyze_payload+0x7c>)
 80009d8:	5cd3      	ldrb	r3, [r2, r3]
 80009da:	b21a      	sxth	r2, r3
 80009dc:	4b0b      	ldr	r3, [pc, #44]	@ (8000a0c <analyze_payload+0x78>)
 80009de:	2100      	movs	r1, #0
 80009e0:	5e5b      	ldrsh	r3, [r3, r1]
 80009e2:	4313      	orrs	r3, r2
 80009e4:	b21a      	sxth	r2, r3
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <analyze_payload+0x78>)
 80009e8:	801a      	strh	r2, [r3, #0]
    for (uint8_t i = 2; i <= 17; i++)
 80009ea:	1dfb      	adds	r3, r7, #7
 80009ec:	781a      	ldrb	r2, [r3, #0]
 80009ee:	1dfb      	adds	r3, r7, #7
 80009f0:	3201      	adds	r2, #1
 80009f2:	701a      	strb	r2, [r3, #0]
 80009f4:	1dfb      	adds	r3, r7, #7
 80009f6:	781b      	ldrb	r3, [r3, #0]
 80009f8:	2b11      	cmp	r3, #17
 80009fa:	d9e3      	bls.n	80009c4 <analyze_payload+0x30>
    }

    message_done = 1;
 80009fc:	4b05      	ldr	r3, [pc, #20]	@ (8000a14 <analyze_payload+0x80>)
 80009fe:	2201      	movs	r2, #1
 8000a00:	701a      	strb	r2, [r3, #0]
}
 8000a02:	46bd      	mov	sp, r7
 8000a04:	b002      	add	sp, #8
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	2000023a 	.word	0x2000023a
 8000a0c:	2000023c 	.word	0x2000023c
 8000a10:	20000224 	.word	0x20000224
 8000a14:	20000239 	.word	0x20000239

08000a18 <getErroPIR>:

int16_t getErroPIR(void){
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	af00      	add	r7, sp, #0
    return erro_payload;
 8000a1c:	4b02      	ldr	r3, [pc, #8]	@ (8000a28 <getErroPIR+0x10>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	5e9b      	ldrsh	r3, [r3, r2]
}
 8000a22:	0018      	movs	r0, r3
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	2000023a 	.word	0x2000023a

08000a2c <getPirValue>:
int16_t getPirValue(void){
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
    return valor_PIR;
 8000a30:	4b02      	ldr	r3, [pc, #8]	@ (8000a3c <getPirValue+0x10>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	5e9b      	ldrsh	r3, [r3, r2]
}
 8000a36:	0018      	movs	r0, r3
 8000a38:	46bd      	mov	sp, r7
 8000a3a:	bd80      	pop	{r7, pc}
 8000a3c:	2000023c 	.word	0x2000023c

08000a40 <find_start_pulse_and_realign>:
uint32_t idleTimer;
uint8_t buffer_cleared; // Flag para indicar se o buffer já foi limpo
uint32_t sample_count;

void find_start_pulse_and_realign(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b084      	sub	sp, #16
 8000a44:	af00      	add	r7, sp, #0
    if (data_ready)
 8000a46:	4b68      	ldr	r3, [pc, #416]	@ (8000be8 <find_start_pulse_and_realign+0x1a8>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b00      	cmp	r3, #0
 8000a4c:	d000      	beq.n	8000a50 <find_start_pulse_and_realign+0x10>
 8000a4e:	e0c7      	b.n	8000be0 <find_start_pulse_and_realign+0x1a0>
        return;

    int8_t start_index = -1;
 8000a50:	230f      	movs	r3, #15
 8000a52:	18fb      	adds	r3, r7, r3
 8000a54:	22ff      	movs	r2, #255	@ 0xff
 8000a56:	701a      	strb	r2, [r3, #0]

    // Passo 1: Encontrar o índice do primeiro pulso de 100µs
    for (uint8_t i = 0; i < PULSE_BUFFER_SIZE - 1; i++)
 8000a58:	230e      	movs	r3, #14
 8000a5a:	18fb      	adds	r3, r7, r3
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	701a      	strb	r2, [r3, #0]
 8000a60:	e043      	b.n	8000aea <find_start_pulse_and_realign+0xaa>
    {
        uint32_t width = (pulse_buffer[i + 1] >= pulse_buffer[i])
 8000a62:	200e      	movs	r0, #14
 8000a64:	183b      	adds	r3, r7, r0
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	1c5a      	adds	r2, r3, #1
 8000a6a:	4b60      	ldr	r3, [pc, #384]	@ (8000bec <find_start_pulse_and_realign+0x1ac>)
 8000a6c:	0092      	lsls	r2, r2, #2
 8000a6e:	58d2      	ldr	r2, [r2, r3]
 8000a70:	183b      	adds	r3, r7, r0
 8000a72:	7819      	ldrb	r1, [r3, #0]
 8000a74:	4b5d      	ldr	r3, [pc, #372]	@ (8000bec <find_start_pulse_and_realign+0x1ac>)
 8000a76:	0089      	lsls	r1, r1, #2
 8000a78:	58cb      	ldr	r3, [r1, r3]
                             ? (pulse_buffer[i + 1] - pulse_buffer[i])
                             : ((0xFFFF - pulse_buffer[i]) + pulse_buffer[i + 1]);
 8000a7a:	429a      	cmp	r2, r3
 8000a7c:	d30d      	bcc.n	8000a9a <find_start_pulse_and_realign+0x5a>
                             ? (pulse_buffer[i + 1] - pulse_buffer[i])
 8000a7e:	0001      	movs	r1, r0
 8000a80:	187b      	adds	r3, r7, r1
 8000a82:	781b      	ldrb	r3, [r3, #0]
 8000a84:	1c5a      	adds	r2, r3, #1
 8000a86:	4b59      	ldr	r3, [pc, #356]	@ (8000bec <find_start_pulse_and_realign+0x1ac>)
 8000a88:	0092      	lsls	r2, r2, #2
 8000a8a:	58d2      	ldr	r2, [r2, r3]
 8000a8c:	187b      	adds	r3, r7, r1
 8000a8e:	7819      	ldrb	r1, [r3, #0]
 8000a90:	4b56      	ldr	r3, [pc, #344]	@ (8000bec <find_start_pulse_and_realign+0x1ac>)
 8000a92:	0089      	lsls	r1, r1, #2
 8000a94:	58cb      	ldr	r3, [r1, r3]
                             : ((0xFFFF - pulse_buffer[i]) + pulse_buffer[i + 1]);
 8000a96:	1ad3      	subs	r3, r2, r3
 8000a98:	e00f      	b.n	8000aba <find_start_pulse_and_realign+0x7a>
 8000a9a:	210e      	movs	r1, #14
 8000a9c:	187b      	adds	r3, r7, r1
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	1c5a      	adds	r2, r3, #1
 8000aa2:	4b52      	ldr	r3, [pc, #328]	@ (8000bec <find_start_pulse_and_realign+0x1ac>)
 8000aa4:	0092      	lsls	r2, r2, #2
 8000aa6:	58d2      	ldr	r2, [r2, r3]
 8000aa8:	187b      	adds	r3, r7, r1
 8000aaa:	7819      	ldrb	r1, [r3, #0]
 8000aac:	4b4f      	ldr	r3, [pc, #316]	@ (8000bec <find_start_pulse_and_realign+0x1ac>)
 8000aae:	0089      	lsls	r1, r1, #2
 8000ab0:	58cb      	ldr	r3, [r1, r3]
 8000ab2:	1ad3      	subs	r3, r2, r3
 8000ab4:	4a4e      	ldr	r2, [pc, #312]	@ (8000bf0 <find_start_pulse_and_realign+0x1b0>)
 8000ab6:	4694      	mov	ip, r2
 8000ab8:	4463      	add	r3, ip
        uint32_t width = (pulse_buffer[i + 1] >= pulse_buffer[i])
 8000aba:	603b      	str	r3, [r7, #0]

        if (width >= (START_PULSE_WIDTH - PULSE_TOLERANCE) &&
 8000abc:	683a      	ldr	r2, [r7, #0]
 8000abe:	2396      	movs	r3, #150	@ 0x96
 8000ac0:	009b      	lsls	r3, r3, #2
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d30b      	bcc.n	8000ade <find_start_pulse_and_realign+0x9e>
 8000ac6:	683a      	ldr	r2, [r7, #0]
 8000ac8:	23c8      	movs	r3, #200	@ 0xc8
 8000aca:	009b      	lsls	r3, r3, #2
 8000acc:	429a      	cmp	r2, r3
 8000ace:	d806      	bhi.n	8000ade <find_start_pulse_and_realign+0x9e>
            width <= (START_PULSE_WIDTH + PULSE_TOLERANCE))
        {
            start_index = i;
 8000ad0:	230f      	movs	r3, #15
 8000ad2:	18fb      	adds	r3, r7, r3
 8000ad4:	220e      	movs	r2, #14
 8000ad6:	18ba      	adds	r2, r7, r2
 8000ad8:	7812      	ldrb	r2, [r2, #0]
 8000ada:	701a      	strb	r2, [r3, #0]
            break;
 8000adc:	e00a      	b.n	8000af4 <find_start_pulse_and_realign+0xb4>
    for (uint8_t i = 0; i < PULSE_BUFFER_SIZE - 1; i++)
 8000ade:	210e      	movs	r1, #14
 8000ae0:	187b      	adds	r3, r7, r1
 8000ae2:	781a      	ldrb	r2, [r3, #0]
 8000ae4:	187b      	adds	r3, r7, r1
 8000ae6:	3201      	adds	r2, #1
 8000ae8:	701a      	strb	r2, [r3, #0]
 8000aea:	230e      	movs	r3, #14
 8000aec:	18fb      	adds	r3, r7, r3
 8000aee:	781b      	ldrb	r3, [r3, #0]
 8000af0:	2b30      	cmp	r3, #48	@ 0x30
 8000af2:	d9b6      	bls.n	8000a62 <find_start_pulse_and_realign+0x22>
        }
    }

#ifdef DEBUG
    for (int k = 0; k < PULSE_BUFFER_SIZE; k++)
 8000af4:	2300      	movs	r3, #0
 8000af6:	60bb      	str	r3, [r7, #8]
 8000af8:	e00a      	b.n	8000b10 <find_start_pulse_and_realign+0xd0>
    {
    	pulse_buffer_debug[k] = pulse_buffer[k];  // Copia elemento por elemento
 8000afa:	4b3c      	ldr	r3, [pc, #240]	@ (8000bec <find_start_pulse_and_realign+0x1ac>)
 8000afc:	68ba      	ldr	r2, [r7, #8]
 8000afe:	0092      	lsls	r2, r2, #2
 8000b00:	58d1      	ldr	r1, [r2, r3]
 8000b02:	4b3c      	ldr	r3, [pc, #240]	@ (8000bf4 <find_start_pulse_and_realign+0x1b4>)
 8000b04:	68ba      	ldr	r2, [r7, #8]
 8000b06:	0092      	lsls	r2, r2, #2
 8000b08:	50d1      	str	r1, [r2, r3]
    for (int k = 0; k < PULSE_BUFFER_SIZE; k++)
 8000b0a:	68bb      	ldr	r3, [r7, #8]
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	60bb      	str	r3, [r7, #8]
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	2b31      	cmp	r3, #49	@ 0x31
 8000b14:	ddf1      	ble.n	8000afa <find_start_pulse_and_realign+0xba>
    }
#endif
    // Passo 2: Se encontrou, recalcular os pulse_widths a partir deste ponto
    if (start_index != (-1) && (start_index + 40) < PULSE_BUFFER_SIZE)
 8000b16:	210f      	movs	r1, #15
 8000b18:	187b      	adds	r3, r7, r1
 8000b1a:	781b      	ldrb	r3, [r3, #0]
 8000b1c:	b25b      	sxtb	r3, r3
 8000b1e:	3301      	adds	r3, #1
 8000b20:	d054      	beq.n	8000bcc <find_start_pulse_and_realign+0x18c>
 8000b22:	187b      	adds	r3, r7, r1
 8000b24:	781b      	ldrb	r3, [r3, #0]
 8000b26:	b25b      	sxtb	r3, r3
 8000b28:	2b09      	cmp	r3, #9
 8000b2a:	dc4f      	bgt.n	8000bcc <find_start_pulse_and_realign+0x18c>
    {
        for (uint8_t j = 0, i = start_index; j < 40; i++, j++)
 8000b2c:	1dfb      	adds	r3, r7, #7
 8000b2e:	2200      	movs	r2, #0
 8000b30:	701a      	strb	r2, [r3, #0]
 8000b32:	1dbb      	adds	r3, r7, #6
 8000b34:	187a      	adds	r2, r7, r1
 8000b36:	7812      	ldrb	r2, [r2, #0]
 8000b38:	701a      	strb	r2, [r3, #0]
 8000b3a:	e037      	b.n	8000bac <find_start_pulse_and_realign+0x16c>
        {

            pulse_width[j] = (pulse_buffer[i + 1] >= pulse_buffer[i])
 8000b3c:	1dbb      	adds	r3, r7, #6
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	1c5a      	adds	r2, r3, #1
 8000b42:	4b2a      	ldr	r3, [pc, #168]	@ (8000bec <find_start_pulse_and_realign+0x1ac>)
 8000b44:	0092      	lsls	r2, r2, #2
 8000b46:	58d2      	ldr	r2, [r2, r3]
 8000b48:	1dbb      	adds	r3, r7, #6
 8000b4a:	7819      	ldrb	r1, [r3, #0]
 8000b4c:	4b27      	ldr	r3, [pc, #156]	@ (8000bec <find_start_pulse_and_realign+0x1ac>)
 8000b4e:	0089      	lsls	r1, r1, #2
 8000b50:	58cb      	ldr	r3, [r1, r3]
                                 ? (pulse_buffer[i + 1] - pulse_buffer[i])
                                 : ((0xFFFF - pulse_buffer[i]) + pulse_buffer[i + 1]);
 8000b52:	429a      	cmp	r2, r3
 8000b54:	d30c      	bcc.n	8000b70 <find_start_pulse_and_realign+0x130>
                                 ? (pulse_buffer[i + 1] - pulse_buffer[i])
 8000b56:	1dbb      	adds	r3, r7, #6
 8000b58:	781b      	ldrb	r3, [r3, #0]
 8000b5a:	1c5a      	adds	r2, r3, #1
 8000b5c:	4b23      	ldr	r3, [pc, #140]	@ (8000bec <find_start_pulse_and_realign+0x1ac>)
 8000b5e:	0092      	lsls	r2, r2, #2
 8000b60:	58d2      	ldr	r2, [r2, r3]
 8000b62:	1dbb      	adds	r3, r7, #6
 8000b64:	7819      	ldrb	r1, [r3, #0]
 8000b66:	4b21      	ldr	r3, [pc, #132]	@ (8000bec <find_start_pulse_and_realign+0x1ac>)
 8000b68:	0089      	lsls	r1, r1, #2
 8000b6a:	58cb      	ldr	r3, [r1, r3]
                                 : ((0xFFFF - pulse_buffer[i]) + pulse_buffer[i + 1]);
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	e00e      	b.n	8000b8e <find_start_pulse_and_realign+0x14e>
 8000b70:	1dbb      	adds	r3, r7, #6
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	1c5a      	adds	r2, r3, #1
 8000b76:	4b1d      	ldr	r3, [pc, #116]	@ (8000bec <find_start_pulse_and_realign+0x1ac>)
 8000b78:	0092      	lsls	r2, r2, #2
 8000b7a:	58d2      	ldr	r2, [r2, r3]
 8000b7c:	1dbb      	adds	r3, r7, #6
 8000b7e:	7819      	ldrb	r1, [r3, #0]
 8000b80:	4b1a      	ldr	r3, [pc, #104]	@ (8000bec <find_start_pulse_and_realign+0x1ac>)
 8000b82:	0089      	lsls	r1, r1, #2
 8000b84:	58cb      	ldr	r3, [r1, r3]
 8000b86:	1ad3      	subs	r3, r2, r3
 8000b88:	4a19      	ldr	r2, [pc, #100]	@ (8000bf0 <find_start_pulse_and_realign+0x1b0>)
 8000b8a:	4694      	mov	ip, r2
 8000b8c:	4463      	add	r3, ip
            pulse_width[j] = (pulse_buffer[i + 1] >= pulse_buffer[i])
 8000b8e:	1dfa      	adds	r2, r7, #7
 8000b90:	7811      	ldrb	r1, [r2, #0]
 8000b92:	4a19      	ldr	r2, [pc, #100]	@ (8000bf8 <find_start_pulse_and_realign+0x1b8>)
 8000b94:	0089      	lsls	r1, r1, #2
 8000b96:	508b      	str	r3, [r1, r2]
        for (uint8_t j = 0, i = start_index; j < 40; i++, j++)
 8000b98:	1dbb      	adds	r3, r7, #6
 8000b9a:	781a      	ldrb	r2, [r3, #0]
 8000b9c:	1dbb      	adds	r3, r7, #6
 8000b9e:	3201      	adds	r2, #1
 8000ba0:	701a      	strb	r2, [r3, #0]
 8000ba2:	1dfb      	adds	r3, r7, #7
 8000ba4:	781a      	ldrb	r2, [r3, #0]
 8000ba6:	1dfb      	adds	r3, r7, #7
 8000ba8:	3201      	adds	r2, #1
 8000baa:	701a      	strb	r2, [r3, #0]
 8000bac:	1dfb      	adds	r3, r7, #7
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b27      	cmp	r3, #39	@ 0x27
 8000bb2:	d9c3      	bls.n	8000b3c <find_start_pulse_and_realign+0xfc>
        }

        data_ready = 1; // Marca os dados como prontos
 8000bb4:	4b0c      	ldr	r3, [pc, #48]	@ (8000be8 <find_start_pulse_and_realign+0x1a8>)
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	701a      	strb	r2, [r3, #0]
        pulse_index = 0;
 8000bba:	4b10      	ldr	r3, [pc, #64]	@ (8000bfc <find_start_pulse_and_realign+0x1bc>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	801a      	strh	r2, [r3, #0]
        sample_count++;
 8000bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8000c00 <find_start_pulse_and_realign+0x1c0>)
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	1c5a      	adds	r2, r3, #1
 8000bc6:	4b0e      	ldr	r3, [pc, #56]	@ (8000c00 <find_start_pulse_and_realign+0x1c0>)
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	e00a      	b.n	8000be2 <find_start_pulse_and_realign+0x1a2>
    }
    else
    {
        // Se não encontrou um pulso válido, reseta buffer para evitar dados errados
        pulse_index = 0;
 8000bcc:	4b0b      	ldr	r3, [pc, #44]	@ (8000bfc <find_start_pulse_and_realign+0x1bc>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	801a      	strh	r2, [r3, #0]
        idleTimer = 0;
 8000bd2:	4b0c      	ldr	r3, [pc, #48]	@ (8000c04 <find_start_pulse_and_realign+0x1c4>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	601a      	str	r2, [r3, #0]
        data_ready = 0;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	@ (8000be8 <find_start_pulse_and_realign+0x1a8>)
 8000bda:	2200      	movs	r2, #0
 8000bdc:	701a      	strb	r2, [r3, #0]
 8000bde:	e000      	b.n	8000be2 <find_start_pulse_and_realign+0x1a2>
        return;
 8000be0:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000be2:	46bd      	mov	sp, r7
 8000be4:	b004      	add	sp, #16
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000470 	.word	0x20000470
 8000bec:	20000240 	.word	0x20000240
 8000bf0:	0000ffff 	.word	0x0000ffff
 8000bf4:	20000308 	.word	0x20000308
 8000bf8:	200003d0 	.word	0x200003d0
 8000bfc:	20000472 	.word	0x20000472
 8000c00:	20000480 	.word	0x20000480
 8000c04:	20000478 	.word	0x20000478

08000c08 <processPulses>:

void processPulses()
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
    //    if (data_ready)
    //        return;

    if ((++idleTimer) > 1) // Garante que pelo menos passou 2 ms da ultima leitura de borda e entao habilita para a leitura
 8000c0e:	4b1a      	ldr	r3, [pc, #104]	@ (8000c78 <processPulses+0x70>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	4b18      	ldr	r3, [pc, #96]	@ (8000c78 <processPulses+0x70>)
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	4b17      	ldr	r3, [pc, #92]	@ (8000c78 <processPulses+0x70>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	2b01      	cmp	r3, #1
 8000c1e:	d926      	bls.n	8000c6e <processPulses+0x66>
    {
        if (pulse_index >= 39) // Certifica que temos pelo menos 40 pulsos, comeca no zero
 8000c20:	4b16      	ldr	r3, [pc, #88]	@ (8000c7c <processPulses+0x74>)
 8000c22:	881b      	ldrh	r3, [r3, #0]
 8000c24:	2b26      	cmp	r3, #38	@ 0x26
 8000c26:	d902      	bls.n	8000c2e <processPulses+0x26>
        {
            find_start_pulse_and_realign();
 8000c28:	f7ff ff0a 	bl	8000a40 <find_start_pulse_and_realign>
                pulse_buffer[i] = 0;
        }
        // pulse_index = 0; // Reinicia o índice para a próxima captura
        // idleTimer = 0;
    }
}
 8000c2c:	e01f      	b.n	8000c6e <processPulses+0x66>
        else if (!buffer_cleared) // Só limpa se ainda não foi limpo
 8000c2e:	4b14      	ldr	r3, [pc, #80]	@ (8000c80 <processPulses+0x78>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d11b      	bne.n	8000c6e <processPulses+0x66>
            pulse_index = 0;
 8000c36:	4b11      	ldr	r3, [pc, #68]	@ (8000c7c <processPulses+0x74>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	801a      	strh	r2, [r3, #0]
            idleTimer = 0;
 8000c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8000c78 <processPulses+0x70>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	601a      	str	r2, [r3, #0]
            buffer_cleared = 1; // Marca que o buffer foi limpo
 8000c42:	4b0f      	ldr	r3, [pc, #60]	@ (8000c80 <processPulses+0x78>)
 8000c44:	2201      	movs	r2, #1
 8000c46:	701a      	strb	r2, [r3, #0]
            for (uint8_t i = 0; i < PULSE_BUFFER_SIZE; i++)
 8000c48:	1dfb      	adds	r3, r7, #7
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	e00a      	b.n	8000c66 <processPulses+0x5e>
                pulse_buffer[i] = 0;
 8000c50:	1dfb      	adds	r3, r7, #7
 8000c52:	781a      	ldrb	r2, [r3, #0]
 8000c54:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <processPulses+0x7c>)
 8000c56:	0092      	lsls	r2, r2, #2
 8000c58:	2100      	movs	r1, #0
 8000c5a:	50d1      	str	r1, [r2, r3]
            for (uint8_t i = 0; i < PULSE_BUFFER_SIZE; i++)
 8000c5c:	1dfb      	adds	r3, r7, #7
 8000c5e:	781a      	ldrb	r2, [r3, #0]
 8000c60:	1dfb      	adds	r3, r7, #7
 8000c62:	3201      	adds	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	1dfb      	adds	r3, r7, #7
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b31      	cmp	r3, #49	@ 0x31
 8000c6c:	d9f0      	bls.n	8000c50 <processPulses+0x48>
}
 8000c6e:	46c0      	nop			@ (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	b002      	add	sp, #8
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	46c0      	nop			@ (mov r8, r8)
 8000c78:	20000478 	.word	0x20000478
 8000c7c:	20000472 	.word	0x20000472
 8000c80:	2000047c 	.word	0x2000047c
 8000c84:	20000240 	.word	0x20000240

08000c88 <get_width_pulses>:
    //         GPIOA->ODR &= ~GPIO_PIN_9;
    //     }
}

const volatile uint32_t *get_width_pulses(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
    return pulse_width;
 8000c8c:	4b01      	ldr	r3, [pc, #4]	@ (8000c94 <get_width_pulses+0xc>)
}
 8000c8e:	0018      	movs	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200003d0 	.word	0x200003d0

08000c98 <setTimerPulses>:

void setTimerPulses(TIM_HandleTypeDef *htimChosed)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
    htim = htimChosed;
 8000ca0:	4b03      	ldr	r3, [pc, #12]	@ (8000cb0 <setTimerPulses+0x18>)
 8000ca2:	687a      	ldr	r2, [r7, #4]
 8000ca4:	601a      	str	r2, [r3, #0]
}
 8000ca6:	46c0      	nop			@ (mov r8, r8)
 8000ca8:	46bd      	mov	sp, r7
 8000caa:	b002      	add	sp, #8
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	46c0      	nop			@ (mov r8, r8)
 8000cb0:	20000474 	.word	0x20000474

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <HAL_MspInit+0x48>)
 8000cbc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000cbe:	4b0f      	ldr	r3, [pc, #60]	@ (8000cfc <HAL_MspInit+0x48>)
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	641a      	str	r2, [r3, #64]	@ 0x40
 8000cc6:	4b0d      	ldr	r3, [pc, #52]	@ (8000cfc <HAL_MspInit+0x48>)
 8000cc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4013      	ands	r3, r2
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	4b0a      	ldr	r3, [pc, #40]	@ (8000cfc <HAL_MspInit+0x48>)
 8000cd4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000cd6:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <HAL_MspInit+0x48>)
 8000cd8:	2180      	movs	r1, #128	@ 0x80
 8000cda:	0549      	lsls	r1, r1, #21
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000ce0:	4b06      	ldr	r3, [pc, #24]	@ (8000cfc <HAL_MspInit+0x48>)
 8000ce2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000ce4:	2380      	movs	r3, #128	@ 0x80
 8000ce6:	055b      	lsls	r3, r3, #21
 8000ce8:	4013      	ands	r3, r2
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 8000cee:	2008      	movs	r0, #8
 8000cf0:	f000 fae2 	bl	80012b8 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf4:	46c0      	nop			@ (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b002      	add	sp, #8
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	40021000 	.word	0x40021000

08000d00 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b086      	sub	sp, #24
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	4a25      	ldr	r2, [pc, #148]	@ (8000da4 <HAL_TIM_Base_MspInit+0xa4>)
 8000d0e:	4293      	cmp	r3, r2
 8000d10:	d10c      	bne.n	8000d2c <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000d12:	4b25      	ldr	r3, [pc, #148]	@ (8000da8 <HAL_TIM_Base_MspInit+0xa8>)
 8000d14:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d16:	4b24      	ldr	r3, [pc, #144]	@ (8000da8 <HAL_TIM_Base_MspInit+0xa8>)
 8000d18:	2102      	movs	r1, #2
 8000d1a:	430a      	orrs	r2, r1
 8000d1c:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d1e:	4b22      	ldr	r3, [pc, #136]	@ (8000da8 <HAL_TIM_Base_MspInit+0xa8>)
 8000d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d22:	2202      	movs	r2, #2
 8000d24:	4013      	ands	r3, r2
 8000d26:	617b      	str	r3, [r7, #20]
 8000d28:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM16_MspInit 1 */

    /* USER CODE END TIM16_MspInit 1 */
  }

}
 8000d2a:	e036      	b.n	8000d9a <HAL_TIM_Base_MspInit+0x9a>
  else if(htim_base->Instance==TIM14)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	681b      	ldr	r3, [r3, #0]
 8000d30:	4a1e      	ldr	r2, [pc, #120]	@ (8000dac <HAL_TIM_Base_MspInit+0xac>)
 8000d32:	4293      	cmp	r3, r2
 8000d34:	d116      	bne.n	8000d64 <HAL_TIM_Base_MspInit+0x64>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000d36:	4b1c      	ldr	r3, [pc, #112]	@ (8000da8 <HAL_TIM_Base_MspInit+0xa8>)
 8000d38:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d3a:	4b1b      	ldr	r3, [pc, #108]	@ (8000da8 <HAL_TIM_Base_MspInit+0xa8>)
 8000d3c:	2180      	movs	r1, #128	@ 0x80
 8000d3e:	0209      	lsls	r1, r1, #8
 8000d40:	430a      	orrs	r2, r1
 8000d42:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d44:	4b18      	ldr	r3, [pc, #96]	@ (8000da8 <HAL_TIM_Base_MspInit+0xa8>)
 8000d46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d48:	2380      	movs	r3, #128	@ 0x80
 8000d4a:	021b      	lsls	r3, r3, #8
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	613b      	str	r3, [r7, #16]
 8000d50:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM14_IRQn, 3, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2103      	movs	r1, #3
 8000d56:	2013      	movs	r0, #19
 8000d58:	f000 fb76 	bl	8001448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000d5c:	2013      	movs	r0, #19
 8000d5e:	f000 fb88 	bl	8001472 <HAL_NVIC_EnableIRQ>
}
 8000d62:	e01a      	b.n	8000d9a <HAL_TIM_Base_MspInit+0x9a>
  else if(htim_base->Instance==TIM16)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a11      	ldr	r2, [pc, #68]	@ (8000db0 <HAL_TIM_Base_MspInit+0xb0>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d115      	bne.n	8000d9a <HAL_TIM_Base_MspInit+0x9a>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8000d6e:	4b0e      	ldr	r3, [pc, #56]	@ (8000da8 <HAL_TIM_Base_MspInit+0xa8>)
 8000d70:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d72:	4b0d      	ldr	r3, [pc, #52]	@ (8000da8 <HAL_TIM_Base_MspInit+0xa8>)
 8000d74:	2180      	movs	r1, #128	@ 0x80
 8000d76:	0289      	lsls	r1, r1, #10
 8000d78:	430a      	orrs	r2, r1
 8000d7a:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d7c:	4b0a      	ldr	r3, [pc, #40]	@ (8000da8 <HAL_TIM_Base_MspInit+0xa8>)
 8000d7e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d80:	2380      	movs	r3, #128	@ 0x80
 8000d82:	029b      	lsls	r3, r3, #10
 8000d84:	4013      	ands	r3, r2
 8000d86:	60fb      	str	r3, [r7, #12]
 8000d88:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM16_IRQn, 0, 0);
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	2015      	movs	r0, #21
 8000d90:	f000 fb5a 	bl	8001448 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM16_IRQn);
 8000d94:	2015      	movs	r0, #21
 8000d96:	f000 fb6c 	bl	8001472 <HAL_NVIC_EnableIRQ>
}
 8000d9a:	46c0      	nop			@ (mov r8, r8)
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	b006      	add	sp, #24
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	46c0      	nop			@ (mov r8, r8)
 8000da4:	40000400 	.word	0x40000400
 8000da8:	40021000 	.word	0x40021000
 8000dac:	40002000 	.word	0x40002000
 8000db0:	40014400 	.word	0x40014400

08000db4 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000db4:	b590      	push	{r4, r7, lr}
 8000db6:	b091      	sub	sp, #68	@ 0x44
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dbc:	232c      	movs	r3, #44	@ 0x2c
 8000dbe:	18fb      	adds	r3, r7, r3
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	2314      	movs	r3, #20
 8000dc4:	001a      	movs	r2, r3
 8000dc6:	2100      	movs	r1, #0
 8000dc8:	f002 fe92 	bl	8003af0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000dcc:	2410      	movs	r4, #16
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	0018      	movs	r0, r3
 8000dd2:	231c      	movs	r3, #28
 8000dd4:	001a      	movs	r2, r3
 8000dd6:	2100      	movs	r1, #0
 8000dd8:	f002 fe8a 	bl	8003af0 <memset>
  if(huart->Instance==USART1)
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	4a45      	ldr	r2, [pc, #276]	@ (8000ef8 <HAL_UART_MspInit+0x144>)
 8000de2:	4293      	cmp	r3, r2
 8000de4:	d000      	beq.n	8000de8 <HAL_UART_MspInit+0x34>
 8000de6:	e083      	b.n	8000ef0 <HAL_UART_MspInit+0x13c>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000de8:	193b      	adds	r3, r7, r4
 8000dea:	2201      	movs	r2, #1
 8000dec:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000dee:	193b      	adds	r3, r7, r4
 8000df0:	2200      	movs	r2, #0
 8000df2:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000df4:	193b      	adds	r3, r7, r4
 8000df6:	0018      	movs	r0, r3
 8000df8:	f001 fa72 	bl	80022e0 <HAL_RCCEx_PeriphCLKConfig>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d001      	beq.n	8000e04 <HAL_UART_MspInit+0x50>
    {
      Error_Handler();
 8000e00:	f7ff fd18 	bl	8000834 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000e04:	4b3d      	ldr	r3, [pc, #244]	@ (8000efc <HAL_UART_MspInit+0x148>)
 8000e06:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e08:	4b3c      	ldr	r3, [pc, #240]	@ (8000efc <HAL_UART_MspInit+0x148>)
 8000e0a:	2180      	movs	r1, #128	@ 0x80
 8000e0c:	01c9      	lsls	r1, r1, #7
 8000e0e:	430a      	orrs	r2, r1
 8000e10:	641a      	str	r2, [r3, #64]	@ 0x40
 8000e12:	4b3a      	ldr	r3, [pc, #232]	@ (8000efc <HAL_UART_MspInit+0x148>)
 8000e14:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e16:	2380      	movs	r3, #128	@ 0x80
 8000e18:	01db      	lsls	r3, r3, #7
 8000e1a:	4013      	ands	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
 8000e1e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e20:	4b36      	ldr	r3, [pc, #216]	@ (8000efc <HAL_UART_MspInit+0x148>)
 8000e22:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000e24:	4b35      	ldr	r3, [pc, #212]	@ (8000efc <HAL_UART_MspInit+0x148>)
 8000e26:	2101      	movs	r1, #1
 8000e28:	430a      	orrs	r2, r1
 8000e2a:	635a      	str	r2, [r3, #52]	@ 0x34
 8000e2c:	4b33      	ldr	r3, [pc, #204]	@ (8000efc <HAL_UART_MspInit+0x148>)
 8000e2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000e30:	2201      	movs	r2, #1
 8000e32:	4013      	ands	r3, r2
 8000e34:	60bb      	str	r3, [r7, #8]
 8000e36:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA1     ------> USART1_RX
    PA9 [PA11]     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000e38:	242c      	movs	r4, #44	@ 0x2c
 8000e3a:	193b      	adds	r3, r7, r4
 8000e3c:	2202      	movs	r2, #2
 8000e3e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e40:	193b      	adds	r3, r7, r4
 8000e42:	2202      	movs	r2, #2
 8000e44:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	193b      	adds	r3, r7, r4
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4c:	193b      	adds	r3, r7, r4
 8000e4e:	2200      	movs	r2, #0
 8000e50:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 8000e52:	193b      	adds	r3, r7, r4
 8000e54:	2204      	movs	r2, #4
 8000e56:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e58:	193a      	adds	r2, r7, r4
 8000e5a:	23a0      	movs	r3, #160	@ 0xa0
 8000e5c:	05db      	lsls	r3, r3, #23
 8000e5e:	0011      	movs	r1, r2
 8000e60:	0018      	movs	r0, r3
 8000e62:	f000 fd77 	bl	8001954 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e66:	0021      	movs	r1, r4
 8000e68:	187b      	adds	r3, r7, r1
 8000e6a:	2280      	movs	r2, #128	@ 0x80
 8000e6c:	0092      	lsls	r2, r2, #2
 8000e6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e70:	187b      	adds	r3, r7, r1
 8000e72:	2202      	movs	r2, #2
 8000e74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e76:	187b      	adds	r3, r7, r1
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e7c:	187b      	adds	r3, r7, r1
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000e82:	187b      	adds	r3, r7, r1
 8000e84:	2201      	movs	r2, #1
 8000e86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e88:	187a      	adds	r2, r7, r1
 8000e8a:	23a0      	movs	r3, #160	@ 0xa0
 8000e8c:	05db      	lsls	r3, r3, #23
 8000e8e:	0011      	movs	r1, r2
 8000e90:	0018      	movs	r0, r3
 8000e92:	f000 fd5f 	bl	8001954 <HAL_GPIO_Init>

    HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN4_PA1|HAL_BIND_SO8_PIN5_PA11);
 8000e96:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <HAL_UART_MspInit+0x14c>)
 8000e98:	0018      	movs	r0, r3
 8000e9a:	f000 fa1d 	bl	80012d8 <HAL_SYSCFG_SetPinBinding>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel1;
 8000e9e:	4b19      	ldr	r3, [pc, #100]	@ (8000f04 <HAL_UART_MspInit+0x150>)
 8000ea0:	4a19      	ldr	r2, [pc, #100]	@ (8000f08 <HAL_UART_MspInit+0x154>)
 8000ea2:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 8000ea4:	4b17      	ldr	r3, [pc, #92]	@ (8000f04 <HAL_UART_MspInit+0x150>)
 8000ea6:	2233      	movs	r2, #51	@ 0x33
 8000ea8:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000eaa:	4b16      	ldr	r3, [pc, #88]	@ (8000f04 <HAL_UART_MspInit+0x150>)
 8000eac:	2210      	movs	r2, #16
 8000eae:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000eb0:	4b14      	ldr	r3, [pc, #80]	@ (8000f04 <HAL_UART_MspInit+0x150>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000eb6:	4b13      	ldr	r3, [pc, #76]	@ (8000f04 <HAL_UART_MspInit+0x150>)
 8000eb8:	2280      	movs	r2, #128	@ 0x80
 8000eba:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000ebc:	4b11      	ldr	r3, [pc, #68]	@ (8000f04 <HAL_UART_MspInit+0x150>)
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000ec2:	4b10      	ldr	r3, [pc, #64]	@ (8000f04 <HAL_UART_MspInit+0x150>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000ec8:	4b0e      	ldr	r3, [pc, #56]	@ (8000f04 <HAL_UART_MspInit+0x150>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000ece:	4b0d      	ldr	r3, [pc, #52]	@ (8000f04 <HAL_UART_MspInit+0x150>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000ed4:	4b0b      	ldr	r3, [pc, #44]	@ (8000f04 <HAL_UART_MspInit+0x150>)
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f000 fae8 	bl	80014ac <HAL_DMA_Init>
 8000edc:	1e03      	subs	r3, r0, #0
 8000ede:	d001      	beq.n	8000ee4 <HAL_UART_MspInit+0x130>
    {
      Error_Handler();
 8000ee0:	f7ff fca8 	bl	8000834 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	4a07      	ldr	r2, [pc, #28]	@ (8000f04 <HAL_UART_MspInit+0x150>)
 8000ee8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8000eea:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <HAL_UART_MspInit+0x150>)
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	629a      	str	r2, [r3, #40]	@ 0x28

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000ef0:	46c0      	nop			@ (mov r8, r8)
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	b011      	add	sp, #68	@ 0x44
 8000ef6:	bd90      	pop	{r4, r7, pc}
 8000ef8:	40013800 	.word	0x40013800
 8000efc:	40021000 	.word	0x40021000
 8000f00:	003c0018 	.word	0x003c0018
 8000f04:	200001a0 	.word	0x200001a0
 8000f08:	40020008 	.word	0x40020008

08000f0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 8000f10:	46c0      	nop			@ (mov r8, r8)
 8000f12:	e7fd      	b.n	8000f10 <NMI_Handler+0x4>

08000f14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f18:	46c0      	nop			@ (mov r8, r8)
 8000f1a:	e7fd      	b.n	8000f18 <HardFault_Handler+0x4>

08000f1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f20:	46c0      	nop			@ (mov r8, r8)
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2a:	46c0      	nop			@ (mov r8, r8)
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}

08000f30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f34:	f000 f9a4 	bl	8001280 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f38:	46c0      	nop			@ (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}
	...

08000f40 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
    //        pulse_buffer[pulse_index++] = TIM3->CNT;
    //        idleTimer = 0;      // Reset o tempo de inatividade quando um novo pulso chega
    //        buffer_cleared = 0; // Se chegou um novo pulso, indica que o buffer não está limpo
    //    }

    if (EXTI->RPR1 & EXTI_RPR1_RPIF14)
 8000f44:	4b27      	ldr	r3, [pc, #156]	@ (8000fe4 <EXTI4_15_IRQHandler+0xa4>)
 8000f46:	68da      	ldr	r2, [r3, #12]
 8000f48:	2380      	movs	r3, #128	@ 0x80
 8000f4a:	01db      	lsls	r3, r3, #7
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	d01f      	beq.n	8000f90 <EXTI4_15_IRQHandler+0x50>
    {
        //GPIOA->ODR |= GPIO_ODR_OD9;
        EXTI->RPR1 |= EXTI_RPR1_RPIF14;
 8000f50:	4b24      	ldr	r3, [pc, #144]	@ (8000fe4 <EXTI4_15_IRQHandler+0xa4>)
 8000f52:	68da      	ldr	r2, [r3, #12]
 8000f54:	4b23      	ldr	r3, [pc, #140]	@ (8000fe4 <EXTI4_15_IRQHandler+0xa4>)
 8000f56:	2180      	movs	r1, #128	@ 0x80
 8000f58:	01c9      	lsls	r1, r1, #7
 8000f5a:	430a      	orrs	r2, r1
 8000f5c:	60da      	str	r2, [r3, #12]
        // get_Sample();

        if (!data_ready && (pulse_index < PULSE_BUFFER_SIZE))
 8000f5e:	4b22      	ldr	r3, [pc, #136]	@ (8000fe8 <EXTI4_15_IRQHandler+0xa8>)
 8000f60:	781b      	ldrb	r3, [r3, #0]
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d114      	bne.n	8000f90 <EXTI4_15_IRQHandler+0x50>
 8000f66:	4b21      	ldr	r3, [pc, #132]	@ (8000fec <EXTI4_15_IRQHandler+0xac>)
 8000f68:	881b      	ldrh	r3, [r3, #0]
 8000f6a:	2b31      	cmp	r3, #49	@ 0x31
 8000f6c:	d810      	bhi.n	8000f90 <EXTI4_15_IRQHandler+0x50>
        {
            pulse_buffer[pulse_index++] = TIM3->CNT;
 8000f6e:	4b20      	ldr	r3, [pc, #128]	@ (8000ff0 <EXTI4_15_IRQHandler+0xb0>)
 8000f70:	4a1e      	ldr	r2, [pc, #120]	@ (8000fec <EXTI4_15_IRQHandler+0xac>)
 8000f72:	8812      	ldrh	r2, [r2, #0]
 8000f74:	1c51      	adds	r1, r2, #1
 8000f76:	b288      	uxth	r0, r1
 8000f78:	491c      	ldr	r1, [pc, #112]	@ (8000fec <EXTI4_15_IRQHandler+0xac>)
 8000f7a:	8008      	strh	r0, [r1, #0]
 8000f7c:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000f7e:	4b1d      	ldr	r3, [pc, #116]	@ (8000ff4 <EXTI4_15_IRQHandler+0xb4>)
 8000f80:	0092      	lsls	r2, r2, #2
 8000f82:	50d1      	str	r1, [r2, r3]
            idleTimer = 0;      // Reset o tempo de inatividade quando um novo pulso chega
 8000f84:	4b1c      	ldr	r3, [pc, #112]	@ (8000ff8 <EXTI4_15_IRQHandler+0xb8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
            buffer_cleared = 0; // Se chegou um novo pulso, indica que o buffer não está limpo
 8000f8a:	4b1c      	ldr	r3, [pc, #112]	@ (8000ffc <EXTI4_15_IRQHandler+0xbc>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	701a      	strb	r2, [r3, #0]
        }

    }
    if (EXTI->FPR1 & EXTI_FPR1_FPIF14)
 8000f90:	4b14      	ldr	r3, [pc, #80]	@ (8000fe4 <EXTI4_15_IRQHandler+0xa4>)
 8000f92:	691a      	ldr	r2, [r3, #16]
 8000f94:	2380      	movs	r3, #128	@ 0x80
 8000f96:	01db      	lsls	r3, r3, #7
 8000f98:	4013      	ands	r3, r2
 8000f9a:	d01f      	beq.n	8000fdc <EXTI4_15_IRQHandler+0x9c>
    {
        //GPIOA->ODR |= GPIO_ODR_OD9;
        //GPIOA->ODR &= ~GPIO_ODR_OD9;
        EXTI->FPR1 |= EXTI_FPR1_FPIF14;
 8000f9c:	4b11      	ldr	r3, [pc, #68]	@ (8000fe4 <EXTI4_15_IRQHandler+0xa4>)
 8000f9e:	691a      	ldr	r2, [r3, #16]
 8000fa0:	4b10      	ldr	r3, [pc, #64]	@ (8000fe4 <EXTI4_15_IRQHandler+0xa4>)
 8000fa2:	2180      	movs	r1, #128	@ 0x80
 8000fa4:	01c9      	lsls	r1, r1, #7
 8000fa6:	430a      	orrs	r2, r1
 8000fa8:	611a      	str	r2, [r3, #16]
        // get_Sample();

        if (!data_ready && (pulse_index < PULSE_BUFFER_SIZE))
 8000faa:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe8 <EXTI4_15_IRQHandler+0xa8>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d114      	bne.n	8000fdc <EXTI4_15_IRQHandler+0x9c>
 8000fb2:	4b0e      	ldr	r3, [pc, #56]	@ (8000fec <EXTI4_15_IRQHandler+0xac>)
 8000fb4:	881b      	ldrh	r3, [r3, #0]
 8000fb6:	2b31      	cmp	r3, #49	@ 0x31
 8000fb8:	d810      	bhi.n	8000fdc <EXTI4_15_IRQHandler+0x9c>
        {
            pulse_buffer[pulse_index++] = TIM3->CNT;
 8000fba:	4b0d      	ldr	r3, [pc, #52]	@ (8000ff0 <EXTI4_15_IRQHandler+0xb0>)
 8000fbc:	4a0b      	ldr	r2, [pc, #44]	@ (8000fec <EXTI4_15_IRQHandler+0xac>)
 8000fbe:	8812      	ldrh	r2, [r2, #0]
 8000fc0:	1c51      	adds	r1, r2, #1
 8000fc2:	b288      	uxth	r0, r1
 8000fc4:	4909      	ldr	r1, [pc, #36]	@ (8000fec <EXTI4_15_IRQHandler+0xac>)
 8000fc6:	8008      	strh	r0, [r1, #0]
 8000fc8:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000fca:	4b0a      	ldr	r3, [pc, #40]	@ (8000ff4 <EXTI4_15_IRQHandler+0xb4>)
 8000fcc:	0092      	lsls	r2, r2, #2
 8000fce:	50d1      	str	r1, [r2, r3]
            idleTimer = 0;      // Reset o tempo de inatividade quando um novo pulso chega
 8000fd0:	4b09      	ldr	r3, [pc, #36]	@ (8000ff8 <EXTI4_15_IRQHandler+0xb8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	601a      	str	r2, [r3, #0]
            buffer_cleared = 0; // Se chegou um novo pulso, indica que o buffer não está limpo
 8000fd6:	4b09      	ldr	r3, [pc, #36]	@ (8000ffc <EXTI4_15_IRQHandler+0xbc>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	701a      	strb	r2, [r3, #0]

        //GPIOA->ODR &= ~GPIO_ODR_OD9;
    }

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000fdc:	46c0      	nop			@ (mov r8, r8)
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	46c0      	nop			@ (mov r8, r8)
 8000fe4:	40021800 	.word	0x40021800
 8000fe8:	20000470 	.word	0x20000470
 8000fec:	20000472 	.word	0x20000472
 8000ff0:	40000400 	.word	0x40000400
 8000ff4:	20000240 	.word	0x20000240
 8000ff8:	20000478 	.word	0x20000478
 8000ffc:	2000047c 	.word	0x2000047c

08001000 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001004:	4b03      	ldr	r3, [pc, #12]	@ (8001014 <DMA1_Channel1_IRQHandler+0x14>)
 8001006:	0018      	movs	r0, r3
 8001008:	f000 fb62 	bl	80016d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800100c:	46c0      	nop			@ (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	bd80      	pop	{r7, pc}
 8001012:	46c0      	nop			@ (mov r8, r8)
 8001014:	200001a0 	.word	0x200001a0

08001018 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 800101c:	4b03      	ldr	r3, [pc, #12]	@ (800102c <TIM14_IRQHandler+0x14>)
 800101e:	0018      	movs	r0, r3
 8001020:	f001 fb36 	bl	8002690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8001024:	46c0      	nop			@ (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			@ (mov r8, r8)
 800102c:	20000074 	.word	0x20000074

08001030 <TIM16_IRQHandler>:

/**
  * @brief This function handles TIM16 global interrupt.
  */
void TIM16_IRQHandler(void)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM16_IRQn 0 */

  /* USER CODE END TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8001034:	4b03      	ldr	r3, [pc, #12]	@ (8001044 <TIM16_IRQHandler+0x14>)
 8001036:	0018      	movs	r0, r3
 8001038:	f001 fb2a 	bl	8002690 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM16_IRQn 1 */

  /* USER CODE END TIM16_IRQn 1 */
}
 800103c:	46c0      	nop			@ (mov r8, r8)
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	46c0      	nop			@ (mov r8, r8)
 8001044:	200000c0 	.word	0x200000c0

08001048 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800104c:	4b03      	ldr	r3, [pc, #12]	@ (800105c <SystemInit+0x14>)
 800104e:	2280      	movs	r2, #128	@ 0x80
 8001050:	0512      	lsls	r2, r2, #20
 8001052:	609a      	str	r2, [r3, #8]
#endif
}
 8001054:	46c0      	nop			@ (mov r8, r8)
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	46c0      	nop			@ (mov r8, r8)
 800105c:	e000ed00 	.word	0xe000ed00

08001060 <send_uart_data>:

static int16_t last_error_value = 0;
static uint8_t new_error_flag = 0;

void send_uart_data(void)
{
 8001060:	b5b0      	push	{r4, r5, r7, lr}
 8001062:	b084      	sub	sp, #16
 8001064:	af00      	add	r7, sp, #0
    uint8_t message[6]; // 2 bytes de payload inicial + 2 bytes erro + 2 bytes PIR
    int16_t error_value, pir_value;

    error_value = getErroPIR();
 8001066:	250e      	movs	r5, #14
 8001068:	197c      	adds	r4, r7, r5
 800106a:	f7ff fcd5 	bl	8000a18 <getErroPIR>
 800106e:	0003      	movs	r3, r0
 8001070:	8023      	strh	r3, [r4, #0]
    pir_value = getPirValue();
 8001072:	230c      	movs	r3, #12
 8001074:	18fc      	adds	r4, r7, r3
 8001076:	f7ff fcd9 	bl	8000a2c <getPirValue>
 800107a:	0003      	movs	r3, r0
 800107c:	8023      	strh	r3, [r4, #0]

    if(error_value > last_error_value){
 800107e:	4b24      	ldr	r3, [pc, #144]	@ (8001110 <send_uart_data+0xb0>)
 8001080:	2200      	movs	r2, #0
 8001082:	5e9b      	ldrsh	r3, [r3, r2]
 8001084:	197a      	adds	r2, r7, r5
 8001086:	2100      	movs	r1, #0
 8001088:	5e52      	ldrsh	r2, [r2, r1]
 800108a:	429a      	cmp	r2, r3
 800108c:	dd06      	ble.n	800109c <send_uart_data+0x3c>
    	new_error_flag = 1;
 800108e:	4b21      	ldr	r3, [pc, #132]	@ (8001114 <send_uart_data+0xb4>)
 8001090:	2201      	movs	r2, #1
 8001092:	701a      	strb	r2, [r3, #0]
    	last_error_value = error_value;
 8001094:	4b1e      	ldr	r3, [pc, #120]	@ (8001110 <send_uart_data+0xb0>)
 8001096:	197a      	adds	r2, r7, r5
 8001098:	8812      	ldrh	r2, [r2, #0]
 800109a:	801a      	strh	r2, [r3, #0]
    }

    // Definição do payload inicial
    message[0] = 0xAA; // Primeiro byte do cabeçalho
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	22aa      	movs	r2, #170	@ 0xaa
 80010a0:	701a      	strb	r2, [r3, #0]
    message[1] = 0x55; // Segundo byte do cabeçalho
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2255      	movs	r2, #85	@ 0x55
 80010a6:	705a      	strb	r2, [r3, #1]

    // Copia os valores de erro e PIR para o buffer (little-endian)
    message[2] = (uint8_t)(error_value & 0xFF);
 80010a8:	210e      	movs	r1, #14
 80010aa:	187b      	adds	r3, r7, r1
 80010ac:	881b      	ldrh	r3, [r3, #0]
 80010ae:	b2da      	uxtb	r2, r3
 80010b0:	1d3b      	adds	r3, r7, #4
 80010b2:	709a      	strb	r2, [r3, #2]
    message[3] = (uint8_t)((error_value >> 8) & 0xFF);
 80010b4:	187b      	adds	r3, r7, r1
 80010b6:	2200      	movs	r2, #0
 80010b8:	5e9b      	ldrsh	r3, [r3, r2]
 80010ba:	121b      	asrs	r3, r3, #8
 80010bc:	b21b      	sxth	r3, r3
 80010be:	b2da      	uxtb	r2, r3
 80010c0:	1d3b      	adds	r3, r7, #4
 80010c2:	70da      	strb	r2, [r3, #3]

    message[4] = (uint8_t)(pir_value & 0xFF);
 80010c4:	210c      	movs	r1, #12
 80010c6:	187b      	adds	r3, r7, r1
 80010c8:	881b      	ldrh	r3, [r3, #0]
 80010ca:	b2da      	uxtb	r2, r3
 80010cc:	1d3b      	adds	r3, r7, #4
 80010ce:	711a      	strb	r2, [r3, #4]
    message[5] = (uint8_t)((pir_value >> 8) & 0xFF);
 80010d0:	187b      	adds	r3, r7, r1
 80010d2:	2200      	movs	r2, #0
 80010d4:	5e9b      	ldrsh	r3, [r3, r2]
 80010d6:	121b      	asrs	r3, r3, #8
 80010d8:	b21b      	sxth	r3, r3
 80010da:	b2da      	uxtb	r2, r3
 80010dc:	1d3b      	adds	r3, r7, #4
 80010de:	715a      	strb	r2, [r3, #5]

    if(new_error_flag){
 80010e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001114 <send_uart_data+0xb4>)
 80010e2:	781b      	ldrb	r3, [r3, #0]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d008      	beq.n	80010fa <send_uart_data+0x9a>
    	// Copia os valores de erro e PIR para o buffer (little-endian)
    	message[4] = (0x00);
 80010e8:	1d3b      	adds	r3, r7, #4
 80010ea:	2200      	movs	r2, #0
 80010ec:	711a      	strb	r2, [r3, #4]
    	message[5] = (0x00);
 80010ee:	1d3b      	adds	r3, r7, #4
 80010f0:	2200      	movs	r2, #0
 80010f2:	715a      	strb	r2, [r3, #5]
    	new_error_flag = 0;
 80010f4:	4b07      	ldr	r3, [pc, #28]	@ (8001114 <send_uart_data+0xb4>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	701a      	strb	r2, [r3, #0]
    }
    // Envio pela UART
    HAL_UART_Transmit_DMA(huart, message, 6);
 80010fa:	4b07      	ldr	r3, [pc, #28]	@ (8001118 <send_uart_data+0xb8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	1d39      	adds	r1, r7, #4
 8001100:	2206      	movs	r2, #6
 8001102:	0018      	movs	r0, r3
 8001104:	f001 fea0 	bl	8002e48 <HAL_UART_Transmit_DMA>
}
 8001108:	46c0      	nop			@ (mov r8, r8)
 800110a:	46bd      	mov	sp, r7
 800110c:	b004      	add	sp, #16
 800110e:	bdb0      	pop	{r4, r5, r7, pc}
 8001110:	20000488 	.word	0x20000488
 8001114:	2000048a 	.word	0x2000048a
 8001118:	20000484 	.word	0x20000484

0800111c <setUart>:

void setUart(UART_HandleTypeDef *huartChosed){
 800111c:	b580      	push	{r7, lr}
 800111e:	b082      	sub	sp, #8
 8001120:	af00      	add	r7, sp, #0
 8001122:	6078      	str	r0, [r7, #4]
	huart = huartChosed;
 8001124:	4b03      	ldr	r3, [pc, #12]	@ (8001134 <setUart+0x18>)
 8001126:	687a      	ldr	r2, [r7, #4]
 8001128:	601a      	str	r2, [r3, #0]
}
 800112a:	46c0      	nop			@ (mov r8, r8)
 800112c:	46bd      	mov	sp, r7
 800112e:	b002      	add	sp, #8
 8001130:	bd80      	pop	{r7, pc}
 8001132:	46c0      	nop			@ (mov r8, r8)
 8001134:	20000484 	.word	0x20000484

08001138 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001138:	480d      	ldr	r0, [pc, #52]	@ (8001170 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800113a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800113c:	f7ff ff84 	bl	8001048 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001140:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001142:	e003      	b.n	800114c <LoopCopyDataInit>

08001144 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001144:	4b0b      	ldr	r3, [pc, #44]	@ (8001174 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001146:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001148:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800114a:	3104      	adds	r1, #4

0800114c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800114c:	480a      	ldr	r0, [pc, #40]	@ (8001178 <LoopForever+0xa>)
  ldr r3, =_edata
 800114e:	4b0b      	ldr	r3, [pc, #44]	@ (800117c <LoopForever+0xe>)
  adds r2, r0, r1
 8001150:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001152:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001154:	d3f6      	bcc.n	8001144 <CopyDataInit>
  ldr r2, =_sbss
 8001156:	4a0a      	ldr	r2, [pc, #40]	@ (8001180 <LoopForever+0x12>)
  b LoopFillZerobss
 8001158:	e002      	b.n	8001160 <LoopFillZerobss>

0800115a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800115a:	2300      	movs	r3, #0
  str  r3, [r2]
 800115c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800115e:	3204      	adds	r2, #4

08001160 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001160:	4b08      	ldr	r3, [pc, #32]	@ (8001184 <LoopForever+0x16>)
  cmp r2, r3
 8001162:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001164:	d3f9      	bcc.n	800115a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001166:	f002 fccb 	bl	8003b00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800116a:	f7ff f98d 	bl	8000488 <main>

0800116e <LoopForever>:

LoopForever:
    b LoopForever
 800116e:	e7fe      	b.n	800116e <LoopForever>
  ldr   r0, =_estack
 8001170:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8001174:	08003bf0 	.word	0x08003bf0
  ldr r0, =_sdata
 8001178:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800117c:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8001180:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8001184:	20000490 	.word	0x20000490

08001188 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001188:	e7fe      	b.n	8001188 <ADC1_IRQHandler>
	...

0800118c <LL_SYSCFG_ConfigPinMux>:
  * @rmtoll SYSCFG_CFGR3 CLL   LL_SYSCFG_ConfigPinMux\n
  * @param  mux_cfg This parameter can be a value of @ref SYSTEM_LL_PINMUX_CFG
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_ConfigPinMux(uint32_t mux_cfg)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	b082      	sub	sp, #8
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR3, (mux_cfg >> 16U), (mux_cfg & 0x0000FFFFU));
 8001194:	4b08      	ldr	r3, [pc, #32]	@ (80011b8 <LL_SYSCFG_ConfigPinMux+0x2c>)
 8001196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	0c12      	lsrs	r2, r2, #16
 800119c:	43d2      	mvns	r2, r2
 800119e:	401a      	ands	r2, r3
 80011a0:	0011      	movs	r1, r2
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	041b      	lsls	r3, r3, #16
 80011a6:	0c1a      	lsrs	r2, r3, #16
 80011a8:	4b03      	ldr	r3, [pc, #12]	@ (80011b8 <LL_SYSCFG_ConfigPinMux+0x2c>)
 80011aa:	430a      	orrs	r2, r1
 80011ac:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80011ae:	46c0      	nop			@ (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b002      	add	sp, #8
 80011b4:	bd80      	pop	{r7, pc}
 80011b6:	46c0      	nop			@ (mov r8, r8)
 80011b8:	40010000 	.word	0x40010000

080011bc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	b082      	sub	sp, #8
 80011c0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80011c8:	2000      	movs	r0, #0
 80011ca:	f000 f80f 	bl	80011ec <HAL_InitTick>
 80011ce:	1e03      	subs	r3, r0, #0
 80011d0:	d003      	beq.n	80011da <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 80011d2:	1dfb      	adds	r3, r7, #7
 80011d4:	2201      	movs	r2, #1
 80011d6:	701a      	strb	r2, [r3, #0]
 80011d8:	e001      	b.n	80011de <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80011da:	f7ff fd6b 	bl	8000cb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80011de:	1dfb      	adds	r3, r7, #7
 80011e0:	781b      	ldrb	r3, [r3, #0]
}
 80011e2:	0018      	movs	r0, r3
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b002      	add	sp, #8
 80011e8:	bd80      	pop	{r7, pc}
	...

080011ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011ec:	b590      	push	{r4, r7, lr}
 80011ee:	b085      	sub	sp, #20
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011f4:	230f      	movs	r3, #15
 80011f6:	18fb      	adds	r3, r7, r3
 80011f8:	2200      	movs	r2, #0
 80011fa:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80011fc:	4b1d      	ldr	r3, [pc, #116]	@ (8001274 <HAL_InitTick+0x88>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d02b      	beq.n	800125c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8001204:	4b1c      	ldr	r3, [pc, #112]	@ (8001278 <HAL_InitTick+0x8c>)
 8001206:	681c      	ldr	r4, [r3, #0]
 8001208:	4b1a      	ldr	r3, [pc, #104]	@ (8001274 <HAL_InitTick+0x88>)
 800120a:	781b      	ldrb	r3, [r3, #0]
 800120c:	0019      	movs	r1, r3
 800120e:	23fa      	movs	r3, #250	@ 0xfa
 8001210:	0098      	lsls	r0, r3, #2
 8001212:	f7fe ff79 	bl	8000108 <__udivsi3>
 8001216:	0003      	movs	r3, r0
 8001218:	0019      	movs	r1, r3
 800121a:	0020      	movs	r0, r4
 800121c:	f7fe ff74 	bl	8000108 <__udivsi3>
 8001220:	0003      	movs	r3, r0
 8001222:	0018      	movs	r0, r3
 8001224:	f000 f935 	bl	8001492 <HAL_SYSTICK_Config>
 8001228:	1e03      	subs	r3, r0, #0
 800122a:	d112      	bne.n	8001252 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b03      	cmp	r3, #3
 8001230:	d80a      	bhi.n	8001248 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001232:	6879      	ldr	r1, [r7, #4]
 8001234:	2301      	movs	r3, #1
 8001236:	425b      	negs	r3, r3
 8001238:	2200      	movs	r2, #0
 800123a:	0018      	movs	r0, r3
 800123c:	f000 f904 	bl	8001448 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001240:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <HAL_InitTick+0x90>)
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	601a      	str	r2, [r3, #0]
 8001246:	e00d      	b.n	8001264 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001248:	230f      	movs	r3, #15
 800124a:	18fb      	adds	r3, r7, r3
 800124c:	2201      	movs	r2, #1
 800124e:	701a      	strb	r2, [r3, #0]
 8001250:	e008      	b.n	8001264 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001252:	230f      	movs	r3, #15
 8001254:	18fb      	adds	r3, r7, r3
 8001256:	2201      	movs	r2, #1
 8001258:	701a      	strb	r2, [r3, #0]
 800125a:	e003      	b.n	8001264 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800125c:	230f      	movs	r3, #15
 800125e:	18fb      	adds	r3, r7, r3
 8001260:	2201      	movs	r2, #1
 8001262:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001264:	230f      	movs	r3, #15
 8001266:	18fb      	adds	r3, r7, r3
 8001268:	781b      	ldrb	r3, [r3, #0]
}
 800126a:	0018      	movs	r0, r3
 800126c:	46bd      	mov	sp, r7
 800126e:	b005      	add	sp, #20
 8001270:	bd90      	pop	{r4, r7, pc}
 8001272:	46c0      	nop			@ (mov r8, r8)
 8001274:	20000008 	.word	0x20000008
 8001278:	20000000 	.word	0x20000000
 800127c:	20000004 	.word	0x20000004

08001280 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001284:	4b05      	ldr	r3, [pc, #20]	@ (800129c <HAL_IncTick+0x1c>)
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	001a      	movs	r2, r3
 800128a:	4b05      	ldr	r3, [pc, #20]	@ (80012a0 <HAL_IncTick+0x20>)
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	18d2      	adds	r2, r2, r3
 8001290:	4b03      	ldr	r3, [pc, #12]	@ (80012a0 <HAL_IncTick+0x20>)
 8001292:	601a      	str	r2, [r3, #0]
}
 8001294:	46c0      	nop			@ (mov r8, r8)
 8001296:	46bd      	mov	sp, r7
 8001298:	bd80      	pop	{r7, pc}
 800129a:	46c0      	nop			@ (mov r8, r8)
 800129c:	20000008 	.word	0x20000008
 80012a0:	2000048c 	.word	0x2000048c

080012a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b02      	ldr	r3, [pc, #8]	@ (80012b4 <HAL_GetTick+0x10>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	0018      	movs	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	46c0      	nop			@ (mov r8, r8)
 80012b4:	2000048c 	.word	0x2000048c

080012b8 <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 80012c0:	4b04      	ldr	r3, [pc, #16]	@ (80012d4 <HAL_SYSCFG_EnableRemap+0x1c>)
 80012c2:	6819      	ldr	r1, [r3, #0]
 80012c4:	4b03      	ldr	r3, [pc, #12]	@ (80012d4 <HAL_SYSCFG_EnableRemap+0x1c>)
 80012c6:	687a      	ldr	r2, [r7, #4]
 80012c8:	430a      	orrs	r2, r1
 80012ca:	601a      	str	r2, [r3, #0]
}
 80012cc:	46c0      	nop			@ (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b002      	add	sp, #8
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	40010000 	.word	0x40010000

080012d8 <HAL_SYSCFG_SetPinBinding>:
  *         for each die package
  *         This parameter can be a value of @ref HAL_BIND_CFG
  * @retval None
  */
void HAL_SYSCFG_SetPinBinding(uint32_t pin_binding)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b082      	sub	sp, #8
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_SYSCFG_PINBINDING(pin_binding));
  LL_SYSCFG_ConfigPinMux(pin_binding);
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	0018      	movs	r0, r3
 80012e4:	f7ff ff52 	bl	800118c <LL_SYSCFG_ConfigPinMux>
}
 80012e8:	46c0      	nop			@ (mov r8, r8)
 80012ea:	46bd      	mov	sp, r7
 80012ec:	b002      	add	sp, #8
 80012ee:	bd80      	pop	{r7, pc}

080012f0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	0002      	movs	r2, r0
 80012f8:	1dfb      	adds	r3, r7, #7
 80012fa:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80012fc:	1dfb      	adds	r3, r7, #7
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	2b7f      	cmp	r3, #127	@ 0x7f
 8001302:	d809      	bhi.n	8001318 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001304:	1dfb      	adds	r3, r7, #7
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	001a      	movs	r2, r3
 800130a:	231f      	movs	r3, #31
 800130c:	401a      	ands	r2, r3
 800130e:	4b04      	ldr	r3, [pc, #16]	@ (8001320 <__NVIC_EnableIRQ+0x30>)
 8001310:	2101      	movs	r1, #1
 8001312:	4091      	lsls	r1, r2
 8001314:	000a      	movs	r2, r1
 8001316:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001318:	46c0      	nop			@ (mov r8, r8)
 800131a:	46bd      	mov	sp, r7
 800131c:	b002      	add	sp, #8
 800131e:	bd80      	pop	{r7, pc}
 8001320:	e000e100 	.word	0xe000e100

08001324 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001324:	b590      	push	{r4, r7, lr}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	0002      	movs	r2, r0
 800132c:	6039      	str	r1, [r7, #0]
 800132e:	1dfb      	adds	r3, r7, #7
 8001330:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001332:	1dfb      	adds	r3, r7, #7
 8001334:	781b      	ldrb	r3, [r3, #0]
 8001336:	2b7f      	cmp	r3, #127	@ 0x7f
 8001338:	d828      	bhi.n	800138c <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800133a:	4a2f      	ldr	r2, [pc, #188]	@ (80013f8 <__NVIC_SetPriority+0xd4>)
 800133c:	1dfb      	adds	r3, r7, #7
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	b25b      	sxtb	r3, r3
 8001342:	089b      	lsrs	r3, r3, #2
 8001344:	33c0      	adds	r3, #192	@ 0xc0
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	589b      	ldr	r3, [r3, r2]
 800134a:	1dfa      	adds	r2, r7, #7
 800134c:	7812      	ldrb	r2, [r2, #0]
 800134e:	0011      	movs	r1, r2
 8001350:	2203      	movs	r2, #3
 8001352:	400a      	ands	r2, r1
 8001354:	00d2      	lsls	r2, r2, #3
 8001356:	21ff      	movs	r1, #255	@ 0xff
 8001358:	4091      	lsls	r1, r2
 800135a:	000a      	movs	r2, r1
 800135c:	43d2      	mvns	r2, r2
 800135e:	401a      	ands	r2, r3
 8001360:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	019b      	lsls	r3, r3, #6
 8001366:	22ff      	movs	r2, #255	@ 0xff
 8001368:	401a      	ands	r2, r3
 800136a:	1dfb      	adds	r3, r7, #7
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	0018      	movs	r0, r3
 8001370:	2303      	movs	r3, #3
 8001372:	4003      	ands	r3, r0
 8001374:	00db      	lsls	r3, r3, #3
 8001376:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001378:	481f      	ldr	r0, [pc, #124]	@ (80013f8 <__NVIC_SetPriority+0xd4>)
 800137a:	1dfb      	adds	r3, r7, #7
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	b25b      	sxtb	r3, r3
 8001380:	089b      	lsrs	r3, r3, #2
 8001382:	430a      	orrs	r2, r1
 8001384:	33c0      	adds	r3, #192	@ 0xc0
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800138a:	e031      	b.n	80013f0 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800138c:	4a1b      	ldr	r2, [pc, #108]	@ (80013fc <__NVIC_SetPriority+0xd8>)
 800138e:	1dfb      	adds	r3, r7, #7
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	0019      	movs	r1, r3
 8001394:	230f      	movs	r3, #15
 8001396:	400b      	ands	r3, r1
 8001398:	3b08      	subs	r3, #8
 800139a:	089b      	lsrs	r3, r3, #2
 800139c:	3306      	adds	r3, #6
 800139e:	009b      	lsls	r3, r3, #2
 80013a0:	18d3      	adds	r3, r2, r3
 80013a2:	3304      	adds	r3, #4
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	1dfa      	adds	r2, r7, #7
 80013a8:	7812      	ldrb	r2, [r2, #0]
 80013aa:	0011      	movs	r1, r2
 80013ac:	2203      	movs	r2, #3
 80013ae:	400a      	ands	r2, r1
 80013b0:	00d2      	lsls	r2, r2, #3
 80013b2:	21ff      	movs	r1, #255	@ 0xff
 80013b4:	4091      	lsls	r1, r2
 80013b6:	000a      	movs	r2, r1
 80013b8:	43d2      	mvns	r2, r2
 80013ba:	401a      	ands	r2, r3
 80013bc:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	019b      	lsls	r3, r3, #6
 80013c2:	22ff      	movs	r2, #255	@ 0xff
 80013c4:	401a      	ands	r2, r3
 80013c6:	1dfb      	adds	r3, r7, #7
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	0018      	movs	r0, r3
 80013cc:	2303      	movs	r3, #3
 80013ce:	4003      	ands	r3, r0
 80013d0:	00db      	lsls	r3, r3, #3
 80013d2:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80013d4:	4809      	ldr	r0, [pc, #36]	@ (80013fc <__NVIC_SetPriority+0xd8>)
 80013d6:	1dfb      	adds	r3, r7, #7
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	001c      	movs	r4, r3
 80013dc:	230f      	movs	r3, #15
 80013de:	4023      	ands	r3, r4
 80013e0:	3b08      	subs	r3, #8
 80013e2:	089b      	lsrs	r3, r3, #2
 80013e4:	430a      	orrs	r2, r1
 80013e6:	3306      	adds	r3, #6
 80013e8:	009b      	lsls	r3, r3, #2
 80013ea:	18c3      	adds	r3, r0, r3
 80013ec:	3304      	adds	r3, #4
 80013ee:	601a      	str	r2, [r3, #0]
}
 80013f0:	46c0      	nop			@ (mov r8, r8)
 80013f2:	46bd      	mov	sp, r7
 80013f4:	b003      	add	sp, #12
 80013f6:	bd90      	pop	{r4, r7, pc}
 80013f8:	e000e100 	.word	0xe000e100
 80013fc:	e000ed00 	.word	0xe000ed00

08001400 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	1e5a      	subs	r2, r3, #1
 800140c:	2380      	movs	r3, #128	@ 0x80
 800140e:	045b      	lsls	r3, r3, #17
 8001410:	429a      	cmp	r2, r3
 8001412:	d301      	bcc.n	8001418 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001414:	2301      	movs	r3, #1
 8001416:	e010      	b.n	800143a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001418:	4b0a      	ldr	r3, [pc, #40]	@ (8001444 <SysTick_Config+0x44>)
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	3a01      	subs	r2, #1
 800141e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001420:	2301      	movs	r3, #1
 8001422:	425b      	negs	r3, r3
 8001424:	2103      	movs	r1, #3
 8001426:	0018      	movs	r0, r3
 8001428:	f7ff ff7c 	bl	8001324 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800142c:	4b05      	ldr	r3, [pc, #20]	@ (8001444 <SysTick_Config+0x44>)
 800142e:	2200      	movs	r2, #0
 8001430:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001432:	4b04      	ldr	r3, [pc, #16]	@ (8001444 <SysTick_Config+0x44>)
 8001434:	2207      	movs	r2, #7
 8001436:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001438:	2300      	movs	r3, #0
}
 800143a:	0018      	movs	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	b002      	add	sp, #8
 8001440:	bd80      	pop	{r7, pc}
 8001442:	46c0      	nop			@ (mov r8, r8)
 8001444:	e000e010 	.word	0xe000e010

08001448 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001448:	b580      	push	{r7, lr}
 800144a:	b084      	sub	sp, #16
 800144c:	af00      	add	r7, sp, #0
 800144e:	60b9      	str	r1, [r7, #8]
 8001450:	607a      	str	r2, [r7, #4]
 8001452:	210f      	movs	r1, #15
 8001454:	187b      	adds	r3, r7, r1
 8001456:	1c02      	adds	r2, r0, #0
 8001458:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800145a:	68ba      	ldr	r2, [r7, #8]
 800145c:	187b      	adds	r3, r7, r1
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	b25b      	sxtb	r3, r3
 8001462:	0011      	movs	r1, r2
 8001464:	0018      	movs	r0, r3
 8001466:	f7ff ff5d 	bl	8001324 <__NVIC_SetPriority>
}
 800146a:	46c0      	nop			@ (mov r8, r8)
 800146c:	46bd      	mov	sp, r7
 800146e:	b004      	add	sp, #16
 8001470:	bd80      	pop	{r7, pc}

08001472 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b082      	sub	sp, #8
 8001476:	af00      	add	r7, sp, #0
 8001478:	0002      	movs	r2, r0
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800147e:	1dfb      	adds	r3, r7, #7
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	b25b      	sxtb	r3, r3
 8001484:	0018      	movs	r0, r3
 8001486:	f7ff ff33 	bl	80012f0 <__NVIC_EnableIRQ>
}
 800148a:	46c0      	nop			@ (mov r8, r8)
 800148c:	46bd      	mov	sp, r7
 800148e:	b002      	add	sp, #8
 8001490:	bd80      	pop	{r7, pc}

08001492 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001492:	b580      	push	{r7, lr}
 8001494:	b082      	sub	sp, #8
 8001496:	af00      	add	r7, sp, #0
 8001498:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	0018      	movs	r0, r3
 800149e:	f7ff ffaf 	bl	8001400 <SysTick_Config>
 80014a2:	0003      	movs	r3, r0
}
 80014a4:	0018      	movs	r0, r3
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b002      	add	sp, #8
 80014aa:	bd80      	pop	{r7, pc}

080014ac <HAL_DMA_Init>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b082      	sub	sp, #8
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d101      	bne.n	80014be <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80014ba:	2301      	movs	r3, #1
 80014bc:	e077      	b.n	80015ae <HAL_DMA_Init+0x102>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* calculation of the channel index */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a3d      	ldr	r2, [pc, #244]	@ (80015b8 <HAL_DMA_Init+0x10c>)
 80014c4:	4694      	mov	ip, r2
 80014c6:	4463      	add	r3, ip
 80014c8:	2114      	movs	r1, #20
 80014ca:	0018      	movs	r0, r3
 80014cc:	f7fe fe1c 	bl	8000108 <__udivsi3>
 80014d0:	0003      	movs	r3, r0
                                                                                (uint32_t)DMA1_Channel1)) << 2U;
 80014d2:	009a      	lsls	r2, r3, #2
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - \
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	641a      	str	r2, [r3, #64]	@ 0x40
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2225      	movs	r2, #37	@ 0x25
 80014dc:	2102      	movs	r1, #2
 80014de:	5499      	strb	r1, [r3, r2]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  CLEAR_BIT(hdma->Instance->CCR, (DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	681a      	ldr	r2, [r3, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4934      	ldr	r1, [pc, #208]	@ (80015bc <HAL_DMA_Init+0x110>)
 80014ec:	400a      	ands	r2, r1
 80014ee:	601a      	str	r2, [r3, #0]
                                  DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                                  DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Set the DMA Channel configuration */
  SET_BIT(hdma->Instance->CCR, (hdma->Init.Direction           |                               \
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	6819      	ldr	r1, [r3, #0]
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	689a      	ldr	r2, [r3, #8]
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	431a      	orrs	r2, r3
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	691b      	ldr	r3, [r3, #16]
 8001504:	431a      	orrs	r2, r3
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	431a      	orrs	r2, r3
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	699b      	ldr	r3, [r3, #24]
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	69db      	ldr	r3, [r3, #28]
 8001516:	431a      	orrs	r2, r3
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	6a1b      	ldr	r3, [r3, #32]
 800151c:	431a      	orrs	r2, r3
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	430a      	orrs	r2, r1
 8001524:	601a      	str	r2, [r3, #0]
                                hdma->Init.Mode                | hdma->Init.Priority));

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	0018      	movs	r0, r3
 800152a:	f000 f9c3 	bl	80018b4 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	2380      	movs	r3, #128	@ 0x80
 8001534:	01db      	lsls	r3, r3, #7
 8001536:	429a      	cmp	r2, r3
 8001538:	d102      	bne.n	8001540 <HAL_DMA_Init+0x94>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	2200      	movs	r2, #0
 800153e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	685a      	ldr	r2, [r3, #4]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001548:	21ff      	movs	r1, #255	@ 0xff
 800154a:	400a      	ands	r2, r1
 800154c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001552:	687a      	ldr	r2, [r7, #4]
 8001554:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8001556:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request > 0UL) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d011      	beq.n	8001584 <HAL_DMA_Init+0xd8>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	685b      	ldr	r3, [r3, #4]
 8001564:	2b04      	cmp	r3, #4
 8001566:	d80d      	bhi.n	8001584 <HAL_DMA_Init+0xd8>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	0018      	movs	r0, r3
 800156c:	f000 f9ce 	bl	800190c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001574:	2200      	movs	r2, #0
 8001576:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	e008      	b.n	8001596 <HAL_DMA_Init+0xea>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	2200      	movs	r2, #0
 8001588:	651a      	str	r2, [r3, #80]	@ 0x50
    hdma->DMAmuxRequestGenStatus = 0U;
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	2200      	movs	r2, #0
 800158e:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2200      	movs	r2, #0
 8001594:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	2200      	movs	r2, #0
 800159a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	2225      	movs	r2, #37	@ 0x25
 80015a0:	2101      	movs	r1, #1
 80015a2:	5499      	strb	r1, [r3, r2]

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2224      	movs	r2, #36	@ 0x24
 80015a8:	2100      	movs	r1, #0
 80015aa:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80015ac:	2300      	movs	r3, #0
}
 80015ae:	0018      	movs	r0, r3
 80015b0:	46bd      	mov	sp, r7
 80015b2:	b002      	add	sp, #8
 80015b4:	bd80      	pop	{r7, pc}
 80015b6:	46c0      	nop			@ (mov r8, r8)
 80015b8:	bffdfff8 	.word	0xbffdfff8
 80015bc:	ffff800f 	.word	0xffff800f

080015c0 <HAL_DMA_Start_IT>:
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b086      	sub	sp, #24
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	60f8      	str	r0, [r7, #12]
 80015c8:	60b9      	str	r1, [r7, #8]
 80015ca:	607a      	str	r2, [r7, #4]
 80015cc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80015ce:	2317      	movs	r3, #23
 80015d0:	18fb      	adds	r3, r7, r3
 80015d2:	2200      	movs	r2, #0
 80015d4:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	2224      	movs	r2, #36	@ 0x24
 80015da:	5c9b      	ldrb	r3, [r3, r2]
 80015dc:	2b01      	cmp	r3, #1
 80015de:	d101      	bne.n	80015e4 <HAL_DMA_Start_IT+0x24>
 80015e0:	2302      	movs	r3, #2
 80015e2:	e070      	b.n	80016c6 <HAL_DMA_Start_IT+0x106>
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	2224      	movs	r2, #36	@ 0x24
 80015e8:	2101      	movs	r1, #1
 80015ea:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	2225      	movs	r2, #37	@ 0x25
 80015f0:	5c9b      	ldrb	r3, [r3, r2]
 80015f2:	b2db      	uxtb	r3, r3
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d157      	bne.n	80016a8 <HAL_DMA_Start_IT+0xe8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2225      	movs	r2, #37	@ 0x25
 80015fc:	2102      	movs	r1, #2
 80015fe:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	681a      	ldr	r2, [r3, #0]
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2101      	movs	r1, #1
 8001612:	438a      	bics	r2, r1
 8001614:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001616:	683b      	ldr	r3, [r7, #0]
 8001618:	687a      	ldr	r2, [r7, #4]
 800161a:	68b9      	ldr	r1, [r7, #8]
 800161c:	68f8      	ldr	r0, [r7, #12]
 800161e:	f000 f909 	bl	8001834 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001626:	2b00      	cmp	r3, #0
 8001628:	d008      	beq.n	800163c <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	210e      	movs	r1, #14
 8001636:	430a      	orrs	r2, r1
 8001638:	601a      	str	r2, [r3, #0]
 800163a:	e00f      	b.n	800165c <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800163c:	68fb      	ldr	r3, [r7, #12]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	2104      	movs	r1, #4
 8001648:	438a      	bics	r2, r1
 800164a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	210a      	movs	r1, #10
 8001658:	430a      	orrs	r2, r1
 800165a:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001660:	681a      	ldr	r2, [r3, #0]
 8001662:	2380      	movs	r3, #128	@ 0x80
 8001664:	025b      	lsls	r3, r3, #9
 8001666:	4013      	ands	r3, r2
 8001668:	d008      	beq.n	800167c <HAL_DMA_Start_IT+0xbc>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001674:	2180      	movs	r1, #128	@ 0x80
 8001676:	0049      	lsls	r1, r1, #1
 8001678:	430a      	orrs	r2, r1
 800167a:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001680:	2b00      	cmp	r3, #0
 8001682:	d008      	beq.n	8001696 <HAL_DMA_Start_IT+0xd6>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001688:	681a      	ldr	r2, [r3, #0]
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800168e:	2180      	movs	r1, #128	@ 0x80
 8001690:	0049      	lsls	r1, r1, #1
 8001692:	430a      	orrs	r2, r1
 8001694:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	2101      	movs	r1, #1
 80016a2:	430a      	orrs	r2, r1
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	e007      	b.n	80016b8 <HAL_DMA_Start_IT+0xf8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016a8:	68fb      	ldr	r3, [r7, #12]
 80016aa:	2224      	movs	r2, #36	@ 0x24
 80016ac:	2100      	movs	r1, #0
 80016ae:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 80016b0:	2317      	movs	r3, #23
 80016b2:	18fb      	adds	r3, r7, r3
 80016b4:	2202      	movs	r2, #2
 80016b6:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdma);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	2224      	movs	r2, #36	@ 0x24
 80016bc:	2100      	movs	r1, #0
 80016be:	5499      	strb	r1, [r3, r2]

  return status;
 80016c0:	2317      	movs	r3, #23
 80016c2:	18fb      	adds	r3, r7, r3
 80016c4:	781b      	ldrb	r3, [r3, #0]
}
 80016c6:	0018      	movs	r0, r3
 80016c8:	46bd      	mov	sp, r7
 80016ca:	b006      	add	sp, #24
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b084      	sub	sp, #16
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = DMA1->ISR;
 80016d8:	4b55      	ldr	r3, [pc, #340]	@ (8001830 <HAL_DMA_IRQHandler+0x160>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	221c      	movs	r2, #28
 80016ec:	4013      	ands	r3, r2
 80016ee:	2204      	movs	r2, #4
 80016f0:	409a      	lsls	r2, r3
 80016f2:	0013      	movs	r3, r2
 80016f4:	68fa      	ldr	r2, [r7, #12]
 80016f6:	4013      	ands	r3, r2
 80016f8:	d027      	beq.n	800174a <HAL_DMA_IRQHandler+0x7a>
 80016fa:	68bb      	ldr	r3, [r7, #8]
 80016fc:	2204      	movs	r2, #4
 80016fe:	4013      	ands	r3, r2
 8001700:	d023      	beq.n	800174a <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	2220      	movs	r2, #32
 800170a:	4013      	ands	r3, r2
 800170c:	d107      	bne.n	800171e <HAL_DMA_IRQHandler+0x4e>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	2104      	movs	r1, #4
 800171a:	438a      	bics	r2, r1
 800171c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)));
 800171e:	4b44      	ldr	r3, [pc, #272]	@ (8001830 <HAL_DMA_IRQHandler+0x160>)
 8001720:	6859      	ldr	r1, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001726:	221c      	movs	r2, #28
 8001728:	4013      	ands	r3, r2
 800172a:	2204      	movs	r2, #4
 800172c:	409a      	lsls	r2, r3
 800172e:	4b40      	ldr	r3, [pc, #256]	@ (8001830 <HAL_DMA_IRQHandler+0x160>)
 8001730:	430a      	orrs	r2, r1
 8001732:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001738:	2b00      	cmp	r3, #0
 800173a:	d100      	bne.n	800173e <HAL_DMA_IRQHandler+0x6e>
 800173c:	e073      	b.n	8001826 <HAL_DMA_IRQHandler+0x156>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	687a      	ldr	r2, [r7, #4]
 8001744:	0010      	movs	r0, r2
 8001746:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8001748:	e06d      	b.n	8001826 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174e:	221c      	movs	r2, #28
 8001750:	4013      	ands	r3, r2
 8001752:	2202      	movs	r2, #2
 8001754:	409a      	lsls	r2, r3
 8001756:	0013      	movs	r3, r2
 8001758:	68fa      	ldr	r2, [r7, #12]
 800175a:	4013      	ands	r3, r2
 800175c:	d02e      	beq.n	80017bc <HAL_DMA_IRQHandler+0xec>
 800175e:	68bb      	ldr	r3, [r7, #8]
 8001760:	2202      	movs	r2, #2
 8001762:	4013      	ands	r3, r2
 8001764:	d02a      	beq.n	80017bc <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	2220      	movs	r2, #32
 800176e:	4013      	ands	r3, r2
 8001770:	d10b      	bne.n	800178a <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	210a      	movs	r1, #10
 800177e:	438a      	bics	r2, r1
 8001780:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2225      	movs	r2, #37	@ 0x25
 8001786:	2101      	movs	r1, #1
 8001788:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)));
 800178a:	4b29      	ldr	r3, [pc, #164]	@ (8001830 <HAL_DMA_IRQHandler+0x160>)
 800178c:	6859      	ldr	r1, [r3, #4]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001792:	221c      	movs	r2, #28
 8001794:	4013      	ands	r3, r2
 8001796:	2202      	movs	r2, #2
 8001798:	409a      	lsls	r2, r3
 800179a:	4b25      	ldr	r3, [pc, #148]	@ (8001830 <HAL_DMA_IRQHandler+0x160>)
 800179c:	430a      	orrs	r2, r1
 800179e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2224      	movs	r2, #36	@ 0x24
 80017a4:	2100      	movs	r1, #0
 80017a6:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d03a      	beq.n	8001826 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	0010      	movs	r0, r2
 80017b8:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80017ba:	e034      	b.n	8001826 <HAL_DMA_IRQHandler+0x156>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU))) != 0U) && ((source_it & DMA_IT_TE) != 0U))
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017c0:	221c      	movs	r2, #28
 80017c2:	4013      	ands	r3, r2
 80017c4:	2208      	movs	r2, #8
 80017c6:	409a      	lsls	r2, r3
 80017c8:	0013      	movs	r3, r2
 80017ca:	68fa      	ldr	r2, [r7, #12]
 80017cc:	4013      	ands	r3, r2
 80017ce:	d02b      	beq.n	8001828 <HAL_DMA_IRQHandler+0x158>
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	2208      	movs	r2, #8
 80017d4:	4013      	ands	r3, r2
 80017d6:	d027      	beq.n	8001828 <HAL_DMA_IRQHandler+0x158>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	681a      	ldr	r2, [r3, #0]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	210e      	movs	r1, #14
 80017e4:	438a      	bics	r2, r1
 80017e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 80017e8:	4b11      	ldr	r3, [pc, #68]	@ (8001830 <HAL_DMA_IRQHandler+0x160>)
 80017ea:	6859      	ldr	r1, [r3, #4]
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017f0:	221c      	movs	r2, #28
 80017f2:	4013      	ands	r3, r2
 80017f4:	2201      	movs	r2, #1
 80017f6:	409a      	lsls	r2, r3
 80017f8:	4b0d      	ldr	r3, [pc, #52]	@ (8001830 <HAL_DMA_IRQHandler+0x160>)
 80017fa:	430a      	orrs	r2, r1
 80017fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2201      	movs	r2, #1
 8001802:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2225      	movs	r2, #37	@ 0x25
 8001808:	2101      	movs	r1, #1
 800180a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2224      	movs	r2, #36	@ 0x24
 8001810:	2100      	movs	r1, #0
 8001812:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001818:	2b00      	cmp	r3, #0
 800181a:	d005      	beq.n	8001828 <HAL_DMA_IRQHandler+0x158>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001820:	687a      	ldr	r2, [r7, #4]
 8001822:	0010      	movs	r0, r2
 8001824:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8001826:	46c0      	nop			@ (mov r8, r8)
 8001828:	46c0      	nop			@ (mov r8, r8)
}
 800182a:	46bd      	mov	sp, r7
 800182c:	b004      	add	sp, #16
 800182e:	bd80      	pop	{r7, pc}
 8001830:	40020000 	.word	0x40020000

08001834 <DMA_SetConfig>:
  * @param DstAddress The destination memory Buffer address
  * @param DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b084      	sub	sp, #16
 8001838:	af00      	add	r7, sp, #0
 800183a:	60f8      	str	r0, [r7, #12]
 800183c:	60b9      	str	r1, [r7, #8]
 800183e:	607a      	str	r2, [r7, #4]
 8001840:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001846:	68fa      	ldr	r2, [r7, #12]
 8001848:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800184a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001850:	2b00      	cmp	r3, #0
 8001852:	d004      	beq.n	800185e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001858:	68fa      	ldr	r2, [r7, #12]
 800185a:	6d92      	ldr	r2, [r2, #88]	@ 0x58
 800185c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  __HAL_DMA_CLEAR_FLAG(hdma, (DMA_FLAG_GI1 << (hdma->ChannelIndex & 0x1cU)));
 800185e:	4b14      	ldr	r3, [pc, #80]	@ (80018b0 <DMA_SetConfig+0x7c>)
 8001860:	6859      	ldr	r1, [r3, #4]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001866:	221c      	movs	r2, #28
 8001868:	4013      	ands	r3, r2
 800186a:	2201      	movs	r2, #1
 800186c:	409a      	lsls	r2, r3
 800186e:	4b10      	ldr	r3, [pc, #64]	@ (80018b0 <DMA_SetConfig+0x7c>)
 8001870:	430a      	orrs	r2, r1
 8001872:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001874:	68fb      	ldr	r3, [r7, #12]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	683a      	ldr	r2, [r7, #0]
 800187a:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	2b10      	cmp	r3, #16
 8001882:	d108      	bne.n	8001896 <DMA_SetConfig+0x62>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	687a      	ldr	r2, [r7, #4]
 800188a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	68ba      	ldr	r2, [r7, #8]
 8001892:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001894:	e007      	b.n	80018a6 <DMA_SetConfig+0x72>
    hdma->Instance->CPAR = SrcAddress;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	68ba      	ldr	r2, [r7, #8]
 800189c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	687a      	ldr	r2, [r7, #4]
 80018a4:	60da      	str	r2, [r3, #12]
}
 80018a6:	46c0      	nop			@ (mov r8, r8)
 80018a8:	46bd      	mov	sp, r7
 80018aa:	b004      	add	sp, #16
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	46c0      	nop			@ (mov r8, r8)
 80018b0:	40020000 	.word	0x40020000

080018b4 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  uint32_t channel_number;

  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	001a      	movs	r2, r3
 80018c2:	23ff      	movs	r3, #255	@ 0xff
 80018c4:	4013      	ands	r3, r2
 80018c6:	3b08      	subs	r3, #8
 80018c8:	2114      	movs	r1, #20
 80018ca:	0018      	movs	r0, r3
 80018cc:	f7fe fc1c 	bl	8000108 <__udivsi3>
 80018d0:	0003      	movs	r3, r0
 80018d2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
                                                             ((hdma->ChannelIndex >> 2U) * \
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d8:	089b      	lsrs	r3, r3, #2
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + \
 80018da:	4a0a      	ldr	r2, [pc, #40]	@ (8001904 <DMA_CalcDMAMUXChannelBaseAndMask+0x50>)
 80018dc:	4694      	mov	ip, r2
 80018de:	4463      	add	r3, ip
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	001a      	movs	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	645a      	str	r2, [r3, #68]	@ 0x44
                                                              ((uint32_t)DMAMUX1_Channel1 - \
                                                               (uint32_t)DMAMUX1_Channel0)));
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a07      	ldr	r2, [pc, #28]	@ (8001908 <DMA_CalcDMAMUXChannelBaseAndMask+0x54>)
 80018ec:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1cU);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	221c      	movs	r2, #28
 80018f2:	4013      	ands	r3, r2
 80018f4:	2201      	movs	r2, #1
 80018f6:	409a      	lsls	r2, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	64da      	str	r2, [r3, #76]	@ 0x4c
}
 80018fc:	46c0      	nop			@ (mov r8, r8)
 80018fe:	46bd      	mov	sp, r7
 8001900:	b004      	add	sp, #16
 8001902:	bd80      	pop	{r7, pc}
 8001904:	10008200 	.word	0x10008200
 8001908:	40020880 	.word	0x40020880

0800190c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b084      	sub	sp, #16
 8001910:	af00      	add	r7, sp, #0
 8001912:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	685b      	ldr	r3, [r3, #4]
 8001918:	22ff      	movs	r2, #255	@ 0xff
 800191a:	4013      	ands	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + \
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	4a0a      	ldr	r2, [pc, #40]	@ (800194c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8001922:	4694      	mov	ip, r2
 8001924:	4463      	add	r3, ip
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	001a      	movs	r2, r3
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	651a      	str	r2, [r3, #80]	@ 0x50
                                                                    ((request - 1U) * 4U)));

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4a07      	ldr	r2, [pc, #28]	@ (8001950 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8001932:	655a      	str	r2, [r3, #84]	@ 0x54

  /* here "Request" is either DMA_REQUEST_GENERATOR0 to 4, i.e. <= 4*/
  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x3U);
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	3b01      	subs	r3, #1
 8001938:	2203      	movs	r2, #3
 800193a:	4013      	ands	r3, r2
 800193c:	2201      	movs	r2, #1
 800193e:	409a      	lsls	r2, r3
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	659a      	str	r2, [r3, #88]	@ 0x58
}
 8001944:	46c0      	nop			@ (mov r8, r8)
 8001946:	46bd      	mov	sp, r7
 8001948:	b004      	add	sp, #16
 800194a:	bd80      	pop	{r7, pc}
 800194c:	1000823f 	.word	0x1000823f
 8001950:	40020940 	.word	0x40020940

08001954 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800195e:	2300      	movs	r3, #0
 8001960:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001962:	e14d      	b.n	8001c00 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	2101      	movs	r1, #1
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	4091      	lsls	r1, r2
 800196e:	000a      	movs	r2, r1
 8001970:	4013      	ands	r3, r2
 8001972:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2b00      	cmp	r3, #0
 8001978:	d100      	bne.n	800197c <HAL_GPIO_Init+0x28>
 800197a:	e13e      	b.n	8001bfa <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800197c:	683b      	ldr	r3, [r7, #0]
 800197e:	685b      	ldr	r3, [r3, #4]
 8001980:	2b02      	cmp	r3, #2
 8001982:	d003      	beq.n	800198c <HAL_GPIO_Init+0x38>
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	2b12      	cmp	r3, #18
 800198a:	d125      	bne.n	80019d8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	08da      	lsrs	r2, r3, #3
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	3208      	adds	r2, #8
 8001994:	0092      	lsls	r2, r2, #2
 8001996:	58d3      	ldr	r3, [r2, r3]
 8001998:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800199a:	693b      	ldr	r3, [r7, #16]
 800199c:	2207      	movs	r2, #7
 800199e:	4013      	ands	r3, r2
 80019a0:	009b      	lsls	r3, r3, #2
 80019a2:	220f      	movs	r2, #15
 80019a4:	409a      	lsls	r2, r3
 80019a6:	0013      	movs	r3, r2
 80019a8:	43da      	mvns	r2, r3
 80019aa:	697b      	ldr	r3, [r7, #20]
 80019ac:	4013      	ands	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 80019b0:	683b      	ldr	r3, [r7, #0]
 80019b2:	691b      	ldr	r3, [r3, #16]
 80019b4:	220f      	movs	r2, #15
 80019b6:	401a      	ands	r2, r3
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	2107      	movs	r1, #7
 80019bc:	400b      	ands	r3, r1
 80019be:	009b      	lsls	r3, r3, #2
 80019c0:	409a      	lsls	r2, r3
 80019c2:	0013      	movs	r3, r2
 80019c4:	697a      	ldr	r2, [r7, #20]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	08da      	lsrs	r2, r3, #3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	3208      	adds	r2, #8
 80019d2:	0092      	lsls	r2, r2, #2
 80019d4:	6979      	ldr	r1, [r7, #20]
 80019d6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	005b      	lsls	r3, r3, #1
 80019e2:	2203      	movs	r2, #3
 80019e4:	409a      	lsls	r2, r3
 80019e6:	0013      	movs	r3, r2
 80019e8:	43da      	mvns	r2, r3
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	4013      	ands	r3, r2
 80019ee:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80019f0:	683b      	ldr	r3, [r7, #0]
 80019f2:	685b      	ldr	r3, [r3, #4]
 80019f4:	2203      	movs	r2, #3
 80019f6:	401a      	ands	r2, r3
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	005b      	lsls	r3, r3, #1
 80019fc:	409a      	lsls	r2, r3
 80019fe:	0013      	movs	r3, r2
 8001a00:	697a      	ldr	r2, [r7, #20]
 8001a02:	4313      	orrs	r3, r2
 8001a04:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	697a      	ldr	r2, [r7, #20]
 8001a0a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	685b      	ldr	r3, [r3, #4]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d00b      	beq.n	8001a2c <HAL_GPIO_Init+0xd8>
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	2b02      	cmp	r3, #2
 8001a1a:	d007      	beq.n	8001a2c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a20:	2b11      	cmp	r3, #17
 8001a22:	d003      	beq.n	8001a2c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	685b      	ldr	r3, [r3, #4]
 8001a28:	2b12      	cmp	r3, #18
 8001a2a:	d130      	bne.n	8001a8e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	005b      	lsls	r3, r3, #1
 8001a36:	2203      	movs	r2, #3
 8001a38:	409a      	lsls	r2, r3
 8001a3a:	0013      	movs	r3, r2
 8001a3c:	43da      	mvns	r2, r3
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	4013      	ands	r3, r2
 8001a42:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	409a      	lsls	r2, r3
 8001a4e:	0013      	movs	r3, r2
 8001a50:	697a      	ldr	r2, [r7, #20]
 8001a52:	4313      	orrs	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	697a      	ldr	r2, [r7, #20]
 8001a5a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	685b      	ldr	r3, [r3, #4]
 8001a60:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a62:	2201      	movs	r2, #1
 8001a64:	693b      	ldr	r3, [r7, #16]
 8001a66:	409a      	lsls	r2, r3
 8001a68:	0013      	movs	r3, r2
 8001a6a:	43da      	mvns	r2, r3
 8001a6c:	697b      	ldr	r3, [r7, #20]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001a72:	683b      	ldr	r3, [r7, #0]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	2201      	movs	r2, #1
 8001a7a:	401a      	ands	r2, r3
 8001a7c:	693b      	ldr	r3, [r7, #16]
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	0013      	movs	r3, r2
 8001a82:	697a      	ldr	r2, [r7, #20]
 8001a84:	4313      	orrs	r3, r2
 8001a86:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	697a      	ldr	r2, [r7, #20]
 8001a8c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001a8e:	683b      	ldr	r3, [r7, #0]
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	2b03      	cmp	r3, #3
 8001a94:	d017      	beq.n	8001ac6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	68db      	ldr	r3, [r3, #12]
 8001a9a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8001a9c:	693b      	ldr	r3, [r7, #16]
 8001a9e:	005b      	lsls	r3, r3, #1
 8001aa0:	2203      	movs	r2, #3
 8001aa2:	409a      	lsls	r2, r3
 8001aa4:	0013      	movs	r3, r2
 8001aa6:	43da      	mvns	r2, r3
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	4013      	ands	r3, r2
 8001aac:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8001aae:	683b      	ldr	r3, [r7, #0]
 8001ab0:	689a      	ldr	r2, [r3, #8]
 8001ab2:	693b      	ldr	r3, [r7, #16]
 8001ab4:	005b      	lsls	r3, r3, #1
 8001ab6:	409a      	lsls	r2, r3
 8001ab8:	0013      	movs	r3, r2
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	697a      	ldr	r2, [r7, #20]
 8001ac4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001ac6:	683b      	ldr	r3, [r7, #0]
 8001ac8:	685a      	ldr	r2, [r3, #4]
 8001aca:	2380      	movs	r3, #128	@ 0x80
 8001acc:	055b      	lsls	r3, r3, #21
 8001ace:	4013      	ands	r3, r2
 8001ad0:	d100      	bne.n	8001ad4 <HAL_GPIO_Init+0x180>
 8001ad2:	e092      	b.n	8001bfa <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001ad4:	4a50      	ldr	r2, [pc, #320]	@ (8001c18 <HAL_GPIO_Init+0x2c4>)
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	089b      	lsrs	r3, r3, #2
 8001ada:	3318      	adds	r3, #24
 8001adc:	009b      	lsls	r3, r3, #2
 8001ade:	589b      	ldr	r3, [r3, r2]
 8001ae0:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	2203      	movs	r2, #3
 8001ae6:	4013      	ands	r3, r2
 8001ae8:	00db      	lsls	r3, r3, #3
 8001aea:	220f      	movs	r2, #15
 8001aec:	409a      	lsls	r2, r3
 8001aee:	0013      	movs	r3, r2
 8001af0:	43da      	mvns	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	4013      	ands	r3, r2
 8001af6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001af8:	687a      	ldr	r2, [r7, #4]
 8001afa:	23a0      	movs	r3, #160	@ 0xa0
 8001afc:	05db      	lsls	r3, r3, #23
 8001afe:	429a      	cmp	r2, r3
 8001b00:	d013      	beq.n	8001b2a <HAL_GPIO_Init+0x1d6>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a45      	ldr	r2, [pc, #276]	@ (8001c1c <HAL_GPIO_Init+0x2c8>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00d      	beq.n	8001b26 <HAL_GPIO_Init+0x1d2>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a44      	ldr	r2, [pc, #272]	@ (8001c20 <HAL_GPIO_Init+0x2cc>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d007      	beq.n	8001b22 <HAL_GPIO_Init+0x1ce>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a43      	ldr	r2, [pc, #268]	@ (8001c24 <HAL_GPIO_Init+0x2d0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d101      	bne.n	8001b1e <HAL_GPIO_Init+0x1ca>
 8001b1a:	2305      	movs	r3, #5
 8001b1c:	e006      	b.n	8001b2c <HAL_GPIO_Init+0x1d8>
 8001b1e:	2306      	movs	r3, #6
 8001b20:	e004      	b.n	8001b2c <HAL_GPIO_Init+0x1d8>
 8001b22:	2302      	movs	r3, #2
 8001b24:	e002      	b.n	8001b2c <HAL_GPIO_Init+0x1d8>
 8001b26:	2301      	movs	r3, #1
 8001b28:	e000      	b.n	8001b2c <HAL_GPIO_Init+0x1d8>
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	693a      	ldr	r2, [r7, #16]
 8001b2e:	2103      	movs	r1, #3
 8001b30:	400a      	ands	r2, r1
 8001b32:	00d2      	lsls	r2, r2, #3
 8001b34:	4093      	lsls	r3, r2
 8001b36:	697a      	ldr	r2, [r7, #20]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001b3c:	4936      	ldr	r1, [pc, #216]	@ (8001c18 <HAL_GPIO_Init+0x2c4>)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	089b      	lsrs	r3, r3, #2
 8001b42:	3318      	adds	r3, #24
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	697a      	ldr	r2, [r7, #20]
 8001b48:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001b4a:	4a33      	ldr	r2, [pc, #204]	@ (8001c18 <HAL_GPIO_Init+0x2c4>)
 8001b4c:	2380      	movs	r3, #128	@ 0x80
 8001b4e:	58d3      	ldr	r3, [r2, r3]
 8001b50:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	43da      	mvns	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	2380      	movs	r3, #128	@ 0x80
 8001b62:	025b      	lsls	r3, r3, #9
 8001b64:	4013      	ands	r3, r2
 8001b66:	d003      	beq.n	8001b70 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001b68:	697a      	ldr	r2, [r7, #20]
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	4313      	orrs	r3, r2
 8001b6e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001b70:	4929      	ldr	r1, [pc, #164]	@ (8001c18 <HAL_GPIO_Init+0x2c4>)
 8001b72:	2280      	movs	r2, #128	@ 0x80
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001b78:	4a27      	ldr	r2, [pc, #156]	@ (8001c18 <HAL_GPIO_Init+0x2c4>)
 8001b7a:	2384      	movs	r3, #132	@ 0x84
 8001b7c:	58d3      	ldr	r3, [r2, r3]
 8001b7e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	43da      	mvns	r2, r3
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	4013      	ands	r3, r2
 8001b88:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685a      	ldr	r2, [r3, #4]
 8001b8e:	2380      	movs	r3, #128	@ 0x80
 8001b90:	029b      	lsls	r3, r3, #10
 8001b92:	4013      	ands	r3, r2
 8001b94:	d003      	beq.n	8001b9e <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001b96:	697a      	ldr	r2, [r7, #20]
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	4313      	orrs	r3, r2
 8001b9c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001b9e:	491e      	ldr	r1, [pc, #120]	@ (8001c18 <HAL_GPIO_Init+0x2c4>)
 8001ba0:	2284      	movs	r2, #132	@ 0x84
 8001ba2:	697b      	ldr	r3, [r7, #20]
 8001ba4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8001c18 <HAL_GPIO_Init+0x2c4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	43da      	mvns	r2, r3
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685a      	ldr	r2, [r3, #4]
 8001bba:	2380      	movs	r3, #128	@ 0x80
 8001bbc:	035b      	lsls	r3, r3, #13
 8001bbe:	4013      	ands	r3, r2
 8001bc0:	d003      	beq.n	8001bca <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001bc2:	697a      	ldr	r2, [r7, #20]
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	4313      	orrs	r3, r2
 8001bc8:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001bca:	4b13      	ldr	r3, [pc, #76]	@ (8001c18 <HAL_GPIO_Init+0x2c4>)
 8001bcc:	697a      	ldr	r2, [r7, #20]
 8001bce:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001bd0:	4b11      	ldr	r3, [pc, #68]	@ (8001c18 <HAL_GPIO_Init+0x2c4>)
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	43da      	mvns	r2, r3
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	4013      	ands	r3, r2
 8001bde:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685a      	ldr	r2, [r3, #4]
 8001be4:	2380      	movs	r3, #128	@ 0x80
 8001be6:	039b      	lsls	r3, r3, #14
 8001be8:	4013      	ands	r3, r2
 8001bea:	d003      	beq.n	8001bf4 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001bec:	697a      	ldr	r2, [r7, #20]
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	4313      	orrs	r3, r2
 8001bf2:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001bf4:	4b08      	ldr	r3, [pc, #32]	@ (8001c18 <HAL_GPIO_Init+0x2c4>)
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	3301      	adds	r3, #1
 8001bfe:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c00:	683b      	ldr	r3, [r7, #0]
 8001c02:	681a      	ldr	r2, [r3, #0]
 8001c04:	693b      	ldr	r3, [r7, #16]
 8001c06:	40da      	lsrs	r2, r3
 8001c08:	1e13      	subs	r3, r2, #0
 8001c0a:	d000      	beq.n	8001c0e <HAL_GPIO_Init+0x2ba>
 8001c0c:	e6aa      	b.n	8001964 <HAL_GPIO_Init+0x10>
  }
}
 8001c0e:	46c0      	nop			@ (mov r8, r8)
 8001c10:	46c0      	nop			@ (mov r8, r8)
 8001c12:	46bd      	mov	sp, r7
 8001c14:	b006      	add	sp, #24
 8001c16:	bd80      	pop	{r7, pc}
 8001c18:	40021800 	.word	0x40021800
 8001c1c:	50000400 	.word	0x50000400
 8001c20:	50000800 	.word	0x50000800
 8001c24:	50001400 	.word	0x50001400

08001c28 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b086      	sub	sp, #24
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d101      	bne.n	8001c3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e1d0      	b.n	8001fdc <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	2201      	movs	r2, #1
 8001c40:	4013      	ands	r3, r2
 8001c42:	d100      	bne.n	8001c46 <HAL_RCC_OscConfig+0x1e>
 8001c44:	e069      	b.n	8001d1a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c46:	4bc8      	ldr	r3, [pc, #800]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	2238      	movs	r2, #56	@ 0x38
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2b08      	cmp	r3, #8
 8001c54:	d105      	bne.n	8001c62 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d15d      	bne.n	8001d1a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e1bc      	b.n	8001fdc <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	685a      	ldr	r2, [r3, #4]
 8001c66:	2380      	movs	r3, #128	@ 0x80
 8001c68:	025b      	lsls	r3, r3, #9
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d107      	bne.n	8001c7e <HAL_RCC_OscConfig+0x56>
 8001c6e:	4bbe      	ldr	r3, [pc, #760]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001c70:	681a      	ldr	r2, [r3, #0]
 8001c72:	4bbd      	ldr	r3, [pc, #756]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001c74:	2180      	movs	r1, #128	@ 0x80
 8001c76:	0249      	lsls	r1, r1, #9
 8001c78:	430a      	orrs	r2, r1
 8001c7a:	601a      	str	r2, [r3, #0]
 8001c7c:	e020      	b.n	8001cc0 <HAL_RCC_OscConfig+0x98>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685a      	ldr	r2, [r3, #4]
 8001c82:	23a0      	movs	r3, #160	@ 0xa0
 8001c84:	02db      	lsls	r3, r3, #11
 8001c86:	429a      	cmp	r2, r3
 8001c88:	d10e      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x80>
 8001c8a:	4bb7      	ldr	r3, [pc, #732]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	4bb6      	ldr	r3, [pc, #728]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001c90:	2180      	movs	r1, #128	@ 0x80
 8001c92:	02c9      	lsls	r1, r1, #11
 8001c94:	430a      	orrs	r2, r1
 8001c96:	601a      	str	r2, [r3, #0]
 8001c98:	4bb3      	ldr	r3, [pc, #716]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001c9a:	681a      	ldr	r2, [r3, #0]
 8001c9c:	4bb2      	ldr	r3, [pc, #712]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001c9e:	2180      	movs	r1, #128	@ 0x80
 8001ca0:	0249      	lsls	r1, r1, #9
 8001ca2:	430a      	orrs	r2, r1
 8001ca4:	601a      	str	r2, [r3, #0]
 8001ca6:	e00b      	b.n	8001cc0 <HAL_RCC_OscConfig+0x98>
 8001ca8:	4baf      	ldr	r3, [pc, #700]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	4bae      	ldr	r3, [pc, #696]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001cae:	49af      	ldr	r1, [pc, #700]	@ (8001f6c <HAL_RCC_OscConfig+0x344>)
 8001cb0:	400a      	ands	r2, r1
 8001cb2:	601a      	str	r2, [r3, #0]
 8001cb4:	4bac      	ldr	r3, [pc, #688]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001cb6:	681a      	ldr	r2, [r3, #0]
 8001cb8:	4bab      	ldr	r3, [pc, #684]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001cba:	49ad      	ldr	r1, [pc, #692]	@ (8001f70 <HAL_RCC_OscConfig+0x348>)
 8001cbc:	400a      	ands	r2, r1
 8001cbe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	d014      	beq.n	8001cf2 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cc8:	f7ff faec 	bl	80012a4 <HAL_GetTick>
 8001ccc:	0003      	movs	r3, r0
 8001cce:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001cd2:	f7ff fae7 	bl	80012a4 <HAL_GetTick>
 8001cd6:	0002      	movs	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b64      	cmp	r3, #100	@ 0x64
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e17b      	b.n	8001fdc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ce4:	4ba0      	ldr	r3, [pc, #640]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	2380      	movs	r3, #128	@ 0x80
 8001cea:	029b      	lsls	r3, r3, #10
 8001cec:	4013      	ands	r3, r2
 8001cee:	d0f0      	beq.n	8001cd2 <HAL_RCC_OscConfig+0xaa>
 8001cf0:	e013      	b.n	8001d1a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf2:	f7ff fad7 	bl	80012a4 <HAL_GetTick>
 8001cf6:	0003      	movs	r3, r0
 8001cf8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001cfa:	e008      	b.n	8001d0e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001cfc:	f7ff fad2 	bl	80012a4 <HAL_GetTick>
 8001d00:	0002      	movs	r2, r0
 8001d02:	693b      	ldr	r3, [r7, #16]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	2b64      	cmp	r3, #100	@ 0x64
 8001d08:	d901      	bls.n	8001d0e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001d0a:	2303      	movs	r3, #3
 8001d0c:	e166      	b.n	8001fdc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d0e:	4b96      	ldr	r3, [pc, #600]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	2380      	movs	r3, #128	@ 0x80
 8001d14:	029b      	lsls	r3, r3, #10
 8001d16:	4013      	ands	r3, r2
 8001d18:	d1f0      	bne.n	8001cfc <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	2202      	movs	r2, #2
 8001d20:	4013      	ands	r3, r2
 8001d22:	d100      	bne.n	8001d26 <HAL_RCC_OscConfig+0xfe>
 8001d24:	e086      	b.n	8001e34 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d26:	4b90      	ldr	r3, [pc, #576]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	2238      	movs	r2, #56	@ 0x38
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001d30:	697b      	ldr	r3, [r7, #20]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d12f      	bne.n	8001d96 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e14c      	b.n	8001fdc <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d42:	4b89      	ldr	r3, [pc, #548]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	4a8b      	ldr	r2, [pc, #556]	@ (8001f74 <HAL_RCC_OscConfig+0x34c>)
 8001d48:	4013      	ands	r3, r2
 8001d4a:	0019      	movs	r1, r3
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	695b      	ldr	r3, [r3, #20]
 8001d50:	021a      	lsls	r2, r3, #8
 8001d52:	4b85      	ldr	r3, [pc, #532]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001d54:	430a      	orrs	r2, r1
 8001d56:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d112      	bne.n	8001d84 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d5e:	4b82      	ldr	r3, [pc, #520]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	4a85      	ldr	r2, [pc, #532]	@ (8001f78 <HAL_RCC_OscConfig+0x350>)
 8001d64:	4013      	ands	r3, r2
 8001d66:	0019      	movs	r1, r3
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	691a      	ldr	r2, [r3, #16]
 8001d6c:	4b7e      	ldr	r3, [pc, #504]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001d72:	4b7d      	ldr	r3, [pc, #500]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001d74:	681b      	ldr	r3, [r3, #0]
 8001d76:	0adb      	lsrs	r3, r3, #11
 8001d78:	2207      	movs	r2, #7
 8001d7a:	4013      	ands	r3, r2
 8001d7c:	4a7f      	ldr	r2, [pc, #508]	@ (8001f7c <HAL_RCC_OscConfig+0x354>)
 8001d7e:	40da      	lsrs	r2, r3
 8001d80:	4b7f      	ldr	r3, [pc, #508]	@ (8001f80 <HAL_RCC_OscConfig+0x358>)
 8001d82:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001d84:	4b7f      	ldr	r3, [pc, #508]	@ (8001f84 <HAL_RCC_OscConfig+0x35c>)
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	0018      	movs	r0, r3
 8001d8a:	f7ff fa2f 	bl	80011ec <HAL_InitTick>
 8001d8e:	1e03      	subs	r3, r0, #0
 8001d90:	d050      	beq.n	8001e34 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e122      	b.n	8001fdc <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d030      	beq.n	8001e00 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001d9e:	4b72      	ldr	r3, [pc, #456]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	4a75      	ldr	r2, [pc, #468]	@ (8001f78 <HAL_RCC_OscConfig+0x350>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	0019      	movs	r1, r3
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	691a      	ldr	r2, [r3, #16]
 8001dac:	4b6e      	ldr	r3, [pc, #440]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001dae:	430a      	orrs	r2, r1
 8001db0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001db2:	4b6d      	ldr	r3, [pc, #436]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001db4:	681a      	ldr	r2, [r3, #0]
 8001db6:	4b6c      	ldr	r3, [pc, #432]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001db8:	2180      	movs	r1, #128	@ 0x80
 8001dba:	0049      	lsls	r1, r1, #1
 8001dbc:	430a      	orrs	r2, r1
 8001dbe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc0:	f7ff fa70 	bl	80012a4 <HAL_GetTick>
 8001dc4:	0003      	movs	r3, r0
 8001dc6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dc8:	e008      	b.n	8001ddc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001dca:	f7ff fa6b 	bl	80012a4 <HAL_GetTick>
 8001dce:	0002      	movs	r2, r0
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	1ad3      	subs	r3, r2, r3
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d901      	bls.n	8001ddc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	e0ff      	b.n	8001fdc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ddc:	4b62      	ldr	r3, [pc, #392]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001dde:	681a      	ldr	r2, [r3, #0]
 8001de0:	2380      	movs	r3, #128	@ 0x80
 8001de2:	00db      	lsls	r3, r3, #3
 8001de4:	4013      	ands	r3, r2
 8001de6:	d0f0      	beq.n	8001dca <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de8:	4b5f      	ldr	r3, [pc, #380]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	4a61      	ldr	r2, [pc, #388]	@ (8001f74 <HAL_RCC_OscConfig+0x34c>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	0019      	movs	r1, r3
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	695b      	ldr	r3, [r3, #20]
 8001df6:	021a      	lsls	r2, r3, #8
 8001df8:	4b5b      	ldr	r3, [pc, #364]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001dfa:	430a      	orrs	r2, r1
 8001dfc:	605a      	str	r2, [r3, #4]
 8001dfe:	e019      	b.n	8001e34 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001e00:	4b59      	ldr	r3, [pc, #356]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001e02:	681a      	ldr	r2, [r3, #0]
 8001e04:	4b58      	ldr	r3, [pc, #352]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001e06:	4960      	ldr	r1, [pc, #384]	@ (8001f88 <HAL_RCC_OscConfig+0x360>)
 8001e08:	400a      	ands	r2, r1
 8001e0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0c:	f7ff fa4a 	bl	80012a4 <HAL_GetTick>
 8001e10:	0003      	movs	r3, r0
 8001e12:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001e16:	f7ff fa45 	bl	80012a4 <HAL_GetTick>
 8001e1a:	0002      	movs	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e0d9      	b.n	8001fdc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e28:	4b4f      	ldr	r3, [pc, #316]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	2380      	movs	r3, #128	@ 0x80
 8001e2e:	00db      	lsls	r3, r3, #3
 8001e30:	4013      	ands	r3, r2
 8001e32:	d1f0      	bne.n	8001e16 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	2208      	movs	r2, #8
 8001e3a:	4013      	ands	r3, r2
 8001e3c:	d042      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001e3e:	4b4a      	ldr	r3, [pc, #296]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001e40:	689b      	ldr	r3, [r3, #8]
 8001e42:	2238      	movs	r2, #56	@ 0x38
 8001e44:	4013      	ands	r3, r2
 8001e46:	2b18      	cmp	r3, #24
 8001e48:	d105      	bne.n	8001e56 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d138      	bne.n	8001ec4 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0c2      	b.n	8001fdc <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d019      	beq.n	8001e92 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001e5e:	4b42      	ldr	r3, [pc, #264]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001e60:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e62:	4b41      	ldr	r3, [pc, #260]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001e64:	2101      	movs	r1, #1
 8001e66:	430a      	orrs	r2, r1
 8001e68:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e6a:	f7ff fa1b 	bl	80012a4 <HAL_GetTick>
 8001e6e:	0003      	movs	r3, r0
 8001e70:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001e72:	e008      	b.n	8001e86 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001e74:	f7ff fa16 	bl	80012a4 <HAL_GetTick>
 8001e78:	0002      	movs	r2, r0
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	2b02      	cmp	r3, #2
 8001e80:	d901      	bls.n	8001e86 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001e82:	2303      	movs	r3, #3
 8001e84:	e0aa      	b.n	8001fdc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001e86:	4b38      	ldr	r3, [pc, #224]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001e88:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001e8a:	2202      	movs	r2, #2
 8001e8c:	4013      	ands	r3, r2
 8001e8e:	d0f1      	beq.n	8001e74 <HAL_RCC_OscConfig+0x24c>
 8001e90:	e018      	b.n	8001ec4 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001e92:	4b35      	ldr	r3, [pc, #212]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001e94:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001e96:	4b34      	ldr	r3, [pc, #208]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001e98:	2101      	movs	r1, #1
 8001e9a:	438a      	bics	r2, r1
 8001e9c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e9e:	f7ff fa01 	bl	80012a4 <HAL_GetTick>
 8001ea2:	0003      	movs	r3, r0
 8001ea4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001ea8:	f7ff f9fc 	bl	80012a4 <HAL_GetTick>
 8001eac:	0002      	movs	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e090      	b.n	8001fdc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001eba:	4b2b      	ldr	r3, [pc, #172]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001ebe:	2202      	movs	r2, #2
 8001ec0:	4013      	ands	r3, r2
 8001ec2:	d1f1      	bne.n	8001ea8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	2204      	movs	r2, #4
 8001eca:	4013      	ands	r3, r2
 8001ecc:	d100      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x2a8>
 8001ece:	e084      	b.n	8001fda <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed0:	230f      	movs	r3, #15
 8001ed2:	18fb      	adds	r3, r7, r3
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001ed8:	4b23      	ldr	r3, [pc, #140]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001eda:	689b      	ldr	r3, [r3, #8]
 8001edc:	2238      	movs	r2, #56	@ 0x38
 8001ede:	4013      	ands	r3, r2
 8001ee0:	2b20      	cmp	r3, #32
 8001ee2:	d106      	bne.n	8001ef2 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d000      	beq.n	8001eee <HAL_RCC_OscConfig+0x2c6>
 8001eec:	e075      	b.n	8001fda <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e074      	b.n	8001fdc <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	689b      	ldr	r3, [r3, #8]
 8001ef6:	2b01      	cmp	r3, #1
 8001ef8:	d106      	bne.n	8001f08 <HAL_RCC_OscConfig+0x2e0>
 8001efa:	4b1b      	ldr	r3, [pc, #108]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001efc:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001efe:	4b1a      	ldr	r3, [pc, #104]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001f00:	2101      	movs	r1, #1
 8001f02:	430a      	orrs	r2, r1
 8001f04:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f06:	e01c      	b.n	8001f42 <HAL_RCC_OscConfig+0x31a>
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	2b05      	cmp	r3, #5
 8001f0e:	d10c      	bne.n	8001f2a <HAL_RCC_OscConfig+0x302>
 8001f10:	4b15      	ldr	r3, [pc, #84]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001f12:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f14:	4b14      	ldr	r3, [pc, #80]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001f16:	2104      	movs	r1, #4
 8001f18:	430a      	orrs	r2, r1
 8001f1a:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f1c:	4b12      	ldr	r3, [pc, #72]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001f1e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f20:	4b11      	ldr	r3, [pc, #68]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001f22:	2101      	movs	r1, #1
 8001f24:	430a      	orrs	r2, r1
 8001f26:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f28:	e00b      	b.n	8001f42 <HAL_RCC_OscConfig+0x31a>
 8001f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001f2c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f2e:	4b0e      	ldr	r3, [pc, #56]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001f30:	2101      	movs	r1, #1
 8001f32:	438a      	bics	r2, r1
 8001f34:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001f36:	4b0c      	ldr	r3, [pc, #48]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001f38:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8001f68 <HAL_RCC_OscConfig+0x340>)
 8001f3c:	2104      	movs	r1, #4
 8001f3e:	438a      	bics	r2, r1
 8001f40:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d028      	beq.n	8001f9c <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f4a:	f7ff f9ab 	bl	80012a4 <HAL_GetTick>
 8001f4e:	0003      	movs	r3, r0
 8001f50:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f52:	e01d      	b.n	8001f90 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001f54:	f7ff f9a6 	bl	80012a4 <HAL_GetTick>
 8001f58:	0002      	movs	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	4a0b      	ldr	r2, [pc, #44]	@ (8001f8c <HAL_RCC_OscConfig+0x364>)
 8001f60:	4293      	cmp	r3, r2
 8001f62:	d915      	bls.n	8001f90 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001f64:	2303      	movs	r3, #3
 8001f66:	e039      	b.n	8001fdc <HAL_RCC_OscConfig+0x3b4>
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	fffeffff 	.word	0xfffeffff
 8001f70:	fffbffff 	.word	0xfffbffff
 8001f74:	ffff80ff 	.word	0xffff80ff
 8001f78:	ffffc7ff 	.word	0xffffc7ff
 8001f7c:	02dc6c00 	.word	0x02dc6c00
 8001f80:	20000000 	.word	0x20000000
 8001f84:	20000004 	.word	0x20000004
 8001f88:	fffffeff 	.word	0xfffffeff
 8001f8c:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001f90:	4b14      	ldr	r3, [pc, #80]	@ (8001fe4 <HAL_RCC_OscConfig+0x3bc>)
 8001f92:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f94:	2202      	movs	r2, #2
 8001f96:	4013      	ands	r3, r2
 8001f98:	d0dc      	beq.n	8001f54 <HAL_RCC_OscConfig+0x32c>
 8001f9a:	e013      	b.n	8001fc4 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7ff f982 	bl	80012a4 <HAL_GetTick>
 8001fa0:	0003      	movs	r3, r0
 8001fa2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001fa4:	e009      	b.n	8001fba <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa6:	f7ff f97d 	bl	80012a4 <HAL_GetTick>
 8001faa:	0002      	movs	r2, r0
 8001fac:	693b      	ldr	r3, [r7, #16]
 8001fae:	1ad3      	subs	r3, r2, r3
 8001fb0:	4a0d      	ldr	r2, [pc, #52]	@ (8001fe8 <HAL_RCC_OscConfig+0x3c0>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d901      	bls.n	8001fba <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	e010      	b.n	8001fdc <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001fba:	4b0a      	ldr	r3, [pc, #40]	@ (8001fe4 <HAL_RCC_OscConfig+0x3bc>)
 8001fbc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	4013      	ands	r3, r2
 8001fc2:	d1f0      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001fc4:	230f      	movs	r3, #15
 8001fc6:	18fb      	adds	r3, r7, r3
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d105      	bne.n	8001fda <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001fce:	4b05      	ldr	r3, [pc, #20]	@ (8001fe4 <HAL_RCC_OscConfig+0x3bc>)
 8001fd0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001fd2:	4b04      	ldr	r3, [pc, #16]	@ (8001fe4 <HAL_RCC_OscConfig+0x3bc>)
 8001fd4:	4905      	ldr	r1, [pc, #20]	@ (8001fec <HAL_RCC_OscConfig+0x3c4>)
 8001fd6:	400a      	ands	r2, r1
 8001fd8:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001fda:	2300      	movs	r3, #0
}
 8001fdc:	0018      	movs	r0, r3
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	b006      	add	sp, #24
 8001fe2:	bd80      	pop	{r7, pc}
 8001fe4:	40021000 	.word	0x40021000
 8001fe8:	00001388 	.word	0x00001388
 8001fec:	efffffff 	.word	0xefffffff

08001ff0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b084      	sub	sp, #16
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d101      	bne.n	8002004 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002000:	2301      	movs	r3, #1
 8002002:	e0df      	b.n	80021c4 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002004:	4b71      	ldr	r3, [pc, #452]	@ (80021cc <HAL_RCC_ClockConfig+0x1dc>)
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	2207      	movs	r2, #7
 800200a:	4013      	ands	r3, r2
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	429a      	cmp	r2, r3
 8002010:	d91e      	bls.n	8002050 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002012:	4b6e      	ldr	r3, [pc, #440]	@ (80021cc <HAL_RCC_ClockConfig+0x1dc>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	2207      	movs	r2, #7
 8002018:	4393      	bics	r3, r2
 800201a:	0019      	movs	r1, r3
 800201c:	4b6b      	ldr	r3, [pc, #428]	@ (80021cc <HAL_RCC_ClockConfig+0x1dc>)
 800201e:	683a      	ldr	r2, [r7, #0]
 8002020:	430a      	orrs	r2, r1
 8002022:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002024:	f7ff f93e 	bl	80012a4 <HAL_GetTick>
 8002028:	0003      	movs	r3, r0
 800202a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800202c:	e009      	b.n	8002042 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800202e:	f7ff f939 	bl	80012a4 <HAL_GetTick>
 8002032:	0002      	movs	r2, r0
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	1ad3      	subs	r3, r2, r3
 8002038:	4a65      	ldr	r2, [pc, #404]	@ (80021d0 <HAL_RCC_ClockConfig+0x1e0>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d901      	bls.n	8002042 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800203e:	2303      	movs	r3, #3
 8002040:	e0c0      	b.n	80021c4 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002042:	4b62      	ldr	r3, [pc, #392]	@ (80021cc <HAL_RCC_ClockConfig+0x1dc>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	2207      	movs	r2, #7
 8002048:	4013      	ands	r3, r2
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d1ee      	bne.n	800202e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	2202      	movs	r2, #2
 8002056:	4013      	ands	r3, r2
 8002058:	d017      	beq.n	800208a <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	2204      	movs	r2, #4
 8002060:	4013      	ands	r3, r2
 8002062:	d008      	beq.n	8002076 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002064:	4b5b      	ldr	r3, [pc, #364]	@ (80021d4 <HAL_RCC_ClockConfig+0x1e4>)
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	4a5b      	ldr	r2, [pc, #364]	@ (80021d8 <HAL_RCC_ClockConfig+0x1e8>)
 800206a:	401a      	ands	r2, r3
 800206c:	4b59      	ldr	r3, [pc, #356]	@ (80021d4 <HAL_RCC_ClockConfig+0x1e4>)
 800206e:	21b0      	movs	r1, #176	@ 0xb0
 8002070:	0109      	lsls	r1, r1, #4
 8002072:	430a      	orrs	r2, r1
 8002074:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002076:	4b57      	ldr	r3, [pc, #348]	@ (80021d4 <HAL_RCC_ClockConfig+0x1e4>)
 8002078:	689b      	ldr	r3, [r3, #8]
 800207a:	4a58      	ldr	r2, [pc, #352]	@ (80021dc <HAL_RCC_ClockConfig+0x1ec>)
 800207c:	4013      	ands	r3, r2
 800207e:	0019      	movs	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	68da      	ldr	r2, [r3, #12]
 8002084:	4b53      	ldr	r3, [pc, #332]	@ (80021d4 <HAL_RCC_ClockConfig+0x1e4>)
 8002086:	430a      	orrs	r2, r1
 8002088:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	2201      	movs	r2, #1
 8002090:	4013      	ands	r3, r2
 8002092:	d04b      	beq.n	800212c <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d107      	bne.n	80020ac <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800209c:	4b4d      	ldr	r3, [pc, #308]	@ (80021d4 <HAL_RCC_ClockConfig+0x1e4>)
 800209e:	681a      	ldr	r2, [r3, #0]
 80020a0:	2380      	movs	r3, #128	@ 0x80
 80020a2:	029b      	lsls	r3, r3, #10
 80020a4:	4013      	ands	r3, r2
 80020a6:	d11f      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80020a8:	2301      	movs	r3, #1
 80020aa:	e08b      	b.n	80021c4 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d107      	bne.n	80020c4 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020b4:	4b47      	ldr	r3, [pc, #284]	@ (80021d4 <HAL_RCC_ClockConfig+0x1e4>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	2380      	movs	r3, #128	@ 0x80
 80020ba:	00db      	lsls	r3, r3, #3
 80020bc:	4013      	ands	r3, r2
 80020be:	d113      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80020c0:	2301      	movs	r3, #1
 80020c2:	e07f      	b.n	80021c4 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d106      	bne.n	80020da <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80020cc:	4b41      	ldr	r3, [pc, #260]	@ (80021d4 <HAL_RCC_ClockConfig+0x1e4>)
 80020ce:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80020d0:	2202      	movs	r2, #2
 80020d2:	4013      	ands	r3, r2
 80020d4:	d108      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e074      	b.n	80021c4 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80020da:	4b3e      	ldr	r3, [pc, #248]	@ (80021d4 <HAL_RCC_ClockConfig+0x1e4>)
 80020dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020de:	2202      	movs	r2, #2
 80020e0:	4013      	ands	r3, r2
 80020e2:	d101      	bne.n	80020e8 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e06d      	b.n	80021c4 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80020e8:	4b3a      	ldr	r3, [pc, #232]	@ (80021d4 <HAL_RCC_ClockConfig+0x1e4>)
 80020ea:	689b      	ldr	r3, [r3, #8]
 80020ec:	2207      	movs	r2, #7
 80020ee:	4393      	bics	r3, r2
 80020f0:	0019      	movs	r1, r3
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	685a      	ldr	r2, [r3, #4]
 80020f6:	4b37      	ldr	r3, [pc, #220]	@ (80021d4 <HAL_RCC_ClockConfig+0x1e4>)
 80020f8:	430a      	orrs	r2, r1
 80020fa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020fc:	f7ff f8d2 	bl	80012a4 <HAL_GetTick>
 8002100:	0003      	movs	r3, r0
 8002102:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002104:	e009      	b.n	800211a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002106:	f7ff f8cd 	bl	80012a4 <HAL_GetTick>
 800210a:	0002      	movs	r2, r0
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	4a2f      	ldr	r2, [pc, #188]	@ (80021d0 <HAL_RCC_ClockConfig+0x1e0>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e054      	b.n	80021c4 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800211a:	4b2e      	ldr	r3, [pc, #184]	@ (80021d4 <HAL_RCC_ClockConfig+0x1e4>)
 800211c:	689b      	ldr	r3, [r3, #8]
 800211e:	2238      	movs	r2, #56	@ 0x38
 8002120:	401a      	ands	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	685b      	ldr	r3, [r3, #4]
 8002126:	00db      	lsls	r3, r3, #3
 8002128:	429a      	cmp	r2, r3
 800212a:	d1ec      	bne.n	8002106 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800212c:	4b27      	ldr	r3, [pc, #156]	@ (80021cc <HAL_RCC_ClockConfig+0x1dc>)
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2207      	movs	r2, #7
 8002132:	4013      	ands	r3, r2
 8002134:	683a      	ldr	r2, [r7, #0]
 8002136:	429a      	cmp	r2, r3
 8002138:	d21e      	bcs.n	8002178 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800213a:	4b24      	ldr	r3, [pc, #144]	@ (80021cc <HAL_RCC_ClockConfig+0x1dc>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	2207      	movs	r2, #7
 8002140:	4393      	bics	r3, r2
 8002142:	0019      	movs	r1, r3
 8002144:	4b21      	ldr	r3, [pc, #132]	@ (80021cc <HAL_RCC_ClockConfig+0x1dc>)
 8002146:	683a      	ldr	r2, [r7, #0]
 8002148:	430a      	orrs	r2, r1
 800214a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800214c:	f7ff f8aa 	bl	80012a4 <HAL_GetTick>
 8002150:	0003      	movs	r3, r0
 8002152:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002154:	e009      	b.n	800216a <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002156:	f7ff f8a5 	bl	80012a4 <HAL_GetTick>
 800215a:	0002      	movs	r2, r0
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	1ad3      	subs	r3, r2, r3
 8002160:	4a1b      	ldr	r2, [pc, #108]	@ (80021d0 <HAL_RCC_ClockConfig+0x1e0>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d901      	bls.n	800216a <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e02c      	b.n	80021c4 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800216a:	4b18      	ldr	r3, [pc, #96]	@ (80021cc <HAL_RCC_ClockConfig+0x1dc>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	2207      	movs	r2, #7
 8002170:	4013      	ands	r3, r2
 8002172:	683a      	ldr	r2, [r7, #0]
 8002174:	429a      	cmp	r2, r3
 8002176:	d1ee      	bne.n	8002156 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2204      	movs	r2, #4
 800217e:	4013      	ands	r3, r2
 8002180:	d009      	beq.n	8002196 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002182:	4b14      	ldr	r3, [pc, #80]	@ (80021d4 <HAL_RCC_ClockConfig+0x1e4>)
 8002184:	689b      	ldr	r3, [r3, #8]
 8002186:	4a16      	ldr	r2, [pc, #88]	@ (80021e0 <HAL_RCC_ClockConfig+0x1f0>)
 8002188:	4013      	ands	r3, r2
 800218a:	0019      	movs	r1, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	691a      	ldr	r2, [r3, #16]
 8002190:	4b10      	ldr	r3, [pc, #64]	@ (80021d4 <HAL_RCC_ClockConfig+0x1e4>)
 8002192:	430a      	orrs	r2, r1
 8002194:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002196:	f000 f82b 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 800219a:	0001      	movs	r1, r0
 800219c:	4b0d      	ldr	r3, [pc, #52]	@ (80021d4 <HAL_RCC_ClockConfig+0x1e4>)
 800219e:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80021a0:	0a1b      	lsrs	r3, r3, #8
 80021a2:	220f      	movs	r2, #15
 80021a4:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80021a6:	4b0f      	ldr	r3, [pc, #60]	@ (80021e4 <HAL_RCC_ClockConfig+0x1f4>)
 80021a8:	0092      	lsls	r2, r2, #2
 80021aa:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80021ac:	221f      	movs	r2, #31
 80021ae:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 80021b0:	000a      	movs	r2, r1
 80021b2:	40da      	lsrs	r2, r3
 80021b4:	4b0c      	ldr	r3, [pc, #48]	@ (80021e8 <HAL_RCC_ClockConfig+0x1f8>)
 80021b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80021b8:	4b0c      	ldr	r3, [pc, #48]	@ (80021ec <HAL_RCC_ClockConfig+0x1fc>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	0018      	movs	r0, r3
 80021be:	f7ff f815 	bl	80011ec <HAL_InitTick>
 80021c2:	0003      	movs	r3, r0
}
 80021c4:	0018      	movs	r0, r3
 80021c6:	46bd      	mov	sp, r7
 80021c8:	b004      	add	sp, #16
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40022000 	.word	0x40022000
 80021d0:	00001388 	.word	0x00001388
 80021d4:	40021000 	.word	0x40021000
 80021d8:	ffff84ff 	.word	0xffff84ff
 80021dc:	fffff0ff 	.word	0xfffff0ff
 80021e0:	ffff8fff 	.word	0xffff8fff
 80021e4:	08003b60 	.word	0x08003b60
 80021e8:	20000000 	.word	0x20000000
 80021ec:	20000004 	.word	0x20000004

080021f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b082      	sub	sp, #8
 80021f4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80021f6:	4b1c      	ldr	r3, [pc, #112]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x78>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	2238      	movs	r2, #56	@ 0x38
 80021fc:	4013      	ands	r3, r2
 80021fe:	d10f      	bne.n	8002220 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002200:	4b19      	ldr	r3, [pc, #100]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x78>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	0adb      	lsrs	r3, r3, #11
 8002206:	2207      	movs	r2, #7
 8002208:	4013      	ands	r3, r2
 800220a:	2201      	movs	r2, #1
 800220c:	409a      	lsls	r2, r3
 800220e:	0013      	movs	r3, r2
 8002210:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002212:	6839      	ldr	r1, [r7, #0]
 8002214:	4815      	ldr	r0, [pc, #84]	@ (800226c <HAL_RCC_GetSysClockFreq+0x7c>)
 8002216:	f7fd ff77 	bl	8000108 <__udivsi3>
 800221a:	0003      	movs	r3, r0
 800221c:	607b      	str	r3, [r7, #4]
 800221e:	e01e      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002220:	4b11      	ldr	r3, [pc, #68]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x78>)
 8002222:	689b      	ldr	r3, [r3, #8]
 8002224:	2238      	movs	r2, #56	@ 0x38
 8002226:	4013      	ands	r3, r2
 8002228:	2b08      	cmp	r3, #8
 800222a:	d102      	bne.n	8002232 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800222c:	4b10      	ldr	r3, [pc, #64]	@ (8002270 <HAL_RCC_GetSysClockFreq+0x80>)
 800222e:	607b      	str	r3, [r7, #4]
 8002230:	e015      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002232:	4b0d      	ldr	r3, [pc, #52]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x78>)
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	2238      	movs	r2, #56	@ 0x38
 8002238:	4013      	ands	r3, r2
 800223a:	2b20      	cmp	r3, #32
 800223c:	d103      	bne.n	8002246 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800223e:	2380      	movs	r3, #128	@ 0x80
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	607b      	str	r3, [r7, #4]
 8002244:	e00b      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002246:	4b08      	ldr	r3, [pc, #32]	@ (8002268 <HAL_RCC_GetSysClockFreq+0x78>)
 8002248:	689b      	ldr	r3, [r3, #8]
 800224a:	2238      	movs	r2, #56	@ 0x38
 800224c:	4013      	ands	r3, r2
 800224e:	2b18      	cmp	r3, #24
 8002250:	d103      	bne.n	800225a <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002252:	23fa      	movs	r3, #250	@ 0xfa
 8002254:	01db      	lsls	r3, r3, #7
 8002256:	607b      	str	r3, [r7, #4]
 8002258:	e001      	b.n	800225e <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 800225a:	2300      	movs	r3, #0
 800225c:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 800225e:	687b      	ldr	r3, [r7, #4]
}
 8002260:	0018      	movs	r0, r3
 8002262:	46bd      	mov	sp, r7
 8002264:	b002      	add	sp, #8
 8002266:	bd80      	pop	{r7, pc}
 8002268:	40021000 	.word	0x40021000
 800226c:	02dc6c00 	.word	0x02dc6c00
 8002270:	007a1200 	.word	0x007a1200

08002274 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	af00      	add	r7, sp, #0
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002278:	f7ff ffba 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 800227c:	0001      	movs	r1, r0
 800227e:	4b09      	ldr	r3, [pc, #36]	@ (80022a4 <HAL_RCC_GetHCLKFreq+0x30>)
 8002280:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	220f      	movs	r2, #15
 8002286:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002288:	4b07      	ldr	r3, [pc, #28]	@ (80022a8 <HAL_RCC_GetHCLKFreq+0x34>)
 800228a:	0092      	lsls	r2, r2, #2
 800228c:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800228e:	221f      	movs	r2, #31
 8002290:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8002292:	000a      	movs	r2, r1
 8002294:	40da      	lsrs	r2, r3
 8002296:	4b05      	ldr	r3, [pc, #20]	@ (80022ac <HAL_RCC_GetHCLKFreq+0x38>)
 8002298:	601a      	str	r2, [r3, #0]
  return SystemCoreClock;
 800229a:	4b04      	ldr	r3, [pc, #16]	@ (80022ac <HAL_RCC_GetHCLKFreq+0x38>)
 800229c:	681b      	ldr	r3, [r3, #0]
}
 800229e:	0018      	movs	r0, r3
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}
 80022a4:	40021000 	.word	0x40021000
 80022a8:	08003b60 	.word	0x08003b60
 80022ac:	20000000 	.word	0x20000000

080022b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_Pos]) & 0x1FU));
 80022b4:	f7ff ffde 	bl	8002274 <HAL_RCC_GetHCLKFreq>
 80022b8:	0001      	movs	r1, r0
 80022ba:	4b07      	ldr	r3, [pc, #28]	@ (80022d8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022bc:	689b      	ldr	r3, [r3, #8]
 80022be:	0b1b      	lsrs	r3, r3, #12
 80022c0:	2207      	movs	r2, #7
 80022c2:	401a      	ands	r2, r3
 80022c4:	4b05      	ldr	r3, [pc, #20]	@ (80022dc <HAL_RCC_GetPCLK1Freq+0x2c>)
 80022c6:	0092      	lsls	r2, r2, #2
 80022c8:	58d3      	ldr	r3, [r2, r3]
 80022ca:	221f      	movs	r2, #31
 80022cc:	4013      	ands	r3, r2
 80022ce:	40d9      	lsrs	r1, r3
 80022d0:	000b      	movs	r3, r1
}
 80022d2:	0018      	movs	r0, r3
 80022d4:	46bd      	mov	sp, r7
 80022d6:	bd80      	pop	{r7, pc}
 80022d8:	40021000 	.word	0x40021000
 80022dc:	08003ba0 	.word	0x08003ba0

080022e0 <HAL_RCCEx_PeriphCLKConfig>:
  * @note (*) not available on all devices
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80022e8:	2313      	movs	r3, #19
 80022ea:	18fb      	adds	r3, r7, r3
 80022ec:	2200      	movs	r2, #0
 80022ee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022f0:	2312      	movs	r3, #18
 80022f2:	18fb      	adds	r3, r7, r3
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	2240      	movs	r2, #64	@ 0x40
 80022fe:	4013      	ands	r3, r2
 8002300:	d100      	bne.n	8002304 <HAL_RCCEx_PeriphCLKConfig+0x24>
 8002302:	e079      	b.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002304:	2011      	movs	r0, #17
 8002306:	183b      	adds	r3, r7, r0
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800230c:	4b63      	ldr	r3, [pc, #396]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800230e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002310:	2380      	movs	r3, #128	@ 0x80
 8002312:	055b      	lsls	r3, r3, #21
 8002314:	4013      	ands	r3, r2
 8002316:	d110      	bne.n	800233a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002318:	4b60      	ldr	r3, [pc, #384]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800231a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800231c:	4b5f      	ldr	r3, [pc, #380]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800231e:	2180      	movs	r1, #128	@ 0x80
 8002320:	0549      	lsls	r1, r1, #21
 8002322:	430a      	orrs	r2, r1
 8002324:	63da      	str	r2, [r3, #60]	@ 0x3c
 8002326:	4b5d      	ldr	r3, [pc, #372]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002328:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800232a:	2380      	movs	r3, #128	@ 0x80
 800232c:	055b      	lsls	r3, r3, #21
 800232e:	4013      	ands	r3, r2
 8002330:	60bb      	str	r3, [r7, #8]
 8002332:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002334:	183b      	adds	r3, r7, r0
 8002336:	2201      	movs	r2, #1
 8002338:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 800233a:	4b58      	ldr	r3, [pc, #352]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800233c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800233e:	23c0      	movs	r3, #192	@ 0xc0
 8002340:	009b      	lsls	r3, r3, #2
 8002342:	4013      	ands	r3, r2
 8002344:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002346:	697b      	ldr	r3, [r7, #20]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d019      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xa0>
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	429a      	cmp	r2, r3
 8002354:	d014      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002356:	4b51      	ldr	r3, [pc, #324]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002358:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800235a:	4a51      	ldr	r2, [pc, #324]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800235c:	4013      	ands	r3, r2
 800235e:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002360:	4b4e      	ldr	r3, [pc, #312]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002362:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002364:	4b4d      	ldr	r3, [pc, #308]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002366:	2180      	movs	r1, #128	@ 0x80
 8002368:	0249      	lsls	r1, r1, #9
 800236a:	430a      	orrs	r2, r1
 800236c:	65da      	str	r2, [r3, #92]	@ 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 800236e:	4b4b      	ldr	r3, [pc, #300]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002370:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8002372:	4b4a      	ldr	r3, [pc, #296]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002374:	494b      	ldr	r1, [pc, #300]	@ (80024a4 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002376:	400a      	ands	r2, r1
 8002378:	65da      	str	r2, [r3, #92]	@ 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800237a:	4b48      	ldr	r3, [pc, #288]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	2201      	movs	r2, #1
 8002384:	4013      	ands	r3, r2
 8002386:	d016      	beq.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002388:	f7fe ff8c 	bl	80012a4 <HAL_GetTick>
 800238c:	0003      	movs	r3, r0
 800238e:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002390:	e00c      	b.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0xcc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002392:	f7fe ff87 	bl	80012a4 <HAL_GetTick>
 8002396:	0002      	movs	r2, r0
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	4a42      	ldr	r2, [pc, #264]	@ (80024a8 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d904      	bls.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0xcc>
        {
          ret = HAL_TIMEOUT;
 80023a2:	2313      	movs	r3, #19
 80023a4:	18fb      	adds	r3, r7, r3
 80023a6:	2203      	movs	r2, #3
 80023a8:	701a      	strb	r2, [r3, #0]
          break;
 80023aa:	e004      	b.n	80023b6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80023ac:	4b3b      	ldr	r3, [pc, #236]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023b0:	2202      	movs	r2, #2
 80023b2:	4013      	ands	r3, r2
 80023b4:	d0ed      	beq.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0xb2>
        }
      }
    }

    if (ret == HAL_OK)
 80023b6:	2313      	movs	r3, #19
 80023b8:	18fb      	adds	r3, r7, r3
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d10a      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023c0:	4b36      	ldr	r3, [pc, #216]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80023c4:	4a36      	ldr	r2, [pc, #216]	@ (80024a0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80023c6:	4013      	ands	r3, r2
 80023c8:	0019      	movs	r1, r3
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	699a      	ldr	r2, [r3, #24]
 80023ce:	4b33      	ldr	r3, [pc, #204]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023d0:	430a      	orrs	r2, r1
 80023d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80023d4:	e005      	b.n	80023e2 <HAL_RCCEx_PeriphCLKConfig+0x102>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023d6:	2312      	movs	r3, #18
 80023d8:	18fb      	adds	r3, r7, r3
 80023da:	2213      	movs	r2, #19
 80023dc:	18ba      	adds	r2, r7, r2
 80023de:	7812      	ldrb	r2, [r2, #0]
 80023e0:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80023e2:	2311      	movs	r3, #17
 80023e4:	18fb      	adds	r3, r7, r3
 80023e6:	781b      	ldrb	r3, [r3, #0]
 80023e8:	2b01      	cmp	r3, #1
 80023ea:	d105      	bne.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ec:	4b2b      	ldr	r3, [pc, #172]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023ee:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80023f0:	4b2a      	ldr	r3, [pc, #168]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80023f2:	492e      	ldr	r1, [pc, #184]	@ (80024ac <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 80023f4:	400a      	ands	r2, r1
 80023f6:	63da      	str	r2, [r3, #60]	@ 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	2201      	movs	r2, #1
 80023fe:	4013      	ands	r3, r2
 8002400:	d009      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002402:	4b26      	ldr	r3, [pc, #152]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002404:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002406:	2203      	movs	r2, #3
 8002408:	4393      	bics	r3, r2
 800240a:	0019      	movs	r1, r3
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	689a      	ldr	r2, [r3, #8]
 8002410:	4b22      	ldr	r3, [pc, #136]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002412:	430a      	orrs	r2, r1
 8002414:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	2202      	movs	r2, #2
 800241c:	4013      	ands	r3, r2
 800241e:	d009      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002420:	4b1e      	ldr	r3, [pc, #120]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002422:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002424:	4a22      	ldr	r2, [pc, #136]	@ (80024b0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002426:	4013      	ands	r3, r2
 8002428:	0019      	movs	r1, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	68da      	ldr	r2, [r3, #12]
 800242e:	4b1b      	ldr	r3, [pc, #108]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002430:	430a      	orrs	r2, r1
 8002432:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2220      	movs	r2, #32
 800243a:	4013      	ands	r3, r2
 800243c:	d008      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800243e:	4b17      	ldr	r3, [pc, #92]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002440:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002442:	009b      	lsls	r3, r3, #2
 8002444:	0899      	lsrs	r1, r3, #2
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	4b14      	ldr	r3, [pc, #80]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800244c:	430a      	orrs	r2, r1
 800244e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_RCC_FDCAN1_CONFIG(PeriphClkInit->Fdcan1ClockSelection);

  }
#endif /* FDCAN1 */
  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	2204      	movs	r2, #4
 8002456:	4013      	ands	r3, r2
 8002458:	d009      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x18e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800245a:	4b10      	ldr	r3, [pc, #64]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800245c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800245e:	4a15      	ldr	r2, [pc, #84]	@ (80024b4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002460:	4013      	ands	r3, r2
 8002462:	0019      	movs	r1, r3
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	691a      	ldr	r2, [r3, #16]
 8002468:	4b0c      	ldr	r3, [pc, #48]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800246a:	430a      	orrs	r2, r1
 800246c:	655a      	str	r2, [r3, #84]	@ 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	2280      	movs	r2, #128	@ 0x80
 8002474:	4013      	ands	r3, r2
 8002476:	d009      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x1ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002478:	4b08      	ldr	r3, [pc, #32]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	22e0      	movs	r2, #224	@ 0xe0
 800247e:	4393      	bics	r3, r2
 8002480:	0019      	movs	r1, r3
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685a      	ldr	r2, [r3, #4]
 8002486:	4b05      	ldr	r3, [pc, #20]	@ (800249c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8002488:	430a      	orrs	r2, r1
 800248a:	601a      	str	r2, [r3, #0]
  }
  return status;
 800248c:	2312      	movs	r3, #18
 800248e:	18fb      	adds	r3, r7, r3
 8002490:	781b      	ldrb	r3, [r3, #0]
}
 8002492:	0018      	movs	r0, r3
 8002494:	46bd      	mov	sp, r7
 8002496:	b006      	add	sp, #24
 8002498:	bd80      	pop	{r7, pc}
 800249a:	46c0      	nop			@ (mov r8, r8)
 800249c:	40021000 	.word	0x40021000
 80024a0:	fffffcff 	.word	0xfffffcff
 80024a4:	fffeffff 	.word	0xfffeffff
 80024a8:	00001388 	.word	0x00001388
 80024ac:	efffffff 	.word	0xefffffff
 80024b0:	ffffcfff 	.word	0xffffcfff
 80024b4:	ffff3fff 	.word	0xffff3fff

080024b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b082      	sub	sp, #8
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d101      	bne.n	80024ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	e04a      	b.n	8002560 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	223d      	movs	r2, #61	@ 0x3d
 80024ce:	5c9b      	ldrb	r3, [r3, r2]
 80024d0:	b2db      	uxtb	r3, r3
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d107      	bne.n	80024e6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	223c      	movs	r2, #60	@ 0x3c
 80024da:	2100      	movs	r1, #0
 80024dc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	0018      	movs	r0, r3
 80024e2:	f7fe fc0d 	bl	8000d00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	223d      	movs	r2, #61	@ 0x3d
 80024ea:	2102      	movs	r1, #2
 80024ec:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	681a      	ldr	r2, [r3, #0]
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	3304      	adds	r3, #4
 80024f6:	0019      	movs	r1, r3
 80024f8:	0010      	movs	r0, r2
 80024fa:	f000 fac7 	bl	8002a8c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2248      	movs	r2, #72	@ 0x48
 8002502:	2101      	movs	r1, #1
 8002504:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	223e      	movs	r2, #62	@ 0x3e
 800250a:	2101      	movs	r1, #1
 800250c:	5499      	strb	r1, [r3, r2]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	223f      	movs	r2, #63	@ 0x3f
 8002512:	2101      	movs	r1, #1
 8002514:	5499      	strb	r1, [r3, r2]
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2240      	movs	r2, #64	@ 0x40
 800251a:	2101      	movs	r1, #1
 800251c:	5499      	strb	r1, [r3, r2]
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2241      	movs	r2, #65	@ 0x41
 8002522:	2101      	movs	r1, #1
 8002524:	5499      	strb	r1, [r3, r2]
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2242      	movs	r2, #66	@ 0x42
 800252a:	2101      	movs	r1, #1
 800252c:	5499      	strb	r1, [r3, r2]
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2243      	movs	r2, #67	@ 0x43
 8002532:	2101      	movs	r1, #1
 8002534:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	2244      	movs	r2, #68	@ 0x44
 800253a:	2101      	movs	r1, #1
 800253c:	5499      	strb	r1, [r3, r2]
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	2245      	movs	r2, #69	@ 0x45
 8002542:	2101      	movs	r1, #1
 8002544:	5499      	strb	r1, [r3, r2]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2246      	movs	r2, #70	@ 0x46
 800254a:	2101      	movs	r1, #1
 800254c:	5499      	strb	r1, [r3, r2]
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2247      	movs	r2, #71	@ 0x47
 8002552:	2101      	movs	r1, #1
 8002554:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	223d      	movs	r2, #61	@ 0x3d
 800255a:	2101      	movs	r1, #1
 800255c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800255e:	2300      	movs	r3, #0
}
 8002560:	0018      	movs	r0, r3
 8002562:	46bd      	mov	sp, r7
 8002564:	b002      	add	sp, #8
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b084      	sub	sp, #16
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	223d      	movs	r2, #61	@ 0x3d
 8002574:	5c9b      	ldrb	r3, [r3, r2]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	2b01      	cmp	r3, #1
 800257a:	d001      	beq.n	8002580 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800257c:	2301      	movs	r3, #1
 800257e:	e02f      	b.n	80025e0 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	223d      	movs	r2, #61	@ 0x3d
 8002584:	2102      	movs	r1, #2
 8002586:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a16      	ldr	r2, [pc, #88]	@ (80025e8 <HAL_TIM_Base_Start+0x80>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d004      	beq.n	800259c <HAL_TIM_Base_Start+0x34>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	4a15      	ldr	r2, [pc, #84]	@ (80025ec <HAL_TIM_Base_Start+0x84>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d116      	bne.n	80025ca <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	689b      	ldr	r3, [r3, #8]
 80025a2:	4a13      	ldr	r2, [pc, #76]	@ (80025f0 <HAL_TIM_Base_Start+0x88>)
 80025a4:	4013      	ands	r3, r2
 80025a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	2b06      	cmp	r3, #6
 80025ac:	d016      	beq.n	80025dc <HAL_TIM_Base_Start+0x74>
 80025ae:	68fa      	ldr	r2, [r7, #12]
 80025b0:	2380      	movs	r3, #128	@ 0x80
 80025b2:	025b      	lsls	r3, r3, #9
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d011      	beq.n	80025dc <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	681a      	ldr	r2, [r3, #0]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2101      	movs	r1, #1
 80025c4:	430a      	orrs	r2, r1
 80025c6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025c8:	e008      	b.n	80025dc <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	681a      	ldr	r2, [r3, #0]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	2101      	movs	r1, #1
 80025d6:	430a      	orrs	r2, r1
 80025d8:	601a      	str	r2, [r3, #0]
 80025da:	e000      	b.n	80025de <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80025dc:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80025de:	2300      	movs	r3, #0
}
 80025e0:	0018      	movs	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	b004      	add	sp, #16
 80025e6:	bd80      	pop	{r7, pc}
 80025e8:	40012c00 	.word	0x40012c00
 80025ec:	40000400 	.word	0x40000400
 80025f0:	00010007 	.word	0x00010007

080025f4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b084      	sub	sp, #16
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	223d      	movs	r2, #61	@ 0x3d
 8002600:	5c9b      	ldrb	r3, [r3, r2]
 8002602:	b2db      	uxtb	r3, r3
 8002604:	2b01      	cmp	r3, #1
 8002606:	d001      	beq.n	800260c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002608:	2301      	movs	r3, #1
 800260a:	e037      	b.n	800267c <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	223d      	movs	r2, #61	@ 0x3d
 8002610:	2102      	movs	r1, #2
 8002612:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68da      	ldr	r2, [r3, #12]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2101      	movs	r1, #1
 8002620:	430a      	orrs	r2, r1
 8002622:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a16      	ldr	r2, [pc, #88]	@ (8002684 <HAL_TIM_Base_Start_IT+0x90>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d004      	beq.n	8002638 <HAL_TIM_Base_Start_IT+0x44>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	4a15      	ldr	r2, [pc, #84]	@ (8002688 <HAL_TIM_Base_Start_IT+0x94>)
 8002634:	4293      	cmp	r3, r2
 8002636:	d116      	bne.n	8002666 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	4a13      	ldr	r2, [pc, #76]	@ (800268c <HAL_TIM_Base_Start_IT+0x98>)
 8002640:	4013      	ands	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	2b06      	cmp	r3, #6
 8002648:	d016      	beq.n	8002678 <HAL_TIM_Base_Start_IT+0x84>
 800264a:	68fa      	ldr	r2, [r7, #12]
 800264c:	2380      	movs	r3, #128	@ 0x80
 800264e:	025b      	lsls	r3, r3, #9
 8002650:	429a      	cmp	r2, r3
 8002652:	d011      	beq.n	8002678 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	2101      	movs	r1, #1
 8002660:	430a      	orrs	r2, r1
 8002662:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002664:	e008      	b.n	8002678 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	681a      	ldr	r2, [r3, #0]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2101      	movs	r1, #1
 8002672:	430a      	orrs	r2, r1
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	e000      	b.n	800267a <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002678:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800267a:	2300      	movs	r3, #0
}
 800267c:	0018      	movs	r0, r3
 800267e:	46bd      	mov	sp, r7
 8002680:	b004      	add	sp, #16
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40012c00 	.word	0x40012c00
 8002688:	40000400 	.word	0x40000400
 800268c:	00010007 	.word	0x00010007

08002690 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002690:	b580      	push	{r7, lr}
 8002692:	b084      	sub	sp, #16
 8002694:	af00      	add	r7, sp, #0
 8002696:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	68db      	ldr	r3, [r3, #12]
 800269e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	2202      	movs	r2, #2
 80026ac:	4013      	ands	r3, r2
 80026ae:	d021      	beq.n	80026f4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2202      	movs	r2, #2
 80026b4:	4013      	ands	r3, r2
 80026b6:	d01d      	beq.n	80026f4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	2203      	movs	r2, #3
 80026be:	4252      	negs	r2, r2
 80026c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	2201      	movs	r2, #1
 80026c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	699b      	ldr	r3, [r3, #24]
 80026ce:	2203      	movs	r2, #3
 80026d0:	4013      	ands	r3, r2
 80026d2:	d004      	beq.n	80026de <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	0018      	movs	r0, r3
 80026d8:	f000 f9c0 	bl	8002a5c <HAL_TIM_IC_CaptureCallback>
 80026dc:	e007      	b.n	80026ee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	0018      	movs	r0, r3
 80026e2:	f000 f9b3 	bl	8002a4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	0018      	movs	r0, r3
 80026ea:	f000 f9bf 	bl	8002a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2200      	movs	r2, #0
 80026f2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	2204      	movs	r2, #4
 80026f8:	4013      	ands	r3, r2
 80026fa:	d022      	beq.n	8002742 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	2204      	movs	r2, #4
 8002700:	4013      	ands	r3, r2
 8002702:	d01e      	beq.n	8002742 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2205      	movs	r2, #5
 800270a:	4252      	negs	r2, r2
 800270c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2202      	movs	r2, #2
 8002712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	699a      	ldr	r2, [r3, #24]
 800271a:	23c0      	movs	r3, #192	@ 0xc0
 800271c:	009b      	lsls	r3, r3, #2
 800271e:	4013      	ands	r3, r2
 8002720:	d004      	beq.n	800272c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	0018      	movs	r0, r3
 8002726:	f000 f999 	bl	8002a5c <HAL_TIM_IC_CaptureCallback>
 800272a:	e007      	b.n	800273c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	0018      	movs	r0, r3
 8002730:	f000 f98c 	bl	8002a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	0018      	movs	r0, r3
 8002738:	f000 f998 	bl	8002a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2200      	movs	r2, #0
 8002740:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002742:	68bb      	ldr	r3, [r7, #8]
 8002744:	2208      	movs	r2, #8
 8002746:	4013      	ands	r3, r2
 8002748:	d021      	beq.n	800278e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	2208      	movs	r2, #8
 800274e:	4013      	ands	r3, r2
 8002750:	d01d      	beq.n	800278e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	2209      	movs	r2, #9
 8002758:	4252      	negs	r2, r2
 800275a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2204      	movs	r2, #4
 8002760:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	2203      	movs	r2, #3
 800276a:	4013      	ands	r3, r2
 800276c:	d004      	beq.n	8002778 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	0018      	movs	r0, r3
 8002772:	f000 f973 	bl	8002a5c <HAL_TIM_IC_CaptureCallback>
 8002776:	e007      	b.n	8002788 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	0018      	movs	r0, r3
 800277c:	f000 f966 	bl	8002a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	0018      	movs	r0, r3
 8002784:	f000 f972 	bl	8002a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800278e:	68bb      	ldr	r3, [r7, #8]
 8002790:	2210      	movs	r2, #16
 8002792:	4013      	ands	r3, r2
 8002794:	d022      	beq.n	80027dc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	2210      	movs	r2, #16
 800279a:	4013      	ands	r3, r2
 800279c:	d01e      	beq.n	80027dc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	2211      	movs	r2, #17
 80027a4:	4252      	negs	r2, r2
 80027a6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2208      	movs	r2, #8
 80027ac:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	69da      	ldr	r2, [r3, #28]
 80027b4:	23c0      	movs	r3, #192	@ 0xc0
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4013      	ands	r3, r2
 80027ba:	d004      	beq.n	80027c6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	0018      	movs	r0, r3
 80027c0:	f000 f94c 	bl	8002a5c <HAL_TIM_IC_CaptureCallback>
 80027c4:	e007      	b.n	80027d6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	0018      	movs	r0, r3
 80027ca:	f000 f93f 	bl	8002a4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	0018      	movs	r0, r3
 80027d2:	f000 f94b 	bl	8002a6c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80027dc:	68bb      	ldr	r3, [r7, #8]
 80027de:	2201      	movs	r2, #1
 80027e0:	4013      	ands	r3, r2
 80027e2:	d00c      	beq.n	80027fe <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	2201      	movs	r2, #1
 80027e8:	4013      	ands	r3, r2
 80027ea:	d008      	beq.n	80027fe <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2202      	movs	r2, #2
 80027f2:	4252      	negs	r2, r2
 80027f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	0018      	movs	r0, r3
 80027fa:	f7fd fdfb 	bl	80003f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80027fe:	68bb      	ldr	r3, [r7, #8]
 8002800:	2280      	movs	r2, #128	@ 0x80
 8002802:	4013      	ands	r3, r2
 8002804:	d104      	bne.n	8002810 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8002806:	68ba      	ldr	r2, [r7, #8]
 8002808:	2380      	movs	r3, #128	@ 0x80
 800280a:	019b      	lsls	r3, r3, #6
 800280c:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800280e:	d00b      	beq.n	8002828 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	2280      	movs	r2, #128	@ 0x80
 8002814:	4013      	ands	r3, r2
 8002816:	d007      	beq.n	8002828 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a1e      	ldr	r2, [pc, #120]	@ (8002898 <HAL_TIM_IRQHandler+0x208>)
 800281e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	0018      	movs	r0, r3
 8002824:	f000 faaa 	bl	8002d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8002828:	68ba      	ldr	r2, [r7, #8]
 800282a:	2380      	movs	r3, #128	@ 0x80
 800282c:	005b      	lsls	r3, r3, #1
 800282e:	4013      	ands	r3, r2
 8002830:	d00b      	beq.n	800284a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	2280      	movs	r2, #128	@ 0x80
 8002836:	4013      	ands	r3, r2
 8002838:	d007      	beq.n	800284a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4a17      	ldr	r2, [pc, #92]	@ (800289c <HAL_TIM_IRQHandler+0x20c>)
 8002840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	0018      	movs	r0, r3
 8002846:	f000 faa1 	bl	8002d8c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2240      	movs	r2, #64	@ 0x40
 800284e:	4013      	ands	r3, r2
 8002850:	d00c      	beq.n	800286c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	2240      	movs	r2, #64	@ 0x40
 8002856:	4013      	ands	r3, r2
 8002858:	d008      	beq.n	800286c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	2241      	movs	r2, #65	@ 0x41
 8002860:	4252      	negs	r2, r2
 8002862:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	0018      	movs	r0, r3
 8002868:	f000 f908 	bl	8002a7c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2220      	movs	r2, #32
 8002870:	4013      	ands	r3, r2
 8002872:	d00c      	beq.n	800288e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	4013      	ands	r3, r2
 800287a:	d008      	beq.n	800288e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2221      	movs	r2, #33	@ 0x21
 8002882:	4252      	negs	r2, r2
 8002884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	0018      	movs	r0, r3
 800288a:	f000 fa6f 	bl	8002d6c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800288e:	46c0      	nop			@ (mov r8, r8)
 8002890:	46bd      	mov	sp, r7
 8002892:	b004      	add	sp, #16
 8002894:	bd80      	pop	{r7, pc}
 8002896:	46c0      	nop			@ (mov r8, r8)
 8002898:	ffffdf7f 	.word	0xffffdf7f
 800289c:	fffffeff 	.word	0xfffffeff

080028a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b084      	sub	sp, #16
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
 80028a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80028aa:	230f      	movs	r3, #15
 80028ac:	18fb      	adds	r3, r7, r3
 80028ae:	2200      	movs	r2, #0
 80028b0:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	223c      	movs	r2, #60	@ 0x3c
 80028b6:	5c9b      	ldrb	r3, [r3, r2]
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d101      	bne.n	80028c0 <HAL_TIM_ConfigClockSource+0x20>
 80028bc:	2302      	movs	r3, #2
 80028be:	e0bc      	b.n	8002a3a <HAL_TIM_ConfigClockSource+0x19a>
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	223c      	movs	r2, #60	@ 0x3c
 80028c4:	2101      	movs	r1, #1
 80028c6:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	223d      	movs	r2, #61	@ 0x3d
 80028cc:	2102      	movs	r1, #2
 80028ce:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4a5a      	ldr	r2, [pc, #360]	@ (8002a44 <HAL_TIM_ConfigClockSource+0x1a4>)
 80028dc:	4013      	ands	r3, r2
 80028de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80028e0:	68bb      	ldr	r3, [r7, #8]
 80028e2:	4a59      	ldr	r2, [pc, #356]	@ (8002a48 <HAL_TIM_ConfigClockSource+0x1a8>)
 80028e4:	4013      	ands	r3, r2
 80028e6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68ba      	ldr	r2, [r7, #8]
 80028ee:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	2280      	movs	r2, #128	@ 0x80
 80028f6:	0192      	lsls	r2, r2, #6
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d040      	beq.n	800297e <HAL_TIM_ConfigClockSource+0xde>
 80028fc:	2280      	movs	r2, #128	@ 0x80
 80028fe:	0192      	lsls	r2, r2, #6
 8002900:	4293      	cmp	r3, r2
 8002902:	d900      	bls.n	8002906 <HAL_TIM_ConfigClockSource+0x66>
 8002904:	e088      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x178>
 8002906:	2280      	movs	r2, #128	@ 0x80
 8002908:	0152      	lsls	r2, r2, #5
 800290a:	4293      	cmp	r3, r2
 800290c:	d100      	bne.n	8002910 <HAL_TIM_ConfigClockSource+0x70>
 800290e:	e088      	b.n	8002a22 <HAL_TIM_ConfigClockSource+0x182>
 8002910:	2280      	movs	r2, #128	@ 0x80
 8002912:	0152      	lsls	r2, r2, #5
 8002914:	4293      	cmp	r3, r2
 8002916:	d900      	bls.n	800291a <HAL_TIM_ConfigClockSource+0x7a>
 8002918:	e07e      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x178>
 800291a:	2b70      	cmp	r3, #112	@ 0x70
 800291c:	d018      	beq.n	8002950 <HAL_TIM_ConfigClockSource+0xb0>
 800291e:	d900      	bls.n	8002922 <HAL_TIM_ConfigClockSource+0x82>
 8002920:	e07a      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x178>
 8002922:	2b60      	cmp	r3, #96	@ 0x60
 8002924:	d04f      	beq.n	80029c6 <HAL_TIM_ConfigClockSource+0x126>
 8002926:	d900      	bls.n	800292a <HAL_TIM_ConfigClockSource+0x8a>
 8002928:	e076      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x178>
 800292a:	2b50      	cmp	r3, #80	@ 0x50
 800292c:	d03b      	beq.n	80029a6 <HAL_TIM_ConfigClockSource+0x106>
 800292e:	d900      	bls.n	8002932 <HAL_TIM_ConfigClockSource+0x92>
 8002930:	e072      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x178>
 8002932:	2b40      	cmp	r3, #64	@ 0x40
 8002934:	d057      	beq.n	80029e6 <HAL_TIM_ConfigClockSource+0x146>
 8002936:	d900      	bls.n	800293a <HAL_TIM_ConfigClockSource+0x9a>
 8002938:	e06e      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x178>
 800293a:	2b30      	cmp	r3, #48	@ 0x30
 800293c:	d063      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x166>
 800293e:	d86b      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x178>
 8002940:	2b20      	cmp	r3, #32
 8002942:	d060      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x166>
 8002944:	d868      	bhi.n	8002a18 <HAL_TIM_ConfigClockSource+0x178>
 8002946:	2b00      	cmp	r3, #0
 8002948:	d05d      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x166>
 800294a:	2b10      	cmp	r3, #16
 800294c:	d05b      	beq.n	8002a06 <HAL_TIM_ConfigClockSource+0x166>
 800294e:	e063      	b.n	8002a18 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002960:	f000 f982 	bl	8002c68 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	689b      	ldr	r3, [r3, #8]
 800296a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	2277      	movs	r2, #119	@ 0x77
 8002970:	4313      	orrs	r3, r2
 8002972:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	68ba      	ldr	r2, [r7, #8]
 800297a:	609a      	str	r2, [r3, #8]
      break;
 800297c:	e052      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800298e:	f000 f96b 	bl	8002c68 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	689a      	ldr	r2, [r3, #8]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	2180      	movs	r1, #128	@ 0x80
 800299e:	01c9      	lsls	r1, r1, #7
 80029a0:	430a      	orrs	r2, r1
 80029a2:	609a      	str	r2, [r3, #8]
      break;
 80029a4:	e03e      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029b2:	001a      	movs	r2, r3
 80029b4:	f000 f8dc 	bl	8002b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2150      	movs	r1, #80	@ 0x50
 80029be:	0018      	movs	r0, r3
 80029c0:	f000 f936 	bl	8002c30 <TIM_ITRx_SetConfig>
      break;
 80029c4:	e02e      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80029d2:	001a      	movs	r2, r3
 80029d4:	f000 f8fa 	bl	8002bcc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2160      	movs	r1, #96	@ 0x60
 80029de:	0018      	movs	r0, r3
 80029e0:	f000 f926 	bl	8002c30 <TIM_ITRx_SetConfig>
      break;
 80029e4:	e01e      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80029f2:	001a      	movs	r2, r3
 80029f4:	f000 f8bc 	bl	8002b70 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2140      	movs	r1, #64	@ 0x40
 80029fe:	0018      	movs	r0, r3
 8002a00:	f000 f916 	bl	8002c30 <TIM_ITRx_SetConfig>
      break;
 8002a04:	e00e      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	0019      	movs	r1, r3
 8002a10:	0010      	movs	r0, r2
 8002a12:	f000 f90d 	bl	8002c30 <TIM_ITRx_SetConfig>
      break;
 8002a16:	e005      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002a18:	230f      	movs	r3, #15
 8002a1a:	18fb      	adds	r3, r7, r3
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	701a      	strb	r2, [r3, #0]
      break;
 8002a20:	e000      	b.n	8002a24 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002a22:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	223d      	movs	r2, #61	@ 0x3d
 8002a28:	2101      	movs	r1, #1
 8002a2a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	223c      	movs	r2, #60	@ 0x3c
 8002a30:	2100      	movs	r1, #0
 8002a32:	5499      	strb	r1, [r3, r2]

  return status;
 8002a34:	230f      	movs	r3, #15
 8002a36:	18fb      	adds	r3, r7, r3
 8002a38:	781b      	ldrb	r3, [r3, #0]
}
 8002a3a:	0018      	movs	r0, r3
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	b004      	add	sp, #16
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	46c0      	nop			@ (mov r8, r8)
 8002a44:	ffceff88 	.word	0xffceff88
 8002a48:	ffff00ff 	.word	0xffff00ff

08002a4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002a54:	46c0      	nop			@ (mov r8, r8)
 8002a56:	46bd      	mov	sp, r7
 8002a58:	b002      	add	sp, #8
 8002a5a:	bd80      	pop	{r7, pc}

08002a5c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b082      	sub	sp, #8
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a64:	46c0      	nop			@ (mov r8, r8)
 8002a66:	46bd      	mov	sp, r7
 8002a68:	b002      	add	sp, #8
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a74:	46c0      	nop			@ (mov r8, r8)
 8002a76:	46bd      	mov	sp, r7
 8002a78:	b002      	add	sp, #8
 8002a7a:	bd80      	pop	{r7, pc}

08002a7c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b082      	sub	sp, #8
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a84:	46c0      	nop			@ (mov r8, r8)
 8002a86:	46bd      	mov	sp, r7
 8002a88:	b002      	add	sp, #8
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	b084      	sub	sp, #16
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a2e      	ldr	r2, [pc, #184]	@ (8002b58 <TIM_Base_SetConfig+0xcc>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d003      	beq.n	8002aac <TIM_Base_SetConfig+0x20>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a2d      	ldr	r2, [pc, #180]	@ (8002b5c <TIM_Base_SetConfig+0xd0>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d108      	bne.n	8002abe <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	2270      	movs	r2, #112	@ 0x70
 8002ab0:	4393      	bics	r3, r2
 8002ab2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	4313      	orrs	r3, r2
 8002abc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4a25      	ldr	r2, [pc, #148]	@ (8002b58 <TIM_Base_SetConfig+0xcc>)
 8002ac2:	4293      	cmp	r3, r2
 8002ac4:	d00f      	beq.n	8002ae6 <TIM_Base_SetConfig+0x5a>
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	4a24      	ldr	r2, [pc, #144]	@ (8002b5c <TIM_Base_SetConfig+0xd0>)
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d00b      	beq.n	8002ae6 <TIM_Base_SetConfig+0x5a>
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	4a23      	ldr	r2, [pc, #140]	@ (8002b60 <TIM_Base_SetConfig+0xd4>)
 8002ad2:	4293      	cmp	r3, r2
 8002ad4:	d007      	beq.n	8002ae6 <TIM_Base_SetConfig+0x5a>
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	4a22      	ldr	r2, [pc, #136]	@ (8002b64 <TIM_Base_SetConfig+0xd8>)
 8002ada:	4293      	cmp	r3, r2
 8002adc:	d003      	beq.n	8002ae6 <TIM_Base_SetConfig+0x5a>
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	4a21      	ldr	r2, [pc, #132]	@ (8002b68 <TIM_Base_SetConfig+0xdc>)
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d108      	bne.n	8002af8 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	4a20      	ldr	r2, [pc, #128]	@ (8002b6c <TIM_Base_SetConfig+0xe0>)
 8002aea:	4013      	ands	r3, r2
 8002aec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	68db      	ldr	r3, [r3, #12]
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4313      	orrs	r3, r2
 8002af6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	2280      	movs	r2, #128	@ 0x80
 8002afc:	4393      	bics	r3, r2
 8002afe:	001a      	movs	r2, r3
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	695b      	ldr	r3, [r3, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002b08:	683b      	ldr	r3, [r7, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681a      	ldr	r2, [r3, #0]
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a0f      	ldr	r2, [pc, #60]	@ (8002b58 <TIM_Base_SetConfig+0xcc>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d007      	beq.n	8002b30 <TIM_Base_SetConfig+0xa4>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a10      	ldr	r2, [pc, #64]	@ (8002b64 <TIM_Base_SetConfig+0xd8>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d003      	beq.n	8002b30 <TIM_Base_SetConfig+0xa4>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a0f      	ldr	r2, [pc, #60]	@ (8002b68 <TIM_Base_SetConfig+0xdc>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d103      	bne.n	8002b38 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	691a      	ldr	r2, [r3, #16]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2204      	movs	r2, #4
 8002b3e:	431a      	orrs	r2, r3
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	68fa      	ldr	r2, [r7, #12]
 8002b4e:	601a      	str	r2, [r3, #0]
}
 8002b50:	46c0      	nop			@ (mov r8, r8)
 8002b52:	46bd      	mov	sp, r7
 8002b54:	b004      	add	sp, #16
 8002b56:	bd80      	pop	{r7, pc}
 8002b58:	40012c00 	.word	0x40012c00
 8002b5c:	40000400 	.word	0x40000400
 8002b60:	40002000 	.word	0x40002000
 8002b64:	40014400 	.word	0x40014400
 8002b68:	40014800 	.word	0x40014800
 8002b6c:	fffffcff 	.word	0xfffffcff

08002b70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b086      	sub	sp, #24
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	60f8      	str	r0, [r7, #12]
 8002b78:	60b9      	str	r1, [r7, #8]
 8002b7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	6a1b      	ldr	r3, [r3, #32]
 8002b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	2201      	movs	r2, #1
 8002b88:	4393      	bics	r3, r2
 8002b8a:	001a      	movs	r2, r3
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	699b      	ldr	r3, [r3, #24]
 8002b94:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b96:	693b      	ldr	r3, [r7, #16]
 8002b98:	22f0      	movs	r2, #240	@ 0xf0
 8002b9a:	4393      	bics	r3, r2
 8002b9c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	011b      	lsls	r3, r3, #4
 8002ba2:	693a      	ldr	r2, [r7, #16]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ba8:	697b      	ldr	r3, [r7, #20]
 8002baa:	220a      	movs	r2, #10
 8002bac:	4393      	bics	r3, r2
 8002bae:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002bb0:	697a      	ldr	r2, [r7, #20]
 8002bb2:	68bb      	ldr	r3, [r7, #8]
 8002bb4:	4313      	orrs	r3, r2
 8002bb6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	693a      	ldr	r2, [r7, #16]
 8002bbc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	697a      	ldr	r2, [r7, #20]
 8002bc2:	621a      	str	r2, [r3, #32]
}
 8002bc4:	46c0      	nop			@ (mov r8, r8)
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	b006      	add	sp, #24
 8002bca:	bd80      	pop	{r7, pc}

08002bcc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	60f8      	str	r0, [r7, #12]
 8002bd4:	60b9      	str	r1, [r7, #8]
 8002bd6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6a1b      	ldr	r3, [r3, #32]
 8002bdc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6a1b      	ldr	r3, [r3, #32]
 8002be2:	2210      	movs	r2, #16
 8002be4:	4393      	bics	r3, r2
 8002be6:	001a      	movs	r2, r3
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8002c2c <TIM_TI2_ConfigInputStage+0x60>)
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	031b      	lsls	r3, r3, #12
 8002bfe:	693a      	ldr	r2, [r7, #16]
 8002c00:	4313      	orrs	r3, r2
 8002c02:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002c04:	697b      	ldr	r3, [r7, #20]
 8002c06:	22a0      	movs	r2, #160	@ 0xa0
 8002c08:	4393      	bics	r3, r2
 8002c0a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	011b      	lsls	r3, r3, #4
 8002c10:	697a      	ldr	r2, [r7, #20]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	693a      	ldr	r2, [r7, #16]
 8002c1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	697a      	ldr	r2, [r7, #20]
 8002c20:	621a      	str	r2, [r3, #32]
}
 8002c22:	46c0      	nop			@ (mov r8, r8)
 8002c24:	46bd      	mov	sp, r7
 8002c26:	b006      	add	sp, #24
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	46c0      	nop			@ (mov r8, r8)
 8002c2c:	ffff0fff 	.word	0xffff0fff

08002c30 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b084      	sub	sp, #16
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	4a08      	ldr	r2, [pc, #32]	@ (8002c64 <TIM_ITRx_SetConfig+0x34>)
 8002c44:	4013      	ands	r3, r2
 8002c46:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002c48:	683a      	ldr	r2, [r7, #0]
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	4313      	orrs	r3, r2
 8002c4e:	2207      	movs	r2, #7
 8002c50:	4313      	orrs	r3, r2
 8002c52:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	609a      	str	r2, [r3, #8]
}
 8002c5a:	46c0      	nop			@ (mov r8, r8)
 8002c5c:	46bd      	mov	sp, r7
 8002c5e:	b004      	add	sp, #16
 8002c60:	bd80      	pop	{r7, pc}
 8002c62:	46c0      	nop			@ (mov r8, r8)
 8002c64:	ffcfff8f 	.word	0xffcfff8f

08002c68 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b086      	sub	sp, #24
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	60f8      	str	r0, [r7, #12]
 8002c70:	60b9      	str	r1, [r7, #8]
 8002c72:	607a      	str	r2, [r7, #4]
 8002c74:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c7c:	697b      	ldr	r3, [r7, #20]
 8002c7e:	4a09      	ldr	r2, [pc, #36]	@ (8002ca4 <TIM_ETR_SetConfig+0x3c>)
 8002c80:	4013      	ands	r3, r2
 8002c82:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c84:	683b      	ldr	r3, [r7, #0]
 8002c86:	021a      	lsls	r2, r3, #8
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	431a      	orrs	r2, r3
 8002c8c:	68bb      	ldr	r3, [r7, #8]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	697a      	ldr	r2, [r7, #20]
 8002c92:	4313      	orrs	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	609a      	str	r2, [r3, #8]
}
 8002c9c:	46c0      	nop			@ (mov r8, r8)
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	b006      	add	sp, #24
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	ffff00ff 	.word	0xffff00ff

08002ca8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	b084      	sub	sp, #16
 8002cac:	af00      	add	r7, sp, #0
 8002cae:	6078      	str	r0, [r7, #4]
 8002cb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	223c      	movs	r2, #60	@ 0x3c
 8002cb6:	5c9b      	ldrb	r3, [r3, r2]
 8002cb8:	2b01      	cmp	r3, #1
 8002cba:	d101      	bne.n	8002cc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	e04a      	b.n	8002d56 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	223c      	movs	r2, #60	@ 0x3c
 8002cc4:	2101      	movs	r1, #1
 8002cc6:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	223d      	movs	r2, #61	@ 0x3d
 8002ccc:	2102      	movs	r1, #2
 8002cce:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689b      	ldr	r3, [r3, #8]
 8002cde:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	4a1e      	ldr	r2, [pc, #120]	@ (8002d60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d108      	bne.n	8002cfc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	4a1d      	ldr	r2, [pc, #116]	@ (8002d64 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 8002cee:	4013      	ands	r3, r2
 8002cf0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cf2:	683b      	ldr	r3, [r7, #0]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	68fa      	ldr	r2, [r7, #12]
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2270      	movs	r2, #112	@ 0x70
 8002d00:	4393      	bics	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68fa      	ldr	r2, [r7, #12]
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68fa      	ldr	r2, [r7, #12]
 8002d14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a11      	ldr	r2, [pc, #68]	@ (8002d60 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d004      	beq.n	8002d2a <HAL_TIMEx_MasterConfigSynchronization+0x82>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a10      	ldr	r2, [pc, #64]	@ (8002d68 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d10c      	bne.n	8002d44 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002d2a:	68bb      	ldr	r3, [r7, #8]
 8002d2c:	2280      	movs	r2, #128	@ 0x80
 8002d2e:	4393      	bics	r3, r2
 8002d30:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	68ba      	ldr	r2, [r7, #8]
 8002d38:	4313      	orrs	r3, r2
 8002d3a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	68ba      	ldr	r2, [r7, #8]
 8002d42:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	223d      	movs	r2, #61	@ 0x3d
 8002d48:	2101      	movs	r1, #1
 8002d4a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	223c      	movs	r2, #60	@ 0x3c
 8002d50:	2100      	movs	r1, #0
 8002d52:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	0018      	movs	r0, r3
 8002d58:	46bd      	mov	sp, r7
 8002d5a:	b004      	add	sp, #16
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	46c0      	nop			@ (mov r8, r8)
 8002d60:	40012c00 	.word	0x40012c00
 8002d64:	ff0fffff 	.word	0xff0fffff
 8002d68:	40000400 	.word	0x40000400

08002d6c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	b082      	sub	sp, #8
 8002d70:	af00      	add	r7, sp, #0
 8002d72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d74:	46c0      	nop			@ (mov r8, r8)
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b002      	add	sp, #8
 8002d7a:	bd80      	pop	{r7, pc}

08002d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d84:	46c0      	nop			@ (mov r8, r8)
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b002      	add	sp, #8
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b082      	sub	sp, #8
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d94:	46c0      	nop			@ (mov r8, r8)
 8002d96:	46bd      	mov	sp, r7
 8002d98:	b002      	add	sp, #8
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b082      	sub	sp, #8
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d101      	bne.n	8002dae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002daa:	2301      	movs	r3, #1
 8002dac:	e046      	b.n	8002e3c <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	2288      	movs	r2, #136	@ 0x88
 8002db2:	589b      	ldr	r3, [r3, r2]
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d107      	bne.n	8002dc8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2284      	movs	r2, #132	@ 0x84
 8002dbc:	2100      	movs	r1, #0
 8002dbe:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	0018      	movs	r0, r3
 8002dc4:	f7fd fff6 	bl	8000db4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2288      	movs	r2, #136	@ 0x88
 8002dcc:	2124      	movs	r1, #36	@ 0x24
 8002dce:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	681a      	ldr	r2, [r3, #0]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2101      	movs	r1, #1
 8002ddc:	438a      	bics	r2, r1
 8002dde:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d003      	beq.n	8002df0 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	0018      	movs	r0, r3
 8002dec:	f000 fa54 	bl	8003298 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	0018      	movs	r0, r3
 8002df4:	f000 f8d2 	bl	8002f9c <UART_SetConfig>
 8002df8:	0003      	movs	r3, r0
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d101      	bne.n	8002e02 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e01c      	b.n	8002e3c <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	685a      	ldr	r2, [r3, #4]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	490d      	ldr	r1, [pc, #52]	@ (8002e44 <HAL_UART_Init+0xa8>)
 8002e0e:	400a      	ands	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	212a      	movs	r1, #42	@ 0x2a
 8002e1e:	438a      	bics	r2, r1
 8002e20:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2101      	movs	r1, #1
 8002e2e:	430a      	orrs	r2, r1
 8002e30:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f000 fae3 	bl	8003400 <UART_CheckIdleState>
 8002e3a:	0003      	movs	r3, r0
}
 8002e3c:	0018      	movs	r0, r3
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	b002      	add	sp, #8
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	ffffb7ff 	.word	0xffffb7ff

08002e48 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b088      	sub	sp, #32
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	60b9      	str	r1, [r7, #8]
 8002e52:	1dbb      	adds	r3, r7, #6
 8002e54:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	2288      	movs	r2, #136	@ 0x88
 8002e5a:	589b      	ldr	r3, [r3, r2]
 8002e5c:	2b20      	cmp	r3, #32
 8002e5e:	d000      	beq.n	8002e62 <HAL_UART_Transmit_DMA+0x1a>
 8002e60:	e079      	b.n	8002f56 <HAL_UART_Transmit_DMA+0x10e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e62:	68bb      	ldr	r3, [r7, #8]
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d003      	beq.n	8002e70 <HAL_UART_Transmit_DMA+0x28>
 8002e68:	1dbb      	adds	r3, r7, #6
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d101      	bne.n	8002e74 <HAL_UART_Transmit_DMA+0x2c>
    {
      return HAL_ERROR;
 8002e70:	2301      	movs	r3, #1
 8002e72:	e071      	b.n	8002f58 <HAL_UART_Transmit_DMA+0x110>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	689a      	ldr	r2, [r3, #8]
 8002e78:	2380      	movs	r3, #128	@ 0x80
 8002e7a:	015b      	lsls	r3, r3, #5
 8002e7c:	429a      	cmp	r2, r3
 8002e7e:	d109      	bne.n	8002e94 <HAL_UART_Transmit_DMA+0x4c>
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	691b      	ldr	r3, [r3, #16]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d105      	bne.n	8002e94 <HAL_UART_Transmit_DMA+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d001      	beq.n	8002e94 <HAL_UART_Transmit_DMA+0x4c>
      {
        return  HAL_ERROR;
 8002e90:	2301      	movs	r3, #1
 8002e92:	e061      	b.n	8002f58 <HAL_UART_Transmit_DMA+0x110>
      }
    }

    huart->pTxBuffPtr  = pData;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	651a      	str	r2, [r3, #80]	@ 0x50
    huart->TxXferSize  = Size;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	1dba      	adds	r2, r7, #6
 8002e9e:	2154      	movs	r1, #84	@ 0x54
 8002ea0:	8812      	ldrh	r2, [r2, #0]
 8002ea2:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	1dba      	adds	r2, r7, #6
 8002ea8:	2156      	movs	r1, #86	@ 0x56
 8002eaa:	8812      	ldrh	r2, [r2, #0]
 8002eac:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2290      	movs	r2, #144	@ 0x90
 8002eb2:	2100      	movs	r1, #0
 8002eb4:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	2288      	movs	r2, #136	@ 0x88
 8002eba:	2121      	movs	r1, #33	@ 0x21
 8002ebc:	5099      	str	r1, [r3, r2]

    if (huart->hdmatx != NULL)
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d028      	beq.n	8002f18 <HAL_UART_Transmit_DMA+0xd0>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eca:	4a25      	ldr	r2, [pc, #148]	@ (8002f60 <HAL_UART_Transmit_DMA+0x118>)
 8002ecc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ed2:	4a24      	ldr	r2, [pc, #144]	@ (8002f64 <HAL_UART_Transmit_DMA+0x11c>)
 8002ed4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002eda:	4a23      	ldr	r2, [pc, #140]	@ (8002f68 <HAL_UART_Transmit_DMA+0x120>)
 8002edc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002eee:	0019      	movs	r1, r3
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	3328      	adds	r3, #40	@ 0x28
 8002ef6:	001a      	movs	r2, r3
 8002ef8:	1dbb      	adds	r3, r7, #6
 8002efa:	881b      	ldrh	r3, [r3, #0]
 8002efc:	f7fe fb60 	bl	80015c0 <HAL_DMA_Start_IT>
 8002f00:	1e03      	subs	r3, r0, #0
 8002f02:	d009      	beq.n	8002f18 <HAL_UART_Transmit_DMA+0xd0>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	2290      	movs	r2, #144	@ 0x90
 8002f08:	2110      	movs	r1, #16
 8002f0a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2288      	movs	r2, #136	@ 0x88
 8002f10:	2120      	movs	r1, #32
 8002f12:	5099      	str	r1, [r3, r2]

        return HAL_ERROR;
 8002f14:	2301      	movs	r3, #1
 8002f16:	e01f      	b.n	8002f58 <HAL_UART_Transmit_DMA+0x110>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	2240      	movs	r2, #64	@ 0x40
 8002f1e:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8002f20:	f3ef 8310 	mrs	r3, PRIMASK
 8002f24:	613b      	str	r3, [r7, #16]
  return(result);
 8002f26:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f2e:	697b      	ldr	r3, [r7, #20]
 8002f30:	f383 8810 	msr	PRIMASK, r3
}
 8002f34:	46c0      	nop			@ (mov r8, r8)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2180      	movs	r1, #128	@ 0x80
 8002f42:	430a      	orrs	r2, r1
 8002f44:	609a      	str	r2, [r3, #8]
 8002f46:	69fb      	ldr	r3, [r7, #28]
 8002f48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4a:	69bb      	ldr	r3, [r7, #24]
 8002f4c:	f383 8810 	msr	PRIMASK, r3
}
 8002f50:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8002f52:	2300      	movs	r3, #0
 8002f54:	e000      	b.n	8002f58 <HAL_UART_Transmit_DMA+0x110>
  }
  else
  {
    return HAL_BUSY;
 8002f56:	2302      	movs	r3, #2
  }
}
 8002f58:	0018      	movs	r0, r3
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	b008      	add	sp, #32
 8002f5e:	bd80      	pop	{r7, pc}
 8002f60:	08003781 	.word	0x08003781
 8002f64:	08003819 	.word	0x08003819
 8002f68:	08003837 	.word	0x08003837

08002f6c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b082      	sub	sp, #8
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f74:	46c0      	nop			@ (mov r8, r8)
 8002f76:	46bd      	mov	sp, r7
 8002f78:	b002      	add	sp, #8
 8002f7a:	bd80      	pop	{r7, pc}

08002f7c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b082      	sub	sp, #8
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8002f84:	46c0      	nop			@ (mov r8, r8)
 8002f86:	46bd      	mov	sp, r7
 8002f88:	b002      	add	sp, #8
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f94:	46c0      	nop			@ (mov r8, r8)
 8002f96:	46bd      	mov	sp, r7
 8002f98:	b002      	add	sp, #8
 8002f9a:	bd80      	pop	{r7, pc}

08002f9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b088      	sub	sp, #32
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fa4:	231e      	movs	r3, #30
 8002fa6:	18fb      	adds	r3, r7, r3
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	691b      	ldr	r3, [r3, #16]
 8002fb4:	431a      	orrs	r2, r3
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	695b      	ldr	r3, [r3, #20]
 8002fba:	431a      	orrs	r2, r3
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	4313      	orrs	r3, r2
 8002fc2:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4aab      	ldr	r2, [pc, #684]	@ (8003278 <UART_SetConfig+0x2dc>)
 8002fcc:	4013      	ands	r3, r2
 8002fce:	0019      	movs	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	4aa6      	ldr	r2, [pc, #664]	@ (800327c <UART_SetConfig+0x2e0>)
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	0019      	movs	r1, r3
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	68da      	ldr	r2, [r3, #12]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	699b      	ldr	r3, [r3, #24]
 8002ff6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	697a      	ldr	r2, [r7, #20]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	4a9d      	ldr	r2, [pc, #628]	@ (8003280 <UART_SetConfig+0x2e4>)
 800300a:	4013      	ands	r3, r2
 800300c:	0019      	movs	r1, r3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	430a      	orrs	r2, r1
 8003016:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800301e:	220f      	movs	r2, #15
 8003020:	4393      	bics	r3, r2
 8003022:	0019      	movs	r1, r3
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	430a      	orrs	r2, r1
 800302e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4a93      	ldr	r2, [pc, #588]	@ (8003284 <UART_SetConfig+0x2e8>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d127      	bne.n	800308a <UART_SetConfig+0xee>
 800303a:	4b93      	ldr	r3, [pc, #588]	@ (8003288 <UART_SetConfig+0x2ec>)
 800303c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800303e:	2203      	movs	r2, #3
 8003040:	4013      	ands	r3, r2
 8003042:	2b03      	cmp	r3, #3
 8003044:	d017      	beq.n	8003076 <UART_SetConfig+0xda>
 8003046:	d81b      	bhi.n	8003080 <UART_SetConfig+0xe4>
 8003048:	2b02      	cmp	r3, #2
 800304a:	d00a      	beq.n	8003062 <UART_SetConfig+0xc6>
 800304c:	d818      	bhi.n	8003080 <UART_SetConfig+0xe4>
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <UART_SetConfig+0xbc>
 8003052:	2b01      	cmp	r3, #1
 8003054:	d00a      	beq.n	800306c <UART_SetConfig+0xd0>
 8003056:	e013      	b.n	8003080 <UART_SetConfig+0xe4>
 8003058:	231f      	movs	r3, #31
 800305a:	18fb      	adds	r3, r7, r3
 800305c:	2200      	movs	r2, #0
 800305e:	701a      	strb	r2, [r3, #0]
 8003060:	e021      	b.n	80030a6 <UART_SetConfig+0x10a>
 8003062:	231f      	movs	r3, #31
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	2202      	movs	r2, #2
 8003068:	701a      	strb	r2, [r3, #0]
 800306a:	e01c      	b.n	80030a6 <UART_SetConfig+0x10a>
 800306c:	231f      	movs	r3, #31
 800306e:	18fb      	adds	r3, r7, r3
 8003070:	2204      	movs	r2, #4
 8003072:	701a      	strb	r2, [r3, #0]
 8003074:	e017      	b.n	80030a6 <UART_SetConfig+0x10a>
 8003076:	231f      	movs	r3, #31
 8003078:	18fb      	adds	r3, r7, r3
 800307a:	2208      	movs	r2, #8
 800307c:	701a      	strb	r2, [r3, #0]
 800307e:	e012      	b.n	80030a6 <UART_SetConfig+0x10a>
 8003080:	231f      	movs	r3, #31
 8003082:	18fb      	adds	r3, r7, r3
 8003084:	2210      	movs	r2, #16
 8003086:	701a      	strb	r2, [r3, #0]
 8003088:	e00d      	b.n	80030a6 <UART_SetConfig+0x10a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a7f      	ldr	r2, [pc, #508]	@ (800328c <UART_SetConfig+0x2f0>)
 8003090:	4293      	cmp	r3, r2
 8003092:	d104      	bne.n	800309e <UART_SetConfig+0x102>
 8003094:	231f      	movs	r3, #31
 8003096:	18fb      	adds	r3, r7, r3
 8003098:	2200      	movs	r2, #0
 800309a:	701a      	strb	r2, [r3, #0]
 800309c:	e003      	b.n	80030a6 <UART_SetConfig+0x10a>
 800309e:	231f      	movs	r3, #31
 80030a0:	18fb      	adds	r3, r7, r3
 80030a2:	2210      	movs	r2, #16
 80030a4:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	69da      	ldr	r2, [r3, #28]
 80030aa:	2380      	movs	r3, #128	@ 0x80
 80030ac:	021b      	lsls	r3, r3, #8
 80030ae:	429a      	cmp	r2, r3
 80030b0:	d000      	beq.n	80030b4 <UART_SetConfig+0x118>
 80030b2:	e06f      	b.n	8003194 <UART_SetConfig+0x1f8>
  {
    switch (clocksource)
 80030b4:	231f      	movs	r3, #31
 80030b6:	18fb      	adds	r3, r7, r3
 80030b8:	781b      	ldrb	r3, [r3, #0]
 80030ba:	2b08      	cmp	r3, #8
 80030bc:	d01f      	beq.n	80030fe <UART_SetConfig+0x162>
 80030be:	dc22      	bgt.n	8003106 <UART_SetConfig+0x16a>
 80030c0:	2b04      	cmp	r3, #4
 80030c2:	d017      	beq.n	80030f4 <UART_SetConfig+0x158>
 80030c4:	dc1f      	bgt.n	8003106 <UART_SetConfig+0x16a>
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d002      	beq.n	80030d0 <UART_SetConfig+0x134>
 80030ca:	2b02      	cmp	r3, #2
 80030cc:	d005      	beq.n	80030da <UART_SetConfig+0x13e>
 80030ce:	e01a      	b.n	8003106 <UART_SetConfig+0x16a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030d0:	f7ff f8ee 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
 80030d4:	0003      	movs	r3, r0
 80030d6:	61bb      	str	r3, [r7, #24]
        break;
 80030d8:	e01c      	b.n	8003114 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80030da:	4b6b      	ldr	r3, [pc, #428]	@ (8003288 <UART_SetConfig+0x2ec>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	095b      	lsrs	r3, r3, #5
 80030e0:	2207      	movs	r2, #7
 80030e2:	4013      	ands	r3, r2
 80030e4:	3301      	adds	r3, #1
 80030e6:	0019      	movs	r1, r3
 80030e8:	4869      	ldr	r0, [pc, #420]	@ (8003290 <UART_SetConfig+0x2f4>)
 80030ea:	f7fd f80d 	bl	8000108 <__udivsi3>
 80030ee:	0003      	movs	r3, r0
 80030f0:	61bb      	str	r3, [r7, #24]
        break;
 80030f2:	e00f      	b.n	8003114 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030f4:	f7ff f87c 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 80030f8:	0003      	movs	r3, r0
 80030fa:	61bb      	str	r3, [r7, #24]
        break;
 80030fc:	e00a      	b.n	8003114 <UART_SetConfig+0x178>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030fe:	2380      	movs	r3, #128	@ 0x80
 8003100:	021b      	lsls	r3, r3, #8
 8003102:	61bb      	str	r3, [r7, #24]
        break;
 8003104:	e006      	b.n	8003114 <UART_SetConfig+0x178>
      default:
        pclk = 0U;
 8003106:	2300      	movs	r3, #0
 8003108:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800310a:	231e      	movs	r3, #30
 800310c:	18fb      	adds	r3, r7, r3
 800310e:	2201      	movs	r2, #1
 8003110:	701a      	strb	r2, [r3, #0]
        break;
 8003112:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d100      	bne.n	800311c <UART_SetConfig+0x180>
 800311a:	e097      	b.n	800324c <UART_SetConfig+0x2b0>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003120:	4b5c      	ldr	r3, [pc, #368]	@ (8003294 <UART_SetConfig+0x2f8>)
 8003122:	0052      	lsls	r2, r2, #1
 8003124:	5ad3      	ldrh	r3, [r2, r3]
 8003126:	0019      	movs	r1, r3
 8003128:	69b8      	ldr	r0, [r7, #24]
 800312a:	f7fc ffed 	bl	8000108 <__udivsi3>
 800312e:	0003      	movs	r3, r0
 8003130:	005a      	lsls	r2, r3, #1
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	085b      	lsrs	r3, r3, #1
 8003138:	18d2      	adds	r2, r2, r3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	0019      	movs	r1, r3
 8003140:	0010      	movs	r0, r2
 8003142:	f7fc ffe1 	bl	8000108 <__udivsi3>
 8003146:	0003      	movs	r3, r0
 8003148:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800314a:	693b      	ldr	r3, [r7, #16]
 800314c:	2b0f      	cmp	r3, #15
 800314e:	d91c      	bls.n	800318a <UART_SetConfig+0x1ee>
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	2380      	movs	r3, #128	@ 0x80
 8003154:	025b      	lsls	r3, r3, #9
 8003156:	429a      	cmp	r2, r3
 8003158:	d217      	bcs.n	800318a <UART_SetConfig+0x1ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	b29a      	uxth	r2, r3
 800315e:	200e      	movs	r0, #14
 8003160:	183b      	adds	r3, r7, r0
 8003162:	210f      	movs	r1, #15
 8003164:	438a      	bics	r2, r1
 8003166:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	085b      	lsrs	r3, r3, #1
 800316c:	b29b      	uxth	r3, r3
 800316e:	2207      	movs	r2, #7
 8003170:	4013      	ands	r3, r2
 8003172:	b299      	uxth	r1, r3
 8003174:	183b      	adds	r3, r7, r0
 8003176:	183a      	adds	r2, r7, r0
 8003178:	8812      	ldrh	r2, [r2, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	183a      	adds	r2, r7, r0
 8003184:	8812      	ldrh	r2, [r2, #0]
 8003186:	60da      	str	r2, [r3, #12]
 8003188:	e060      	b.n	800324c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 800318a:	231e      	movs	r3, #30
 800318c:	18fb      	adds	r3, r7, r3
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
 8003192:	e05b      	b.n	800324c <UART_SetConfig+0x2b0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003194:	231f      	movs	r3, #31
 8003196:	18fb      	adds	r3, r7, r3
 8003198:	781b      	ldrb	r3, [r3, #0]
 800319a:	2b08      	cmp	r3, #8
 800319c:	d01f      	beq.n	80031de <UART_SetConfig+0x242>
 800319e:	dc22      	bgt.n	80031e6 <UART_SetConfig+0x24a>
 80031a0:	2b04      	cmp	r3, #4
 80031a2:	d017      	beq.n	80031d4 <UART_SetConfig+0x238>
 80031a4:	dc1f      	bgt.n	80031e6 <UART_SetConfig+0x24a>
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d002      	beq.n	80031b0 <UART_SetConfig+0x214>
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d005      	beq.n	80031ba <UART_SetConfig+0x21e>
 80031ae:	e01a      	b.n	80031e6 <UART_SetConfig+0x24a>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031b0:	f7ff f87e 	bl	80022b0 <HAL_RCC_GetPCLK1Freq>
 80031b4:	0003      	movs	r3, r0
 80031b6:	61bb      	str	r3, [r7, #24]
        break;
 80031b8:	e01c      	b.n	80031f4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_HSI:
        pclk = (HSI_VALUE / ((__HAL_RCC_GET_HSIKER_DIVIDER() >> RCC_CR_HSIKERDIV_Pos) + 1U));
 80031ba:	4b33      	ldr	r3, [pc, #204]	@ (8003288 <UART_SetConfig+0x2ec>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	095b      	lsrs	r3, r3, #5
 80031c0:	2207      	movs	r2, #7
 80031c2:	4013      	ands	r3, r2
 80031c4:	3301      	adds	r3, #1
 80031c6:	0019      	movs	r1, r3
 80031c8:	4831      	ldr	r0, [pc, #196]	@ (8003290 <UART_SetConfig+0x2f4>)
 80031ca:	f7fc ff9d 	bl	8000108 <__udivsi3>
 80031ce:	0003      	movs	r3, r0
 80031d0:	61bb      	str	r3, [r7, #24]
        break;
 80031d2:	e00f      	b.n	80031f4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031d4:	f7ff f80c 	bl	80021f0 <HAL_RCC_GetSysClockFreq>
 80031d8:	0003      	movs	r3, r0
 80031da:	61bb      	str	r3, [r7, #24]
        break;
 80031dc:	e00a      	b.n	80031f4 <UART_SetConfig+0x258>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031de:	2380      	movs	r3, #128	@ 0x80
 80031e0:	021b      	lsls	r3, r3, #8
 80031e2:	61bb      	str	r3, [r7, #24]
        break;
 80031e4:	e006      	b.n	80031f4 <UART_SetConfig+0x258>
      default:
        pclk = 0U;
 80031e6:	2300      	movs	r3, #0
 80031e8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80031ea:	231e      	movs	r3, #30
 80031ec:	18fb      	adds	r3, r7, r3
 80031ee:	2201      	movs	r2, #1
 80031f0:	701a      	strb	r2, [r3, #0]
        break;
 80031f2:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80031f4:	69bb      	ldr	r3, [r7, #24]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d028      	beq.n	800324c <UART_SetConfig+0x2b0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80031fe:	4b25      	ldr	r3, [pc, #148]	@ (8003294 <UART_SetConfig+0x2f8>)
 8003200:	0052      	lsls	r2, r2, #1
 8003202:	5ad3      	ldrh	r3, [r2, r3]
 8003204:	0019      	movs	r1, r3
 8003206:	69b8      	ldr	r0, [r7, #24]
 8003208:	f7fc ff7e 	bl	8000108 <__udivsi3>
 800320c:	0003      	movs	r3, r0
 800320e:	001a      	movs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	085b      	lsrs	r3, r3, #1
 8003216:	18d2      	adds	r2, r2, r3
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	0019      	movs	r1, r3
 800321e:	0010      	movs	r0, r2
 8003220:	f7fc ff72 	bl	8000108 <__udivsi3>
 8003224:	0003      	movs	r3, r0
 8003226:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	2b0f      	cmp	r3, #15
 800322c:	d90a      	bls.n	8003244 <UART_SetConfig+0x2a8>
 800322e:	693a      	ldr	r2, [r7, #16]
 8003230:	2380      	movs	r3, #128	@ 0x80
 8003232:	025b      	lsls	r3, r3, #9
 8003234:	429a      	cmp	r2, r3
 8003236:	d205      	bcs.n	8003244 <UART_SetConfig+0x2a8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	b29a      	uxth	r2, r3
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	e003      	b.n	800324c <UART_SetConfig+0x2b0>
      }
      else
      {
        ret = HAL_ERROR;
 8003244:	231e      	movs	r3, #30
 8003246:	18fb      	adds	r3, r7, r3
 8003248:	2201      	movs	r2, #1
 800324a:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	226a      	movs	r2, #106	@ 0x6a
 8003250:	2101      	movs	r1, #1
 8003252:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2268      	movs	r2, #104	@ 0x68
 8003258:	2101      	movs	r1, #1
 800325a:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	2200      	movs	r2, #0
 8003260:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2200      	movs	r2, #0
 8003266:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8003268:	231e      	movs	r3, #30
 800326a:	18fb      	adds	r3, r7, r3
 800326c:	781b      	ldrb	r3, [r3, #0]
}
 800326e:	0018      	movs	r0, r3
 8003270:	46bd      	mov	sp, r7
 8003272:	b008      	add	sp, #32
 8003274:	bd80      	pop	{r7, pc}
 8003276:	46c0      	nop			@ (mov r8, r8)
 8003278:	cfff69f3 	.word	0xcfff69f3
 800327c:	ffffcfff 	.word	0xffffcfff
 8003280:	11fff4ff 	.word	0x11fff4ff
 8003284:	40013800 	.word	0x40013800
 8003288:	40021000 	.word	0x40021000
 800328c:	40004400 	.word	0x40004400
 8003290:	02dc6c00 	.word	0x02dc6c00
 8003294:	08003bc0 	.word	0x08003bc0

08003298 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0
 800329e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032a4:	2208      	movs	r2, #8
 80032a6:	4013      	ands	r3, r2
 80032a8:	d00b      	beq.n	80032c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	4a4a      	ldr	r2, [pc, #296]	@ (80033dc <UART_AdvFeatureConfig+0x144>)
 80032b2:	4013      	ands	r3, r2
 80032b4:	0019      	movs	r1, r3
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	430a      	orrs	r2, r1
 80032c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032c6:	2201      	movs	r2, #1
 80032c8:	4013      	ands	r3, r2
 80032ca:	d00b      	beq.n	80032e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	4a43      	ldr	r2, [pc, #268]	@ (80033e0 <UART_AdvFeatureConfig+0x148>)
 80032d4:	4013      	ands	r3, r2
 80032d6:	0019      	movs	r1, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	430a      	orrs	r2, r1
 80032e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e8:	2202      	movs	r2, #2
 80032ea:	4013      	ands	r3, r2
 80032ec:	d00b      	beq.n	8003306 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	4a3b      	ldr	r2, [pc, #236]	@ (80033e4 <UART_AdvFeatureConfig+0x14c>)
 80032f6:	4013      	ands	r3, r2
 80032f8:	0019      	movs	r1, r3
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	430a      	orrs	r2, r1
 8003304:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330a:	2204      	movs	r2, #4
 800330c:	4013      	ands	r3, r2
 800330e:	d00b      	beq.n	8003328 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	4a34      	ldr	r2, [pc, #208]	@ (80033e8 <UART_AdvFeatureConfig+0x150>)
 8003318:	4013      	ands	r3, r2
 800331a:	0019      	movs	r1, r3
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	430a      	orrs	r2, r1
 8003326:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800332c:	2210      	movs	r2, #16
 800332e:	4013      	ands	r3, r2
 8003330:	d00b      	beq.n	800334a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	4a2c      	ldr	r2, [pc, #176]	@ (80033ec <UART_AdvFeatureConfig+0x154>)
 800333a:	4013      	ands	r3, r2
 800333c:	0019      	movs	r1, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	609a      	str	r2, [r3, #8]
  }

#if defined(HAL_DMA_MODULE_ENABLED)
  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800334e:	2220      	movs	r2, #32
 8003350:	4013      	ands	r3, r2
 8003352:	d00b      	beq.n	800336c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	4a25      	ldr	r2, [pc, #148]	@ (80033f0 <UART_AdvFeatureConfig+0x158>)
 800335c:	4013      	ands	r3, r2
 800335e:	0019      	movs	r1, r3
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	609a      	str	r2, [r3, #8]
  }
#endif /* HAL_DMA_MODULE_ENABLED */

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003370:	2240      	movs	r2, #64	@ 0x40
 8003372:	4013      	ands	r3, r2
 8003374:	d01d      	beq.n	80033b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	4a1d      	ldr	r2, [pc, #116]	@ (80033f4 <UART_AdvFeatureConfig+0x15c>)
 800337e:	4013      	ands	r3, r2
 8003380:	0019      	movs	r1, r3
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003392:	2380      	movs	r3, #128	@ 0x80
 8003394:	035b      	lsls	r3, r3, #13
 8003396:	429a      	cmp	r2, r3
 8003398:	d10b      	bne.n	80033b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	4a15      	ldr	r2, [pc, #84]	@ (80033f8 <UART_AdvFeatureConfig+0x160>)
 80033a2:	4013      	ands	r3, r2
 80033a4:	0019      	movs	r1, r3
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	430a      	orrs	r2, r1
 80033b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033b6:	2280      	movs	r2, #128	@ 0x80
 80033b8:	4013      	ands	r3, r2
 80033ba:	d00b      	beq.n	80033d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	4a0e      	ldr	r2, [pc, #56]	@ (80033fc <UART_AdvFeatureConfig+0x164>)
 80033c4:	4013      	ands	r3, r2
 80033c6:	0019      	movs	r1, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	430a      	orrs	r2, r1
 80033d2:	605a      	str	r2, [r3, #4]
  }
}
 80033d4:	46c0      	nop			@ (mov r8, r8)
 80033d6:	46bd      	mov	sp, r7
 80033d8:	b002      	add	sp, #8
 80033da:	bd80      	pop	{r7, pc}
 80033dc:	ffff7fff 	.word	0xffff7fff
 80033e0:	fffdffff 	.word	0xfffdffff
 80033e4:	fffeffff 	.word	0xfffeffff
 80033e8:	fffbffff 	.word	0xfffbffff
 80033ec:	ffffefff 	.word	0xffffefff
 80033f0:	ffffdfff 	.word	0xffffdfff
 80033f4:	ffefffff 	.word	0xffefffff
 80033f8:	ff9fffff 	.word	0xff9fffff
 80033fc:	fff7ffff 	.word	0xfff7ffff

08003400 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b092      	sub	sp, #72	@ 0x48
 8003404:	af02      	add	r7, sp, #8
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2290      	movs	r2, #144	@ 0x90
 800340c:	2100      	movs	r1, #0
 800340e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003410:	f7fd ff48 	bl	80012a4 <HAL_GetTick>
 8003414:	0003      	movs	r3, r0
 8003416:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	2208      	movs	r2, #8
 8003420:	4013      	ands	r3, r2
 8003422:	2b08      	cmp	r3, #8
 8003424:	d12d      	bne.n	8003482 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003426:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003428:	2280      	movs	r2, #128	@ 0x80
 800342a:	0391      	lsls	r1, r2, #14
 800342c:	6878      	ldr	r0, [r7, #4]
 800342e:	4a47      	ldr	r2, [pc, #284]	@ (800354c <UART_CheckIdleState+0x14c>)
 8003430:	9200      	str	r2, [sp, #0]
 8003432:	2200      	movs	r2, #0
 8003434:	f000 f88e 	bl	8003554 <UART_WaitOnFlagUntilTimeout>
 8003438:	1e03      	subs	r3, r0, #0
 800343a:	d022      	beq.n	8003482 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800343c:	f3ef 8310 	mrs	r3, PRIMASK
 8003440:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8003442:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003444:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003446:	2301      	movs	r3, #1
 8003448:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800344a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800344c:	f383 8810 	msr	PRIMASK, r3
}
 8003450:	46c0      	nop			@ (mov r8, r8)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2180      	movs	r1, #128	@ 0x80
 800345e:	438a      	bics	r2, r1
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003464:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003466:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003468:	f383 8810 	msr	PRIMASK, r3
}
 800346c:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2288      	movs	r2, #136	@ 0x88
 8003472:	2120      	movs	r1, #32
 8003474:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2284      	movs	r2, #132	@ 0x84
 800347a:	2100      	movs	r1, #0
 800347c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800347e:	2303      	movs	r3, #3
 8003480:	e060      	b.n	8003544 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	2204      	movs	r2, #4
 800348a:	4013      	ands	r3, r2
 800348c:	2b04      	cmp	r3, #4
 800348e:	d146      	bne.n	800351e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003490:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003492:	2280      	movs	r2, #128	@ 0x80
 8003494:	03d1      	lsls	r1, r2, #15
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	4a2c      	ldr	r2, [pc, #176]	@ (800354c <UART_CheckIdleState+0x14c>)
 800349a:	9200      	str	r2, [sp, #0]
 800349c:	2200      	movs	r2, #0
 800349e:	f000 f859 	bl	8003554 <UART_WaitOnFlagUntilTimeout>
 80034a2:	1e03      	subs	r3, r0, #0
 80034a4:	d03b      	beq.n	800351e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80034a6:	f3ef 8310 	mrs	r3, PRIMASK
 80034aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80034ac:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80034ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80034b0:	2301      	movs	r3, #1
 80034b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034b4:	693b      	ldr	r3, [r7, #16]
 80034b6:	f383 8810 	msr	PRIMASK, r3
}
 80034ba:	46c0      	nop			@ (mov r8, r8)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	4922      	ldr	r1, [pc, #136]	@ (8003550 <UART_CheckIdleState+0x150>)
 80034c8:	400a      	ands	r2, r1
 80034ca:	601a      	str	r2, [r3, #0]
 80034cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80034ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034d0:	697b      	ldr	r3, [r7, #20]
 80034d2:	f383 8810 	msr	PRIMASK, r3
}
 80034d6:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80034d8:	f3ef 8310 	mrs	r3, PRIMASK
 80034dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80034de:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e0:	633b      	str	r3, [r7, #48]	@ 0x30
 80034e2:	2301      	movs	r3, #1
 80034e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80034e6:	69fb      	ldr	r3, [r7, #28]
 80034e8:	f383 8810 	msr	PRIMASK, r3
}
 80034ec:	46c0      	nop			@ (mov r8, r8)
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	689a      	ldr	r2, [r3, #8]
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	2101      	movs	r1, #1
 80034fa:	438a      	bics	r2, r1
 80034fc:	609a      	str	r2, [r3, #8]
 80034fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003500:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003502:	6a3b      	ldr	r3, [r7, #32]
 8003504:	f383 8810 	msr	PRIMASK, r3
}
 8003508:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	228c      	movs	r2, #140	@ 0x8c
 800350e:	2120      	movs	r1, #32
 8003510:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2284      	movs	r2, #132	@ 0x84
 8003516:	2100      	movs	r1, #0
 8003518:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800351a:	2303      	movs	r3, #3
 800351c:	e012      	b.n	8003544 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	2288      	movs	r2, #136	@ 0x88
 8003522:	2120      	movs	r1, #32
 8003524:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	228c      	movs	r2, #140	@ 0x8c
 800352a:	2120      	movs	r1, #32
 800352c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	2200      	movs	r2, #0
 8003532:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	2200      	movs	r2, #0
 8003538:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	2284      	movs	r2, #132	@ 0x84
 800353e:	2100      	movs	r1, #0
 8003540:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003542:	2300      	movs	r3, #0
}
 8003544:	0018      	movs	r0, r3
 8003546:	46bd      	mov	sp, r7
 8003548:	b010      	add	sp, #64	@ 0x40
 800354a:	bd80      	pop	{r7, pc}
 800354c:	01ffffff 	.word	0x01ffffff
 8003550:	fffffedf 	.word	0xfffffedf

08003554 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003554:	b580      	push	{r7, lr}
 8003556:	b084      	sub	sp, #16
 8003558:	af00      	add	r7, sp, #0
 800355a:	60f8      	str	r0, [r7, #12]
 800355c:	60b9      	str	r1, [r7, #8]
 800355e:	603b      	str	r3, [r7, #0]
 8003560:	1dfb      	adds	r3, r7, #7
 8003562:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003564:	e051      	b.n	800360a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003566:	69bb      	ldr	r3, [r7, #24]
 8003568:	3301      	adds	r3, #1
 800356a:	d04e      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356c:	f7fd fe9a 	bl	80012a4 <HAL_GetTick>
 8003570:	0002      	movs	r2, r0
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	1ad3      	subs	r3, r2, r3
 8003576:	69ba      	ldr	r2, [r7, #24]
 8003578:	429a      	cmp	r2, r3
 800357a:	d302      	bcc.n	8003582 <UART_WaitOnFlagUntilTimeout+0x2e>
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e051      	b.n	800362a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2204      	movs	r2, #4
 800358e:	4013      	ands	r3, r2
 8003590:	d03b      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	2b80      	cmp	r3, #128	@ 0x80
 8003596:	d038      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003598:	68bb      	ldr	r3, [r7, #8]
 800359a:	2b40      	cmp	r3, #64	@ 0x40
 800359c:	d035      	beq.n	800360a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69db      	ldr	r3, [r3, #28]
 80035a4:	2208      	movs	r2, #8
 80035a6:	4013      	ands	r3, r2
 80035a8:	2b08      	cmp	r3, #8
 80035aa:	d111      	bne.n	80035d0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2208      	movs	r2, #8
 80035b2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	0018      	movs	r0, r3
 80035b8:	f000 f87c 	bl	80036b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2290      	movs	r2, #144	@ 0x90
 80035c0:	2108      	movs	r1, #8
 80035c2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2284      	movs	r2, #132	@ 0x84
 80035c8:	2100      	movs	r1, #0
 80035ca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e02c      	b.n	800362a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	69da      	ldr	r2, [r3, #28]
 80035d6:	2380      	movs	r3, #128	@ 0x80
 80035d8:	011b      	lsls	r3, r3, #4
 80035da:	401a      	ands	r2, r3
 80035dc:	2380      	movs	r3, #128	@ 0x80
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	429a      	cmp	r2, r3
 80035e2:	d112      	bne.n	800360a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	2280      	movs	r2, #128	@ 0x80
 80035ea:	0112      	lsls	r2, r2, #4
 80035ec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	0018      	movs	r0, r3
 80035f2:	f000 f85f 	bl	80036b4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	2290      	movs	r2, #144	@ 0x90
 80035fa:	2120      	movs	r1, #32
 80035fc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	2284      	movs	r2, #132	@ 0x84
 8003602:	2100      	movs	r1, #0
 8003604:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e00f      	b.n	800362a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	68ba      	ldr	r2, [r7, #8]
 8003612:	4013      	ands	r3, r2
 8003614:	68ba      	ldr	r2, [r7, #8]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	425a      	negs	r2, r3
 800361a:	4153      	adcs	r3, r2
 800361c:	b2db      	uxtb	r3, r3
 800361e:	001a      	movs	r2, r3
 8003620:	1dfb      	adds	r3, r7, #7
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	429a      	cmp	r2, r3
 8003626:	d09e      	beq.n	8003566 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003628:	2300      	movs	r3, #0
}
 800362a:	0018      	movs	r0, r3
 800362c:	46bd      	mov	sp, r7
 800362e:	b004      	add	sp, #16
 8003630:	bd80      	pop	{r7, pc}
	...

08003634 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8003634:	b580      	push	{r7, lr}
 8003636:	b08a      	sub	sp, #40	@ 0x28
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800363c:	f3ef 8310 	mrs	r3, PRIMASK
 8003640:	60bb      	str	r3, [r7, #8]
  return(result);
 8003642:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE, TCIE, TXFT interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE | USART_CR1_TCIE));
 8003644:	627b      	str	r3, [r7, #36]	@ 0x24
 8003646:	2301      	movs	r3, #1
 8003648:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f383 8810 	msr	PRIMASK, r3
}
 8003650:	46c0      	nop			@ (mov r8, r8)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	21c0      	movs	r1, #192	@ 0xc0
 800365e:	438a      	bics	r2, r1
 8003660:	601a      	str	r2, [r3, #0]
 8003662:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003664:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	f383 8810 	msr	PRIMASK, r3
}
 800366c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 800366e:	f3ef 8310 	mrs	r3, PRIMASK
 8003672:	617b      	str	r3, [r7, #20]
  return(result);
 8003674:	697b      	ldr	r3, [r7, #20]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_TXFTIE));
 8003676:	623b      	str	r3, [r7, #32]
 8003678:	2301      	movs	r3, #1
 800367a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	f383 8810 	msr	PRIMASK, r3
}
 8003682:	46c0      	nop			@ (mov r8, r8)
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	689a      	ldr	r2, [r3, #8]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4908      	ldr	r1, [pc, #32]	@ (80036b0 <UART_EndTxTransfer+0x7c>)
 8003690:	400a      	ands	r2, r1
 8003692:	609a      	str	r2, [r3, #8]
 8003694:	6a3b      	ldr	r3, [r7, #32]
 8003696:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003698:	69fb      	ldr	r3, [r7, #28]
 800369a:	f383 8810 	msr	PRIMASK, r3
}
 800369e:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2288      	movs	r2, #136	@ 0x88
 80036a4:	2120      	movs	r1, #32
 80036a6:	5099      	str	r1, [r3, r2]
}
 80036a8:	46c0      	nop			@ (mov r8, r8)
 80036aa:	46bd      	mov	sp, r7
 80036ac:	b00a      	add	sp, #40	@ 0x28
 80036ae:	bd80      	pop	{r7, pc}
 80036b0:	ff7fffff 	.word	0xff7fffff

080036b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b08e      	sub	sp, #56	@ 0x38
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036bc:	f3ef 8310 	mrs	r3, PRIMASK
 80036c0:	617b      	str	r3, [r7, #20]
  return(result);
 80036c2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80036c4:	637b      	str	r3, [r7, #52]	@ 0x34
 80036c6:	2301      	movs	r3, #1
 80036c8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036ca:	69bb      	ldr	r3, [r7, #24]
 80036cc:	f383 8810 	msr	PRIMASK, r3
}
 80036d0:	46c0      	nop			@ (mov r8, r8)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	681a      	ldr	r2, [r3, #0]
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	4926      	ldr	r1, [pc, #152]	@ (8003778 <UART_EndRxTransfer+0xc4>)
 80036de:	400a      	ands	r2, r1
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	f383 8810 	msr	PRIMASK, r3
}
 80036ec:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80036ee:	f3ef 8310 	mrs	r3, PRIMASK
 80036f2:	623b      	str	r3, [r7, #32]
  return(result);
 80036f4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80036f6:	633b      	str	r3, [r7, #48]	@ 0x30
 80036f8:	2301      	movs	r3, #1
 80036fa:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80036fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036fe:	f383 8810 	msr	PRIMASK, r3
}
 8003702:	46c0      	nop			@ (mov r8, r8)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	689a      	ldr	r2, [r3, #8]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	491b      	ldr	r1, [pc, #108]	@ (800377c <UART_EndRxTransfer+0xc8>)
 8003710:	400a      	ands	r2, r1
 8003712:	609a      	str	r2, [r3, #8]
 8003714:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003716:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003718:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800371a:	f383 8810 	msr	PRIMASK, r3
}
 800371e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003724:	2b01      	cmp	r3, #1
 8003726:	d118      	bne.n	800375a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 8003728:	f3ef 8310 	mrs	r3, PRIMASK
 800372c:	60bb      	str	r3, [r7, #8]
  return(result);
 800372e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003730:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003732:	2301      	movs	r3, #1
 8003734:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	f383 8810 	msr	PRIMASK, r3
}
 800373c:	46c0      	nop			@ (mov r8, r8)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	2110      	movs	r1, #16
 800374a:	438a      	bics	r2, r1
 800374c:	601a      	str	r2, [r3, #0]
 800374e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003750:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003752:	693b      	ldr	r3, [r7, #16]
 8003754:	f383 8810 	msr	PRIMASK, r3
}
 8003758:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	228c      	movs	r2, #140	@ 0x8c
 800375e:	2120      	movs	r1, #32
 8003760:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800376e:	46c0      	nop			@ (mov r8, r8)
 8003770:	46bd      	mov	sp, r7
 8003772:	b00e      	add	sp, #56	@ 0x38
 8003774:	bd80      	pop	{r7, pc}
 8003776:	46c0      	nop			@ (mov r8, r8)
 8003778:	fffffedf 	.word	0xfffffedf
 800377c:	effffffe 	.word	0xeffffffe

08003780 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	b08c      	sub	sp, #48	@ 0x30
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800378c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2220      	movs	r2, #32
 8003796:	4013      	ands	r3, r2
 8003798:	d135      	bne.n	8003806 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 800379a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800379c:	2256      	movs	r2, #86	@ 0x56
 800379e:	2100      	movs	r1, #0
 80037a0:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80037a2:	f3ef 8310 	mrs	r3, PRIMASK
 80037a6:	60fb      	str	r3, [r7, #12]
  return(result);
 80037a8:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80037aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80037ac:	2301      	movs	r3, #1
 80037ae:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	f383 8810 	msr	PRIMASK, r3
}
 80037b6:	46c0      	nop			@ (mov r8, r8)
 80037b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	689a      	ldr	r2, [r3, #8]
 80037be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	2180      	movs	r1, #128	@ 0x80
 80037c4:	438a      	bics	r2, r1
 80037c6:	609a      	str	r2, [r3, #8]
 80037c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ca:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	f383 8810 	msr	PRIMASK, r3
}
 80037d2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) );
 80037d4:	f3ef 8310 	mrs	r3, PRIMASK
 80037d8:	61bb      	str	r3, [r7, #24]
  return(result);
 80037da:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80037dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80037de:	2301      	movs	r3, #1
 80037e0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037e2:	69fb      	ldr	r3, [r7, #28]
 80037e4:	f383 8810 	msr	PRIMASK, r3
}
 80037e8:	46c0      	nop			@ (mov r8, r8)
 80037ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2140      	movs	r1, #64	@ 0x40
 80037f6:	430a      	orrs	r2, r1
 80037f8:	601a      	str	r2, [r3, #0]
 80037fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037fc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037fe:	6a3b      	ldr	r3, [r7, #32]
 8003800:	f383 8810 	msr	PRIMASK, r3
}
 8003804:	e004      	b.n	8003810 <UART_DMATransmitCplt+0x90>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8003806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003808:	0018      	movs	r0, r3
 800380a:	f7ff fbaf 	bl	8002f6c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800380e:	46c0      	nop			@ (mov r8, r8)
 8003810:	46c0      	nop			@ (mov r8, r8)
 8003812:	46bd      	mov	sp, r7
 8003814:	b00c      	add	sp, #48	@ 0x30
 8003816:	bd80      	pop	{r7, pc}

08003818 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003818:	b580      	push	{r7, lr}
 800381a:	b084      	sub	sp, #16
 800381c:	af00      	add	r7, sp, #0
 800381e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003824:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	0018      	movs	r0, r3
 800382a:	f7ff fba7 	bl	8002f7c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800382e:	46c0      	nop			@ (mov r8, r8)
 8003830:	46bd      	mov	sp, r7
 8003832:	b004      	add	sp, #16
 8003834:	bd80      	pop	{r7, pc}

08003836 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8003836:	b580      	push	{r7, lr}
 8003838:	b086      	sub	sp, #24
 800383a:	af00      	add	r7, sp, #0
 800383c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003842:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8003844:	697b      	ldr	r3, [r7, #20]
 8003846:	2288      	movs	r2, #136	@ 0x88
 8003848:	589b      	ldr	r3, [r3, r2]
 800384a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800384c:	697b      	ldr	r3, [r7, #20]
 800384e:	228c      	movs	r2, #140	@ 0x8c
 8003850:	589b      	ldr	r3, [r3, r2]
 8003852:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	2280      	movs	r2, #128	@ 0x80
 800385c:	4013      	ands	r3, r2
 800385e:	2b80      	cmp	r3, #128	@ 0x80
 8003860:	d10a      	bne.n	8003878 <UART_DMAError+0x42>
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	2b21      	cmp	r3, #33	@ 0x21
 8003866:	d107      	bne.n	8003878 <UART_DMAError+0x42>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	2256      	movs	r2, #86	@ 0x56
 800386c:	2100      	movs	r1, #0
 800386e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	0018      	movs	r0, r3
 8003874:	f7ff fede 	bl	8003634 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	2240      	movs	r2, #64	@ 0x40
 8003880:	4013      	ands	r3, r2
 8003882:	2b40      	cmp	r3, #64	@ 0x40
 8003884:	d10a      	bne.n	800389c <UART_DMAError+0x66>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2b22      	cmp	r3, #34	@ 0x22
 800388a:	d107      	bne.n	800389c <UART_DMAError+0x66>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	225e      	movs	r2, #94	@ 0x5e
 8003890:	2100      	movs	r1, #0
 8003892:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	0018      	movs	r0, r3
 8003898:	f7ff ff0c 	bl	80036b4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	2290      	movs	r2, #144	@ 0x90
 80038a0:	589b      	ldr	r3, [r3, r2]
 80038a2:	2210      	movs	r2, #16
 80038a4:	431a      	orrs	r2, r3
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	2190      	movs	r1, #144	@ 0x90
 80038aa:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80038ac:	697b      	ldr	r3, [r7, #20]
 80038ae:	0018      	movs	r0, r3
 80038b0:	f7ff fb6c 	bl	8002f8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038b4:	46c0      	nop			@ (mov r8, r8)
 80038b6:	46bd      	mov	sp, r7
 80038b8:	b006      	add	sp, #24
 80038ba:	bd80      	pop	{r7, pc}

080038bc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b084      	sub	sp, #16
 80038c0:	af00      	add	r7, sp, #0
 80038c2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2284      	movs	r2, #132	@ 0x84
 80038c8:	5c9b      	ldrb	r3, [r3, r2]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d101      	bne.n	80038d2 <HAL_UARTEx_DisableFifoMode+0x16>
 80038ce:	2302      	movs	r3, #2
 80038d0:	e027      	b.n	8003922 <HAL_UARTEx_DisableFifoMode+0x66>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2284      	movs	r2, #132	@ 0x84
 80038d6:	2101      	movs	r1, #1
 80038d8:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2288      	movs	r2, #136	@ 0x88
 80038de:	2124      	movs	r1, #36	@ 0x24
 80038e0:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	681a      	ldr	r2, [r3, #0]
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	2101      	movs	r1, #1
 80038f6:	438a      	bics	r2, r1
 80038f8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	4a0b      	ldr	r2, [pc, #44]	@ (800392c <HAL_UARTEx_DisableFifoMode+0x70>)
 80038fe:	4013      	ands	r3, r2
 8003900:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	2200      	movs	r2, #0
 8003906:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68fa      	ldr	r2, [r7, #12]
 800390e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2288      	movs	r2, #136	@ 0x88
 8003914:	2120      	movs	r1, #32
 8003916:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2284      	movs	r2, #132	@ 0x84
 800391c:	2100      	movs	r1, #0
 800391e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	0018      	movs	r0, r3
 8003924:	46bd      	mov	sp, r7
 8003926:	b004      	add	sp, #16
 8003928:	bd80      	pop	{r7, pc}
 800392a:	46c0      	nop			@ (mov r8, r8)
 800392c:	dfffffff 	.word	0xdfffffff

08003930 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b084      	sub	sp, #16
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
 8003938:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2284      	movs	r2, #132	@ 0x84
 800393e:	5c9b      	ldrb	r3, [r3, r2]
 8003940:	2b01      	cmp	r3, #1
 8003942:	d101      	bne.n	8003948 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003944:	2302      	movs	r3, #2
 8003946:	e02e      	b.n	80039a6 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2284      	movs	r2, #132	@ 0x84
 800394c:	2101      	movs	r1, #1
 800394e:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2288      	movs	r2, #136	@ 0x88
 8003954:	2124      	movs	r1, #36	@ 0x24
 8003956:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2101      	movs	r1, #1
 800396c:	438a      	bics	r2, r1
 800396e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	00db      	lsls	r3, r3, #3
 8003978:	08d9      	lsrs	r1, r3, #3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	683a      	ldr	r2, [r7, #0]
 8003980:	430a      	orrs	r2, r1
 8003982:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	0018      	movs	r0, r3
 8003988:	f000 f854 	bl	8003a34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2288      	movs	r2, #136	@ 0x88
 8003998:	2120      	movs	r1, #32
 800399a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	2284      	movs	r2, #132	@ 0x84
 80039a0:	2100      	movs	r1, #0
 80039a2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	0018      	movs	r0, r3
 80039a8:	46bd      	mov	sp, r7
 80039aa:	b004      	add	sp, #16
 80039ac:	bd80      	pop	{r7, pc}
	...

080039b0 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b084      	sub	sp, #16
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	2284      	movs	r2, #132	@ 0x84
 80039be:	5c9b      	ldrb	r3, [r3, r2]
 80039c0:	2b01      	cmp	r3, #1
 80039c2:	d101      	bne.n	80039c8 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80039c4:	2302      	movs	r3, #2
 80039c6:	e02f      	b.n	8003a28 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2284      	movs	r2, #132	@ 0x84
 80039cc:	2101      	movs	r1, #1
 80039ce:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2288      	movs	r2, #136	@ 0x88
 80039d4:	2124      	movs	r1, #36	@ 0x24
 80039d6:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	2101      	movs	r1, #1
 80039ec:	438a      	bics	r2, r1
 80039ee:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	4a0e      	ldr	r2, [pc, #56]	@ (8003a30 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80039f8:	4013      	ands	r3, r2
 80039fa:	0019      	movs	r1, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	683a      	ldr	r2, [r7, #0]
 8003a02:	430a      	orrs	r2, r1
 8003a04:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	0018      	movs	r0, r3
 8003a0a:	f000 f813 	bl	8003a34 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2288      	movs	r2, #136	@ 0x88
 8003a1a:	2120      	movs	r1, #32
 8003a1c:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2284      	movs	r2, #132	@ 0x84
 8003a22:	2100      	movs	r1, #0
 8003a24:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a26:	2300      	movs	r3, #0
}
 8003a28:	0018      	movs	r0, r3
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	b004      	add	sp, #16
 8003a2e:	bd80      	pop	{r7, pc}
 8003a30:	f1ffffff 	.word	0xf1ffffff

08003a34 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003a34:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a36:	b085      	sub	sp, #20
 8003a38:	af00      	add	r7, sp, #0
 8003a3a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d108      	bne.n	8003a56 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	226a      	movs	r2, #106	@ 0x6a
 8003a48:	2101      	movs	r1, #1
 8003a4a:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2268      	movs	r2, #104	@ 0x68
 8003a50:	2101      	movs	r1, #1
 8003a52:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003a54:	e043      	b.n	8003ade <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003a56:	260f      	movs	r6, #15
 8003a58:	19bb      	adds	r3, r7, r6
 8003a5a:	2208      	movs	r2, #8
 8003a5c:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003a5e:	200e      	movs	r0, #14
 8003a60:	183b      	adds	r3, r7, r0
 8003a62:	2208      	movs	r2, #8
 8003a64:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	0e5b      	lsrs	r3, r3, #25
 8003a6e:	b2da      	uxtb	r2, r3
 8003a70:	240d      	movs	r4, #13
 8003a72:	193b      	adds	r3, r7, r4
 8003a74:	2107      	movs	r1, #7
 8003a76:	400a      	ands	r2, r1
 8003a78:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	0f5b      	lsrs	r3, r3, #29
 8003a82:	b2da      	uxtb	r2, r3
 8003a84:	250c      	movs	r5, #12
 8003a86:	197b      	adds	r3, r7, r5
 8003a88:	2107      	movs	r1, #7
 8003a8a:	400a      	ands	r2, r1
 8003a8c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003a8e:	183b      	adds	r3, r7, r0
 8003a90:	781b      	ldrb	r3, [r3, #0]
 8003a92:	197a      	adds	r2, r7, r5
 8003a94:	7812      	ldrb	r2, [r2, #0]
 8003a96:	4914      	ldr	r1, [pc, #80]	@ (8003ae8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003a98:	5c8a      	ldrb	r2, [r1, r2]
 8003a9a:	435a      	muls	r2, r3
 8003a9c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8003a9e:	197b      	adds	r3, r7, r5
 8003aa0:	781b      	ldrb	r3, [r3, #0]
 8003aa2:	4a12      	ldr	r2, [pc, #72]	@ (8003aec <UARTEx_SetNbDataToProcess+0xb8>)
 8003aa4:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003aa6:	0019      	movs	r1, r3
 8003aa8:	f7fc fbb8 	bl	800021c <__divsi3>
 8003aac:	0003      	movs	r3, r0
 8003aae:	b299      	uxth	r1, r3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	226a      	movs	r2, #106	@ 0x6a
 8003ab4:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ab6:	19bb      	adds	r3, r7, r6
 8003ab8:	781b      	ldrb	r3, [r3, #0]
 8003aba:	193a      	adds	r2, r7, r4
 8003abc:	7812      	ldrb	r2, [r2, #0]
 8003abe:	490a      	ldr	r1, [pc, #40]	@ (8003ae8 <UARTEx_SetNbDataToProcess+0xb4>)
 8003ac0:	5c8a      	ldrb	r2, [r1, r2]
 8003ac2:	435a      	muls	r2, r3
 8003ac4:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8003ac6:	193b      	adds	r3, r7, r4
 8003ac8:	781b      	ldrb	r3, [r3, #0]
 8003aca:	4a08      	ldr	r2, [pc, #32]	@ (8003aec <UARTEx_SetNbDataToProcess+0xb8>)
 8003acc:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003ace:	0019      	movs	r1, r3
 8003ad0:	f7fc fba4 	bl	800021c <__divsi3>
 8003ad4:	0003      	movs	r3, r0
 8003ad6:	b299      	uxth	r1, r3
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2268      	movs	r2, #104	@ 0x68
 8003adc:	5299      	strh	r1, [r3, r2]
}
 8003ade:	46c0      	nop			@ (mov r8, r8)
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	b005      	add	sp, #20
 8003ae4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003ae6:	46c0      	nop			@ (mov r8, r8)
 8003ae8:	08003bd8 	.word	0x08003bd8
 8003aec:	08003be0 	.word	0x08003be0

08003af0 <memset>:
 8003af0:	0003      	movs	r3, r0
 8003af2:	1882      	adds	r2, r0, r2
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d100      	bne.n	8003afa <memset+0xa>
 8003af8:	4770      	bx	lr
 8003afa:	7019      	strb	r1, [r3, #0]
 8003afc:	3301      	adds	r3, #1
 8003afe:	e7f9      	b.n	8003af4 <memset+0x4>

08003b00 <__libc_init_array>:
 8003b00:	b570      	push	{r4, r5, r6, lr}
 8003b02:	2600      	movs	r6, #0
 8003b04:	4c0c      	ldr	r4, [pc, #48]	@ (8003b38 <__libc_init_array+0x38>)
 8003b06:	4d0d      	ldr	r5, [pc, #52]	@ (8003b3c <__libc_init_array+0x3c>)
 8003b08:	1b64      	subs	r4, r4, r5
 8003b0a:	10a4      	asrs	r4, r4, #2
 8003b0c:	42a6      	cmp	r6, r4
 8003b0e:	d109      	bne.n	8003b24 <__libc_init_array+0x24>
 8003b10:	2600      	movs	r6, #0
 8003b12:	f000 f819 	bl	8003b48 <_init>
 8003b16:	4c0a      	ldr	r4, [pc, #40]	@ (8003b40 <__libc_init_array+0x40>)
 8003b18:	4d0a      	ldr	r5, [pc, #40]	@ (8003b44 <__libc_init_array+0x44>)
 8003b1a:	1b64      	subs	r4, r4, r5
 8003b1c:	10a4      	asrs	r4, r4, #2
 8003b1e:	42a6      	cmp	r6, r4
 8003b20:	d105      	bne.n	8003b2e <__libc_init_array+0x2e>
 8003b22:	bd70      	pop	{r4, r5, r6, pc}
 8003b24:	00b3      	lsls	r3, r6, #2
 8003b26:	58eb      	ldr	r3, [r5, r3]
 8003b28:	4798      	blx	r3
 8003b2a:	3601      	adds	r6, #1
 8003b2c:	e7ee      	b.n	8003b0c <__libc_init_array+0xc>
 8003b2e:	00b3      	lsls	r3, r6, #2
 8003b30:	58eb      	ldr	r3, [r5, r3]
 8003b32:	4798      	blx	r3
 8003b34:	3601      	adds	r6, #1
 8003b36:	e7f2      	b.n	8003b1e <__libc_init_array+0x1e>
 8003b38:	08003be8 	.word	0x08003be8
 8003b3c:	08003be8 	.word	0x08003be8
 8003b40:	08003bec 	.word	0x08003bec
 8003b44:	08003be8 	.word	0x08003be8

08003b48 <_init>:
 8003b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b4a:	46c0      	nop			@ (mov r8, r8)
 8003b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b4e:	bc08      	pop	{r3}
 8003b50:	469e      	mov	lr, r3
 8003b52:	4770      	bx	lr

08003b54 <_fini>:
 8003b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b56:	46c0      	nop			@ (mov r8, r8)
 8003b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b5a:	bc08      	pop	{r3}
 8003b5c:	469e      	mov	lr, r3
 8003b5e:	4770      	bx	lr
