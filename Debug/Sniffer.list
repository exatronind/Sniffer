
Sniffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001978  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08001a38  08001a38  00002a38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001a78  08001a78  0000300c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08001a78  08001a78  0000300c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08001a78  08001a78  0000300c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001a78  08001a78  00002a78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001a7c  08001a7c  00002a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08001a80  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000000c  08001a8c  0000300c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  08001a8c  000031bc  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000300c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000089e8  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001769  00000000  00000000  0000ba1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009b8  00000000  00000000  0000d188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000784  00000000  00000000  0000db40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000122ee  00000000  00000000  0000e2c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000ae0e  00000000  00000000  000205b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007498f  00000000  00000000  0002b3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0009fd4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022b8  00000000  00000000  0009fd94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000a204c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08001a20 	.word	0x08001a20

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	08001a20 	.word	0x08001a20

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000224:	f000 fa9c 	bl	8000760 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000228:	f000 f812 	bl	8000250 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800022c:	f000 f8b4 	bl	8000398 <MX_GPIO_Init>
    MX_TIM3_Init();
 8000230:	f000 f85c 	bl	80002ec <MX_TIM3_Init>
    /* USER CODE BEGIN 2 */
    // HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
    HAL_TIM_Base_Start(&htim3);
 8000234:	4b05      	ldr	r3, [pc, #20]	@ (800024c <main+0x2c>)
 8000236:	0018      	movs	r0, r3
 8000238:	f001 f93a 	bl	80014b0 <HAL_TIM_Base_Start>
    setTimerPulses(&htim3);
 800023c:	4b03      	ldr	r3, [pc, #12]	@ (800024c <main+0x2c>)
 800023e:	0018      	movs	r0, r3
 8000240:	f000 f9ca 	bl	80005d8 <setTimerPulses>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        processPulses();
 8000244:	f000 f920 	bl	8000488 <processPulses>
 8000248:	e7fc      	b.n	8000244 <main+0x24>
 800024a:	46c0      	nop			@ (mov r8, r8)
 800024c:	20000028 	.word	0x20000028

08000250 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000250:	b590      	push	{r4, r7, lr}
 8000252:	b08d      	sub	sp, #52	@ 0x34
 8000254:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000256:	2414      	movs	r4, #20
 8000258:	193b      	adds	r3, r7, r4
 800025a:	0018      	movs	r0, r3
 800025c:	231c      	movs	r3, #28
 800025e:	001a      	movs	r2, r3
 8000260:	2100      	movs	r1, #0
 8000262:	f001 fbb1 	bl	80019c8 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000266:	003b      	movs	r3, r7
 8000268:	0018      	movs	r0, r3
 800026a:	2314      	movs	r3, #20
 800026c:	001a      	movs	r2, r3
 800026e:	2100      	movs	r1, #0
 8000270:	f001 fbaa 	bl	80019c8 <memset>

    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8000274:	4b1c      	ldr	r3, [pc, #112]	@ (80002e8 <SystemClock_Config+0x98>)
 8000276:	681b      	ldr	r3, [r3, #0]
 8000278:	2207      	movs	r2, #7
 800027a:	4393      	bics	r3, r2
 800027c:	001a      	movs	r2, r3
 800027e:	4b1a      	ldr	r3, [pc, #104]	@ (80002e8 <SystemClock_Config+0x98>)
 8000280:	2101      	movs	r1, #1
 8000282:	430a      	orrs	r2, r1
 8000284:	601a      	str	r2, [r3, #0]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000286:	193b      	adds	r3, r7, r4
 8000288:	2202      	movs	r2, #2
 800028a:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800028c:	193b      	adds	r3, r7, r4
 800028e:	2280      	movs	r2, #128	@ 0x80
 8000290:	0052      	lsls	r2, r2, #1
 8000292:	60da      	str	r2, [r3, #12]
    RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000294:	193b      	adds	r3, r7, r4
 8000296:	2200      	movs	r2, #0
 8000298:	611a      	str	r2, [r3, #16]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800029a:	193b      	adds	r3, r7, r4
 800029c:	2240      	movs	r2, #64	@ 0x40
 800029e:	615a      	str	r2, [r3, #20]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	0018      	movs	r0, r3
 80002a4:	f000 fd86 	bl	8000db4 <HAL_RCC_OscConfig>
 80002a8:	1e03      	subs	r3, r0, #0
 80002aa:	d001      	beq.n	80002b0 <SystemClock_Config+0x60>
    {
        Error_Handler();
 80002ac:	f000 f8e6 	bl	800047c <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 80002b0:	003b      	movs	r3, r7
 80002b2:	2207      	movs	r2, #7
 80002b4:	601a      	str	r2, [r3, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002b6:	003b      	movs	r3, r7
 80002b8:	2200      	movs	r2, #0
 80002ba:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80002bc:	003b      	movs	r3, r7
 80002be:	2200      	movs	r2, #0
 80002c0:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80002c2:	003b      	movs	r3, r7
 80002c4:	2200      	movs	r2, #0
 80002c6:	60da      	str	r2, [r3, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80002c8:	003b      	movs	r3, r7
 80002ca:	2200      	movs	r2, #0
 80002cc:	611a      	str	r2, [r3, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80002ce:	003b      	movs	r3, r7
 80002d0:	2101      	movs	r1, #1
 80002d2:	0018      	movs	r0, r3
 80002d4:	f000 ff52 	bl	800117c <HAL_RCC_ClockConfig>
 80002d8:	1e03      	subs	r3, r0, #0
 80002da:	d001      	beq.n	80002e0 <SystemClock_Config+0x90>
    {
        Error_Handler();
 80002dc:	f000 f8ce 	bl	800047c <Error_Handler>
    }
}
 80002e0:	46c0      	nop			@ (mov r8, r8)
 80002e2:	46bd      	mov	sp, r7
 80002e4:	b00d      	add	sp, #52	@ 0x34
 80002e6:	bd90      	pop	{r4, r7, pc}
 80002e8:	40022000 	.word	0x40022000

080002ec <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80002ec:	b580      	push	{r7, lr}
 80002ee:	b088      	sub	sp, #32
 80002f0:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002f2:	2310      	movs	r3, #16
 80002f4:	18fb      	adds	r3, r7, r3
 80002f6:	0018      	movs	r0, r3
 80002f8:	2310      	movs	r3, #16
 80002fa:	001a      	movs	r2, r3
 80002fc:	2100      	movs	r1, #0
 80002fe:	f001 fb63 	bl	80019c8 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	0018      	movs	r0, r3
 8000306:	230c      	movs	r3, #12
 8000308:	001a      	movs	r2, r3
 800030a:	2100      	movs	r1, #0
 800030c:	f001 fb5c 	bl	80019c8 <memset>

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 8000310:	4b1e      	ldr	r3, [pc, #120]	@ (800038c <MX_TIM3_Init+0xa0>)
 8000312:	4a1f      	ldr	r2, [pc, #124]	@ (8000390 <MX_TIM3_Init+0xa4>)
 8000314:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 47;
 8000316:	4b1d      	ldr	r3, [pc, #116]	@ (800038c <MX_TIM3_Init+0xa0>)
 8000318:	222f      	movs	r2, #47	@ 0x2f
 800031a:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800031c:	4b1b      	ldr	r3, [pc, #108]	@ (800038c <MX_TIM3_Init+0xa0>)
 800031e:	2200      	movs	r2, #0
 8000320:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 65535;
 8000322:	4b1a      	ldr	r3, [pc, #104]	@ (800038c <MX_TIM3_Init+0xa0>)
 8000324:	4a1b      	ldr	r2, [pc, #108]	@ (8000394 <MX_TIM3_Init+0xa8>)
 8000326:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000328:	4b18      	ldr	r3, [pc, #96]	@ (800038c <MX_TIM3_Init+0xa0>)
 800032a:	2200      	movs	r2, #0
 800032c:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800032e:	4b17      	ldr	r3, [pc, #92]	@ (800038c <MX_TIM3_Init+0xa0>)
 8000330:	2200      	movs	r2, #0
 8000332:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000334:	4b15      	ldr	r3, [pc, #84]	@ (800038c <MX_TIM3_Init+0xa0>)
 8000336:	0018      	movs	r0, r3
 8000338:	f001 f862 	bl	8001400 <HAL_TIM_Base_Init>
 800033c:	1e03      	subs	r3, r0, #0
 800033e:	d001      	beq.n	8000344 <MX_TIM3_Init+0x58>
    {
        Error_Handler();
 8000340:	f000 f89c 	bl	800047c <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000344:	2110      	movs	r1, #16
 8000346:	187b      	adds	r3, r7, r1
 8000348:	2280      	movs	r2, #128	@ 0x80
 800034a:	0152      	lsls	r2, r2, #5
 800034c:	601a      	str	r2, [r3, #0]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800034e:	187a      	adds	r2, r7, r1
 8000350:	4b0e      	ldr	r3, [pc, #56]	@ (800038c <MX_TIM3_Init+0xa0>)
 8000352:	0011      	movs	r1, r2
 8000354:	0018      	movs	r0, r3
 8000356:	f001 f8f1 	bl	800153c <HAL_TIM_ConfigClockSource>
 800035a:	1e03      	subs	r3, r0, #0
 800035c:	d001      	beq.n	8000362 <MX_TIM3_Init+0x76>
    {
        Error_Handler();
 800035e:	f000 f88d 	bl	800047c <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000362:	1d3b      	adds	r3, r7, #4
 8000364:	2200      	movs	r2, #0
 8000366:	601a      	str	r2, [r3, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000368:	1d3b      	adds	r3, r7, #4
 800036a:	2200      	movs	r2, #0
 800036c:	609a      	str	r2, [r3, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800036e:	1d3a      	adds	r2, r7, #4
 8000370:	4b06      	ldr	r3, [pc, #24]	@ (800038c <MX_TIM3_Init+0xa0>)
 8000372:	0011      	movs	r1, r2
 8000374:	0018      	movs	r0, r3
 8000376:	f001 fac5 	bl	8001904 <HAL_TIMEx_MasterConfigSynchronization>
 800037a:	1e03      	subs	r3, r0, #0
 800037c:	d001      	beq.n	8000382 <MX_TIM3_Init+0x96>
    {
        Error_Handler();
 800037e:	f000 f87d 	bl	800047c <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
}
 8000382:	46c0      	nop			@ (mov r8, r8)
 8000384:	46bd      	mov	sp, r7
 8000386:	b008      	add	sp, #32
 8000388:	bd80      	pop	{r7, pc}
 800038a:	46c0      	nop			@ (mov r8, r8)
 800038c:	20000028 	.word	0x20000028
 8000390:	40000400 	.word	0x40000400
 8000394:	0000ffff 	.word	0x0000ffff

08000398 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000398:	b590      	push	{r4, r7, lr}
 800039a:	b089      	sub	sp, #36	@ 0x24
 800039c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800039e:	240c      	movs	r4, #12
 80003a0:	193b      	adds	r3, r7, r4
 80003a2:	0018      	movs	r0, r3
 80003a4:	2314      	movs	r3, #20
 80003a6:	001a      	movs	r2, r3
 80003a8:	2100      	movs	r1, #0
 80003aa:	f001 fb0d 	bl	80019c8 <memset>
    /* USER CODE BEGIN MX_GPIO_Init_1 */

    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ae:	4b2e      	ldr	r3, [pc, #184]	@ (8000468 <MX_GPIO_Init+0xd0>)
 80003b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003b2:	4b2d      	ldr	r3, [pc, #180]	@ (8000468 <MX_GPIO_Init+0xd0>)
 80003b4:	2104      	movs	r1, #4
 80003b6:	430a      	orrs	r2, r1
 80003b8:	635a      	str	r2, [r3, #52]	@ 0x34
 80003ba:	4b2b      	ldr	r3, [pc, #172]	@ (8000468 <MX_GPIO_Init+0xd0>)
 80003bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003be:	2204      	movs	r2, #4
 80003c0:	4013      	ands	r3, r2
 80003c2:	60bb      	str	r3, [r7, #8]
 80003c4:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80003c6:	4b28      	ldr	r3, [pc, #160]	@ (8000468 <MX_GPIO_Init+0xd0>)
 80003c8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80003ca:	4b27      	ldr	r3, [pc, #156]	@ (8000468 <MX_GPIO_Init+0xd0>)
 80003cc:	2101      	movs	r1, #1
 80003ce:	430a      	orrs	r2, r1
 80003d0:	635a      	str	r2, [r3, #52]	@ 0x34
 80003d2:	4b25      	ldr	r3, [pc, #148]	@ (8000468 <MX_GPIO_Init+0xd0>)
 80003d4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80003d6:	2201      	movs	r2, #1
 80003d8:	4013      	ands	r3, r2
 80003da:	607b      	str	r3, [r7, #4]
 80003dc:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 80003de:	2380      	movs	r3, #128	@ 0x80
 80003e0:	0099      	lsls	r1, r3, #2
 80003e2:	23a0      	movs	r3, #160	@ 0xa0
 80003e4:	05db      	lsls	r3, r3, #23
 80003e6:	2200      	movs	r2, #0
 80003e8:	0018      	movs	r0, r3
 80003ea:	f000 fc9b 	bl	8000d24 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PIR_Pin */
    GPIO_InitStruct.Pin = PIR_Pin;
 80003ee:	193b      	adds	r3, r7, r4
 80003f0:	2280      	movs	r2, #128	@ 0x80
 80003f2:	01d2      	lsls	r2, r2, #7
 80003f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80003f6:	193b      	adds	r3, r7, r4
 80003f8:	4a1c      	ldr	r2, [pc, #112]	@ (800046c <MX_GPIO_Init+0xd4>)
 80003fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80003fc:	193b      	adds	r3, r7, r4
 80003fe:	2200      	movs	r2, #0
 8000400:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 8000402:	193b      	adds	r3, r7, r4
 8000404:	4a1a      	ldr	r2, [pc, #104]	@ (8000470 <MX_GPIO_Init+0xd8>)
 8000406:	0019      	movs	r1, r3
 8000408:	0010      	movs	r0, r2
 800040a:	f000 fb21 	bl	8000a50 <HAL_GPIO_Init>

    /*Configure GPIO pin : PA9 */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800040e:	0021      	movs	r1, r4
 8000410:	187b      	adds	r3, r7, r1
 8000412:	2280      	movs	r2, #128	@ 0x80
 8000414:	0092      	lsls	r2, r2, #2
 8000416:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000418:	187b      	adds	r3, r7, r1
 800041a:	2201      	movs	r2, #1
 800041c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800041e:	187b      	adds	r3, r7, r1
 8000420:	2200      	movs	r2, #0
 8000422:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000424:	187b      	adds	r3, r7, r1
 8000426:	2200      	movs	r2, #0
 8000428:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800042a:	187a      	adds	r2, r7, r1
 800042c:	23a0      	movs	r3, #160	@ 0xa0
 800042e:	05db      	lsls	r3, r3, #23
 8000430:	0011      	movs	r1, r2
 8000432:	0018      	movs	r0, r3
 8000434:	f000 fb0c 	bl	8000a50 <HAL_GPIO_Init>

    /**/
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA9);
 8000438:	4b0e      	ldr	r3, [pc, #56]	@ (8000474 <MX_GPIO_Init+0xdc>)
 800043a:	681a      	ldr	r2, [r3, #0]
 800043c:	4b0d      	ldr	r3, [pc, #52]	@ (8000474 <MX_GPIO_Init+0xdc>)
 800043e:	2180      	movs	r1, #128	@ 0x80
 8000440:	03c9      	lsls	r1, r1, #15
 8000442:	430a      	orrs	r2, r1
 8000444:	601a      	str	r2, [r3, #0]

    /**/
    HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN5_PA11);
 8000446:	4b0c      	ldr	r3, [pc, #48]	@ (8000478 <MX_GPIO_Init+0xe0>)
 8000448:	0018      	movs	r0, r3
 800044a:	f000 fa17 	bl	800087c <HAL_SYSCFG_SetPinBinding>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 800044e:	2200      	movs	r2, #0
 8000450:	2100      	movs	r1, #0
 8000452:	2007      	movs	r0, #7
 8000454:	f000 faca 	bl	80009ec <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000458:	2007      	movs	r0, #7
 800045a:	f000 fadc 	bl	8000a16 <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */

    /* USER CODE END MX_GPIO_Init_2 */
}
 800045e:	46c0      	nop			@ (mov r8, r8)
 8000460:	46bd      	mov	sp, r7
 8000462:	b009      	add	sp, #36	@ 0x24
 8000464:	bd90      	pop	{r4, r7, pc}
 8000466:	46c0      	nop			@ (mov r8, r8)
 8000468:	40021000 	.word	0x40021000
 800046c:	10310000 	.word	0x10310000
 8000470:	50000800 	.word	0x50000800
 8000474:	40010000 	.word	0x40010000
 8000478:	00300010 	.word	0x00300010

0800047c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800047c:	b580      	push	{r7, lr}
 800047e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000480:	b672      	cpsid	i
}
 8000482:	46c0      	nop			@ (mov r8, r8)
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000484:	46c0      	nop			@ (mov r8, r8)
 8000486:	e7fd      	b.n	8000484 <Error_Handler+0x8>

08000488 <processPulses>:
volatile uint8_t data_ready = 0;
static uint16_t pulse_index = 0;
static TIM_HandleTypeDef *htim = NULL;

void processPulses()
{
 8000488:	b580      	push	{r7, lr}
 800048a:	b082      	sub	sp, #8
 800048c:	af00      	add	r7, sp, #0
    if (data_ready)
 800048e:	4b27      	ldr	r3, [pc, #156]	@ (800052c <processPulses+0xa4>)
 8000490:	781b      	ldrb	r3, [r3, #0]
 8000492:	b2db      	uxtb	r3, r3
 8000494:	2b00      	cmp	r3, #0
 8000496:	d045      	beq.n	8000524 <processPulses+0x9c>
    {

        for (uint8_t i = 0, j = 0; i < PULSE_BUFFER_SIZE - 1; i++, j++)
 8000498:	1dfb      	adds	r3, r7, #7
 800049a:	2200      	movs	r2, #0
 800049c:	701a      	strb	r2, [r3, #0]
 800049e:	1dbb      	adds	r3, r7, #6
 80004a0:	2200      	movs	r2, #0
 80004a2:	701a      	strb	r2, [r3, #0]
 80004a4:	e037      	b.n	8000516 <processPulses+0x8e>
        {
            pulse_width[j] = (pulse_buffer[i + 1] >= pulse_buffer[i]) ? (pulse_buffer[i + 1] - pulse_buffer[i]) : ((0xFFFF - pulse_buffer[i]) + pulse_buffer[i + 1]);
 80004a6:	1dfb      	adds	r3, r7, #7
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	1c5a      	adds	r2, r3, #1
 80004ac:	4b20      	ldr	r3, [pc, #128]	@ (8000530 <processPulses+0xa8>)
 80004ae:	0092      	lsls	r2, r2, #2
 80004b0:	58d2      	ldr	r2, [r2, r3]
 80004b2:	1dfb      	adds	r3, r7, #7
 80004b4:	7819      	ldrb	r1, [r3, #0]
 80004b6:	4b1e      	ldr	r3, [pc, #120]	@ (8000530 <processPulses+0xa8>)
 80004b8:	0089      	lsls	r1, r1, #2
 80004ba:	58cb      	ldr	r3, [r1, r3]
 80004bc:	429a      	cmp	r2, r3
 80004be:	d30c      	bcc.n	80004da <processPulses+0x52>
 80004c0:	1dfb      	adds	r3, r7, #7
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	1c5a      	adds	r2, r3, #1
 80004c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000530 <processPulses+0xa8>)
 80004c8:	0092      	lsls	r2, r2, #2
 80004ca:	58d2      	ldr	r2, [r2, r3]
 80004cc:	1dfb      	adds	r3, r7, #7
 80004ce:	7819      	ldrb	r1, [r3, #0]
 80004d0:	4b17      	ldr	r3, [pc, #92]	@ (8000530 <processPulses+0xa8>)
 80004d2:	0089      	lsls	r1, r1, #2
 80004d4:	58cb      	ldr	r3, [r1, r3]
 80004d6:	1ad3      	subs	r3, r2, r3
 80004d8:	e00e      	b.n	80004f8 <processPulses+0x70>
 80004da:	1dfb      	adds	r3, r7, #7
 80004dc:	781b      	ldrb	r3, [r3, #0]
 80004de:	1c5a      	adds	r2, r3, #1
 80004e0:	4b13      	ldr	r3, [pc, #76]	@ (8000530 <processPulses+0xa8>)
 80004e2:	0092      	lsls	r2, r2, #2
 80004e4:	58d2      	ldr	r2, [r2, r3]
 80004e6:	1dfb      	adds	r3, r7, #7
 80004e8:	7819      	ldrb	r1, [r3, #0]
 80004ea:	4b11      	ldr	r3, [pc, #68]	@ (8000530 <processPulses+0xa8>)
 80004ec:	0089      	lsls	r1, r1, #2
 80004ee:	58cb      	ldr	r3, [r1, r3]
 80004f0:	1ad3      	subs	r3, r2, r3
 80004f2:	4a10      	ldr	r2, [pc, #64]	@ (8000534 <processPulses+0xac>)
 80004f4:	4694      	mov	ip, r2
 80004f6:	4463      	add	r3, ip
 80004f8:	1dba      	adds	r2, r7, #6
 80004fa:	7811      	ldrb	r1, [r2, #0]
 80004fc:	4a0e      	ldr	r2, [pc, #56]	@ (8000538 <processPulses+0xb0>)
 80004fe:	0089      	lsls	r1, r1, #2
 8000500:	508b      	str	r3, [r1, r2]
        for (uint8_t i = 0, j = 0; i < PULSE_BUFFER_SIZE - 1; i++, j++)
 8000502:	1dfb      	adds	r3, r7, #7
 8000504:	781a      	ldrb	r2, [r3, #0]
 8000506:	1dfb      	adds	r3, r7, #7
 8000508:	3201      	adds	r2, #1
 800050a:	701a      	strb	r2, [r3, #0]
 800050c:	1dbb      	adds	r3, r7, #6
 800050e:	781a      	ldrb	r2, [r3, #0]
 8000510:	1dbb      	adds	r3, r7, #6
 8000512:	3201      	adds	r2, #1
 8000514:	701a      	strb	r2, [r3, #0]
 8000516:	1dfb      	adds	r3, r7, #7
 8000518:	781b      	ldrb	r3, [r3, #0]
 800051a:	2b26      	cmp	r3, #38	@ 0x26
 800051c:	d9c3      	bls.n	80004a6 <processPulses+0x1e>
        }

        data_ready = 0; // Reseta a flag para a próxima captura
 800051e:	4b03      	ldr	r3, [pc, #12]	@ (800052c <processPulses+0xa4>)
 8000520:	2200      	movs	r2, #0
 8000522:	701a      	strb	r2, [r3, #0]
    }
}
 8000524:	46c0      	nop			@ (mov r8, r8)
 8000526:	46bd      	mov	sp, r7
 8000528:	b002      	add	sp, #8
 800052a:	bd80      	pop	{r7, pc}
 800052c:	200001b0 	.word	0x200001b0
 8000530:	20000074 	.word	0x20000074
 8000534:	0000ffff 	.word	0x0000ffff
 8000538:	20000114 	.word	0x20000114

0800053c <get_Sample>:

void get_Sample(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
    if (!data_ready)
 8000540:	4b0f      	ldr	r3, [pc, #60]	@ (8000580 <get_Sample+0x44>)
 8000542:	781b      	ldrb	r3, [r3, #0]
 8000544:	b2db      	uxtb	r3, r3
 8000546:	2b00      	cmp	r3, #0
 8000548:	d117      	bne.n	800057a <get_Sample+0x3e>
    {

        if (pulse_index < PULSE_BUFFER_SIZE)
 800054a:	4b0e      	ldr	r3, [pc, #56]	@ (8000584 <get_Sample+0x48>)
 800054c:	881b      	ldrh	r3, [r3, #0]
 800054e:	2b27      	cmp	r3, #39	@ 0x27
 8000550:	d80d      	bhi.n	800056e <get_Sample+0x32>
        {
            pulse_buffer[pulse_index++] = __HAL_TIM_GET_COUNTER(htim);
 8000552:	4b0d      	ldr	r3, [pc, #52]	@ (8000588 <get_Sample+0x4c>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	681b      	ldr	r3, [r3, #0]
 8000558:	4a0a      	ldr	r2, [pc, #40]	@ (8000584 <get_Sample+0x48>)
 800055a:	8812      	ldrh	r2, [r2, #0]
 800055c:	1c51      	adds	r1, r2, #1
 800055e:	b288      	uxth	r0, r1
 8000560:	4908      	ldr	r1, [pc, #32]	@ (8000584 <get_Sample+0x48>)
 8000562:	8008      	strh	r0, [r1, #0]
 8000564:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000566:	4b09      	ldr	r3, [pc, #36]	@ (800058c <get_Sample+0x50>)
 8000568:	0092      	lsls	r2, r2, #2
 800056a:	50d1      	str	r1, [r2, r3]
        {
            data_ready = 1;  // Indica que os dados estão prontos para processamento
            pulse_index = 0; // Reinicia o índice para a próxima captura
        }
    }
}
 800056c:	e005      	b.n	800057a <get_Sample+0x3e>
            data_ready = 1;  // Indica que os dados estão prontos para processamento
 800056e:	4b04      	ldr	r3, [pc, #16]	@ (8000580 <get_Sample+0x44>)
 8000570:	2201      	movs	r2, #1
 8000572:	701a      	strb	r2, [r3, #0]
            pulse_index = 0; // Reinicia o índice para a próxima captura
 8000574:	4b03      	ldr	r3, [pc, #12]	@ (8000584 <get_Sample+0x48>)
 8000576:	2200      	movs	r2, #0
 8000578:	801a      	strh	r2, [r3, #0]
}
 800057a:	46c0      	nop			@ (mov r8, r8)
 800057c:	46bd      	mov	sp, r7
 800057e:	bd80      	pop	{r7, pc}
 8000580:	200001b0 	.word	0x200001b0
 8000584:	200001b2 	.word	0x200001b2
 8000588:	200001b4 	.word	0x200001b4
 800058c:	20000074 	.word	0x20000074

08000590 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b082      	sub	sp, #8
 8000594:	af00      	add	r7, sp, #0
 8000596:	0002      	movs	r2, r0
 8000598:	1dbb      	adds	r3, r7, #6
 800059a:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == PINO_INTERRUPT)
 800059c:	1dbb      	adds	r3, r7, #6
 800059e:	881a      	ldrh	r2, [r3, #0]
 80005a0:	2380      	movs	r3, #128	@ 0x80
 80005a2:	01db      	lsls	r3, r3, #7
 80005a4:	429a      	cmp	r2, r3
 80005a6:	d101      	bne.n	80005ac <HAL_GPIO_EXTI_Rising_Callback+0x1c>
    {
        get_Sample();
 80005a8:	f7ff ffc8 	bl	800053c <get_Sample>
    }
}
 80005ac:	46c0      	nop			@ (mov r8, r8)
 80005ae:	46bd      	mov	sp, r7
 80005b0:	b002      	add	sp, #8
 80005b2:	bd80      	pop	{r7, pc}

080005b4 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	0002      	movs	r2, r0
 80005bc:	1dbb      	adds	r3, r7, #6
 80005be:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == PINO_INTERRUPT)
 80005c0:	1dbb      	adds	r3, r7, #6
 80005c2:	881a      	ldrh	r2, [r3, #0]
 80005c4:	2380      	movs	r3, #128	@ 0x80
 80005c6:	01db      	lsls	r3, r3, #7
 80005c8:	429a      	cmp	r2, r3
 80005ca:	d101      	bne.n	80005d0 <HAL_GPIO_EXTI_Falling_Callback+0x1c>
    {

        get_Sample();
 80005cc:	f7ff ffb6 	bl	800053c <get_Sample>
    }
}
 80005d0:	46c0      	nop			@ (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	b002      	add	sp, #8
 80005d6:	bd80      	pop	{r7, pc}

080005d8 <setTimerPulses>:
{
    return pulse_width;
}

void setTimerPulses(TIM_HandleTypeDef *htimChosed)
{
 80005d8:	b580      	push	{r7, lr}
 80005da:	b082      	sub	sp, #8
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
    htim = htimChosed;
 80005e0:	4b03      	ldr	r3, [pc, #12]	@ (80005f0 <setTimerPulses+0x18>)
 80005e2:	687a      	ldr	r2, [r7, #4]
 80005e4:	601a      	str	r2, [r3, #0]
}
 80005e6:	46c0      	nop			@ (mov r8, r8)
 80005e8:	46bd      	mov	sp, r7
 80005ea:	b002      	add	sp, #8
 80005ec:	bd80      	pop	{r7, pc}
 80005ee:	46c0      	nop			@ (mov r8, r8)
 80005f0:	200001b4 	.word	0x200001b4

080005f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80005fa:	4b10      	ldr	r3, [pc, #64]	@ (800063c <HAL_MspInit+0x48>)
 80005fc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80005fe:	4b0f      	ldr	r3, [pc, #60]	@ (800063c <HAL_MspInit+0x48>)
 8000600:	2101      	movs	r1, #1
 8000602:	430a      	orrs	r2, r1
 8000604:	641a      	str	r2, [r3, #64]	@ 0x40
 8000606:	4b0d      	ldr	r3, [pc, #52]	@ (800063c <HAL_MspInit+0x48>)
 8000608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800060a:	2201      	movs	r2, #1
 800060c:	4013      	ands	r3, r2
 800060e:	607b      	str	r3, [r7, #4]
 8000610:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000612:	4b0a      	ldr	r3, [pc, #40]	@ (800063c <HAL_MspInit+0x48>)
 8000614:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000616:	4b09      	ldr	r3, [pc, #36]	@ (800063c <HAL_MspInit+0x48>)
 8000618:	2180      	movs	r1, #128	@ 0x80
 800061a:	0549      	lsls	r1, r1, #21
 800061c:	430a      	orrs	r2, r1
 800061e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000620:	4b06      	ldr	r3, [pc, #24]	@ (800063c <HAL_MspInit+0x48>)
 8000622:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000624:	2380      	movs	r3, #128	@ 0x80
 8000626:	055b      	lsls	r3, r3, #21
 8000628:	4013      	ands	r3, r2
 800062a:	603b      	str	r3, [r7, #0]
 800062c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 800062e:	2008      	movs	r0, #8
 8000630:	f000 f914 	bl	800085c <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000634:	46c0      	nop			@ (mov r8, r8)
 8000636:	46bd      	mov	sp, r7
 8000638:	b002      	add	sp, #8
 800063a:	bd80      	pop	{r7, pc}
 800063c:	40021000 	.word	0x40021000

08000640 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	b084      	sub	sp, #16
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	681b      	ldr	r3, [r3, #0]
 800064c:	4a09      	ldr	r2, [pc, #36]	@ (8000674 <HAL_TIM_Base_MspInit+0x34>)
 800064e:	4293      	cmp	r3, r2
 8000650:	d10b      	bne.n	800066a <HAL_TIM_Base_MspInit+0x2a>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000652:	4b09      	ldr	r3, [pc, #36]	@ (8000678 <HAL_TIM_Base_MspInit+0x38>)
 8000654:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000656:	4b08      	ldr	r3, [pc, #32]	@ (8000678 <HAL_TIM_Base_MspInit+0x38>)
 8000658:	2102      	movs	r1, #2
 800065a:	430a      	orrs	r2, r1
 800065c:	63da      	str	r2, [r3, #60]	@ 0x3c
 800065e:	4b06      	ldr	r3, [pc, #24]	@ (8000678 <HAL_TIM_Base_MspInit+0x38>)
 8000660:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000662:	2202      	movs	r2, #2
 8000664:	4013      	ands	r3, r2
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END TIM3_MspInit 1 */

  }

}
 800066a:	46c0      	nop			@ (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b004      	add	sp, #16
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			@ (mov r8, r8)
 8000674:	40000400 	.word	0x40000400
 8000678:	40021000 	.word	0x40021000

0800067c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000680:	46c0      	nop			@ (mov r8, r8)
 8000682:	e7fd      	b.n	8000680 <NMI_Handler+0x4>

08000684 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000688:	46c0      	nop			@ (mov r8, r8)
 800068a:	e7fd      	b.n	8000688 <HardFault_Handler+0x4>

0800068c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800068c:	b580      	push	{r7, lr}
 800068e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000690:	46c0      	nop			@ (mov r8, r8)
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}

08000696 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000696:	b580      	push	{r7, lr}
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800069a:	46c0      	nop			@ (mov r8, r8)
 800069c:	46bd      	mov	sp, r7
 800069e:	bd80      	pop	{r7, pc}

080006a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006a4:	f000 f8be 	bl	8000824 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006a8:	46c0      	nop			@ (mov r8, r8)
 80006aa:	46bd      	mov	sp, r7
 80006ac:	bd80      	pop	{r7, pc}

080006ae <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 80006ae:	b580      	push	{r7, lr}
 80006b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR_Pin);
 80006b2:	2380      	movs	r3, #128	@ 0x80
 80006b4:	01db      	lsls	r3, r3, #7
 80006b6:	0018      	movs	r0, r3
 80006b8:	f000 fb52 	bl	8000d60 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 80006bc:	46c0      	nop			@ (mov r8, r8)
 80006be:	46bd      	mov	sp, r7
 80006c0:	bd80      	pop	{r7, pc}
	...

080006c4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80006c8:	4b03      	ldr	r3, [pc, #12]	@ (80006d8 <SystemInit+0x14>)
 80006ca:	2280      	movs	r2, #128	@ 0x80
 80006cc:	0512      	lsls	r2, r2, #20
 80006ce:	609a      	str	r2, [r3, #8]
#endif
}
 80006d0:	46c0      	nop			@ (mov r8, r8)
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}
 80006d6:	46c0      	nop			@ (mov r8, r8)
 80006d8:	e000ed00 	.word	0xe000ed00

080006dc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80006dc:	480d      	ldr	r0, [pc, #52]	@ (8000714 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80006de:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80006e0:	f7ff fff0 	bl	80006c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80006e4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80006e6:	e003      	b.n	80006f0 <LoopCopyDataInit>

080006e8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80006e8:	4b0b      	ldr	r3, [pc, #44]	@ (8000718 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 80006ea:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80006ec:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80006ee:	3104      	adds	r1, #4

080006f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80006f0:	480a      	ldr	r0, [pc, #40]	@ (800071c <LoopForever+0xa>)
  ldr r3, =_edata
 80006f2:	4b0b      	ldr	r3, [pc, #44]	@ (8000720 <LoopForever+0xe>)
  adds r2, r0, r1
 80006f4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80006f6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80006f8:	d3f6      	bcc.n	80006e8 <CopyDataInit>
  ldr r2, =_sbss
 80006fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000724 <LoopForever+0x12>)
  b LoopFillZerobss
 80006fc:	e002      	b.n	8000704 <LoopFillZerobss>

080006fe <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80006fe:	2300      	movs	r3, #0
  str  r3, [r2]
 8000700:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000702:	3204      	adds	r2, #4

08000704 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000704:	4b08      	ldr	r3, [pc, #32]	@ (8000728 <LoopForever+0x16>)
  cmp r2, r3
 8000706:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000708:	d3f9      	bcc.n	80006fe <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 800070a:	f001 f965 	bl	80019d8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800070e:	f7ff fd87 	bl	8000220 <main>

08000712 <LoopForever>:

LoopForever:
    b LoopForever
 8000712:	e7fe      	b.n	8000712 <LoopForever>
  ldr   r0, =_estack
 8000714:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000718:	08001a80 	.word	0x08001a80
  ldr r0, =_sdata
 800071c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000720:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000724:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000728:	200001bc 	.word	0x200001bc

0800072c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800072c:	e7fe      	b.n	800072c <ADC1_IRQHandler>
	...

08000730 <LL_SYSCFG_ConfigPinMux>:
  * @rmtoll SYSCFG_CFGR3 CLL   LL_SYSCFG_ConfigPinMux\n
  * @param  mux_cfg This parameter can be a value of @ref SYSTEM_LL_PINMUX_CFG
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_ConfigPinMux(uint32_t mux_cfg)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b082      	sub	sp, #8
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR3, (mux_cfg >> 16U), (mux_cfg & 0x0000FFFFU));
 8000738:	4b08      	ldr	r3, [pc, #32]	@ (800075c <LL_SYSCFG_ConfigPinMux+0x2c>)
 800073a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800073c:	687a      	ldr	r2, [r7, #4]
 800073e:	0c12      	lsrs	r2, r2, #16
 8000740:	43d2      	mvns	r2, r2
 8000742:	401a      	ands	r2, r3
 8000744:	0011      	movs	r1, r2
 8000746:	687b      	ldr	r3, [r7, #4]
 8000748:	041b      	lsls	r3, r3, #16
 800074a:	0c1a      	lsrs	r2, r3, #16
 800074c:	4b03      	ldr	r3, [pc, #12]	@ (800075c <LL_SYSCFG_ConfigPinMux+0x2c>)
 800074e:	430a      	orrs	r2, r1
 8000750:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000752:	46c0      	nop			@ (mov r8, r8)
 8000754:	46bd      	mov	sp, r7
 8000756:	b002      	add	sp, #8
 8000758:	bd80      	pop	{r7, pc}
 800075a:	46c0      	nop			@ (mov r8, r8)
 800075c:	40010000 	.word	0x40010000

08000760 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b082      	sub	sp, #8
 8000764:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000766:	1dfb      	adds	r3, r7, #7
 8000768:	2200      	movs	r2, #0
 800076a:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800076c:	2000      	movs	r0, #0
 800076e:	f000 f80f 	bl	8000790 <HAL_InitTick>
 8000772:	1e03      	subs	r3, r0, #0
 8000774:	d003      	beq.n	800077e <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000776:	1dfb      	adds	r3, r7, #7
 8000778:	2201      	movs	r2, #1
 800077a:	701a      	strb	r2, [r3, #0]
 800077c:	e001      	b.n	8000782 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800077e:	f7ff ff39 	bl	80005f4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000782:	1dfb      	adds	r3, r7, #7
 8000784:	781b      	ldrb	r3, [r3, #0]
}
 8000786:	0018      	movs	r0, r3
 8000788:	46bd      	mov	sp, r7
 800078a:	b002      	add	sp, #8
 800078c:	bd80      	pop	{r7, pc}
	...

08000790 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000790:	b590      	push	{r4, r7, lr}
 8000792:	b085      	sub	sp, #20
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000798:	230f      	movs	r3, #15
 800079a:	18fb      	adds	r3, r7, r3
 800079c:	2200      	movs	r2, #0
 800079e:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80007a0:	4b1d      	ldr	r3, [pc, #116]	@ (8000818 <HAL_InitTick+0x88>)
 80007a2:	781b      	ldrb	r3, [r3, #0]
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d02b      	beq.n	8000800 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80007a8:	4b1c      	ldr	r3, [pc, #112]	@ (800081c <HAL_InitTick+0x8c>)
 80007aa:	681c      	ldr	r4, [r3, #0]
 80007ac:	4b1a      	ldr	r3, [pc, #104]	@ (8000818 <HAL_InitTick+0x88>)
 80007ae:	781b      	ldrb	r3, [r3, #0]
 80007b0:	0019      	movs	r1, r3
 80007b2:	23fa      	movs	r3, #250	@ 0xfa
 80007b4:	0098      	lsls	r0, r3, #2
 80007b6:	f7ff fca7 	bl	8000108 <__udivsi3>
 80007ba:	0003      	movs	r3, r0
 80007bc:	0019      	movs	r1, r3
 80007be:	0020      	movs	r0, r4
 80007c0:	f7ff fca2 	bl	8000108 <__udivsi3>
 80007c4:	0003      	movs	r3, r0
 80007c6:	0018      	movs	r0, r3
 80007c8:	f000 f935 	bl	8000a36 <HAL_SYSTICK_Config>
 80007cc:	1e03      	subs	r3, r0, #0
 80007ce:	d112      	bne.n	80007f6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2b03      	cmp	r3, #3
 80007d4:	d80a      	bhi.n	80007ec <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	2301      	movs	r3, #1
 80007da:	425b      	negs	r3, r3
 80007dc:	2200      	movs	r2, #0
 80007de:	0018      	movs	r0, r3
 80007e0:	f000 f904 	bl	80009ec <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80007e4:	4b0e      	ldr	r3, [pc, #56]	@ (8000820 <HAL_InitTick+0x90>)
 80007e6:	687a      	ldr	r2, [r7, #4]
 80007e8:	601a      	str	r2, [r3, #0]
 80007ea:	e00d      	b.n	8000808 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80007ec:	230f      	movs	r3, #15
 80007ee:	18fb      	adds	r3, r7, r3
 80007f0:	2201      	movs	r2, #1
 80007f2:	701a      	strb	r2, [r3, #0]
 80007f4:	e008      	b.n	8000808 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80007f6:	230f      	movs	r3, #15
 80007f8:	18fb      	adds	r3, r7, r3
 80007fa:	2201      	movs	r2, #1
 80007fc:	701a      	strb	r2, [r3, #0]
 80007fe:	e003      	b.n	8000808 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000800:	230f      	movs	r3, #15
 8000802:	18fb      	adds	r3, r7, r3
 8000804:	2201      	movs	r2, #1
 8000806:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000808:	230f      	movs	r3, #15
 800080a:	18fb      	adds	r3, r7, r3
 800080c:	781b      	ldrb	r3, [r3, #0]
}
 800080e:	0018      	movs	r0, r3
 8000810:	46bd      	mov	sp, r7
 8000812:	b005      	add	sp, #20
 8000814:	bd90      	pop	{r4, r7, pc}
 8000816:	46c0      	nop			@ (mov r8, r8)
 8000818:	20000008 	.word	0x20000008
 800081c:	20000000 	.word	0x20000000
 8000820:	20000004 	.word	0x20000004

08000824 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000828:	4b05      	ldr	r3, [pc, #20]	@ (8000840 <HAL_IncTick+0x1c>)
 800082a:	781b      	ldrb	r3, [r3, #0]
 800082c:	001a      	movs	r2, r3
 800082e:	4b05      	ldr	r3, [pc, #20]	@ (8000844 <HAL_IncTick+0x20>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	18d2      	adds	r2, r2, r3
 8000834:	4b03      	ldr	r3, [pc, #12]	@ (8000844 <HAL_IncTick+0x20>)
 8000836:	601a      	str	r2, [r3, #0]
}
 8000838:	46c0      	nop			@ (mov r8, r8)
 800083a:	46bd      	mov	sp, r7
 800083c:	bd80      	pop	{r7, pc}
 800083e:	46c0      	nop			@ (mov r8, r8)
 8000840:	20000008 	.word	0x20000008
 8000844:	200001b8 	.word	0x200001b8

08000848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  return uwTick;
 800084c:	4b02      	ldr	r3, [pc, #8]	@ (8000858 <HAL_GetTick+0x10>)
 800084e:	681b      	ldr	r3, [r3, #0]
}
 8000850:	0018      	movs	r0, r3
 8000852:	46bd      	mov	sp, r7
 8000854:	bd80      	pop	{r7, pc}
 8000856:	46c0      	nop			@ (mov r8, r8)
 8000858:	200001b8 	.word	0x200001b8

0800085c <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b082      	sub	sp, #8
 8000860:	af00      	add	r7, sp, #0
 8000862:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8000864:	4b04      	ldr	r3, [pc, #16]	@ (8000878 <HAL_SYSCFG_EnableRemap+0x1c>)
 8000866:	6819      	ldr	r1, [r3, #0]
 8000868:	4b03      	ldr	r3, [pc, #12]	@ (8000878 <HAL_SYSCFG_EnableRemap+0x1c>)
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	430a      	orrs	r2, r1
 800086e:	601a      	str	r2, [r3, #0]
}
 8000870:	46c0      	nop			@ (mov r8, r8)
 8000872:	46bd      	mov	sp, r7
 8000874:	b002      	add	sp, #8
 8000876:	bd80      	pop	{r7, pc}
 8000878:	40010000 	.word	0x40010000

0800087c <HAL_SYSCFG_SetPinBinding>:
  *         for each die package
  *         This parameter can be a value of @ref HAL_BIND_CFG
  * @retval None
  */
void HAL_SYSCFG_SetPinBinding(uint32_t pin_binding)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b082      	sub	sp, #8
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_SYSCFG_PINBINDING(pin_binding));
  LL_SYSCFG_ConfigPinMux(pin_binding);
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	0018      	movs	r0, r3
 8000888:	f7ff ff52 	bl	8000730 <LL_SYSCFG_ConfigPinMux>
}
 800088c:	46c0      	nop			@ (mov r8, r8)
 800088e:	46bd      	mov	sp, r7
 8000890:	b002      	add	sp, #8
 8000892:	bd80      	pop	{r7, pc}

08000894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	0002      	movs	r2, r0
 800089c:	1dfb      	adds	r3, r7, #7
 800089e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008a0:	1dfb      	adds	r3, r7, #7
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	2b7f      	cmp	r3, #127	@ 0x7f
 80008a6:	d809      	bhi.n	80008bc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008a8:	1dfb      	adds	r3, r7, #7
 80008aa:	781b      	ldrb	r3, [r3, #0]
 80008ac:	001a      	movs	r2, r3
 80008ae:	231f      	movs	r3, #31
 80008b0:	401a      	ands	r2, r3
 80008b2:	4b04      	ldr	r3, [pc, #16]	@ (80008c4 <__NVIC_EnableIRQ+0x30>)
 80008b4:	2101      	movs	r1, #1
 80008b6:	4091      	lsls	r1, r2
 80008b8:	000a      	movs	r2, r1
 80008ba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80008bc:	46c0      	nop			@ (mov r8, r8)
 80008be:	46bd      	mov	sp, r7
 80008c0:	b002      	add	sp, #8
 80008c2:	bd80      	pop	{r7, pc}
 80008c4:	e000e100 	.word	0xe000e100

080008c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008c8:	b590      	push	{r4, r7, lr}
 80008ca:	b083      	sub	sp, #12
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	0002      	movs	r2, r0
 80008d0:	6039      	str	r1, [r7, #0]
 80008d2:	1dfb      	adds	r3, r7, #7
 80008d4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80008d6:	1dfb      	adds	r3, r7, #7
 80008d8:	781b      	ldrb	r3, [r3, #0]
 80008da:	2b7f      	cmp	r3, #127	@ 0x7f
 80008dc:	d828      	bhi.n	8000930 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80008de:	4a2f      	ldr	r2, [pc, #188]	@ (800099c <__NVIC_SetPriority+0xd4>)
 80008e0:	1dfb      	adds	r3, r7, #7
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	b25b      	sxtb	r3, r3
 80008e6:	089b      	lsrs	r3, r3, #2
 80008e8:	33c0      	adds	r3, #192	@ 0xc0
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	589b      	ldr	r3, [r3, r2]
 80008ee:	1dfa      	adds	r2, r7, #7
 80008f0:	7812      	ldrb	r2, [r2, #0]
 80008f2:	0011      	movs	r1, r2
 80008f4:	2203      	movs	r2, #3
 80008f6:	400a      	ands	r2, r1
 80008f8:	00d2      	lsls	r2, r2, #3
 80008fa:	21ff      	movs	r1, #255	@ 0xff
 80008fc:	4091      	lsls	r1, r2
 80008fe:	000a      	movs	r2, r1
 8000900:	43d2      	mvns	r2, r2
 8000902:	401a      	ands	r2, r3
 8000904:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000906:	683b      	ldr	r3, [r7, #0]
 8000908:	019b      	lsls	r3, r3, #6
 800090a:	22ff      	movs	r2, #255	@ 0xff
 800090c:	401a      	ands	r2, r3
 800090e:	1dfb      	adds	r3, r7, #7
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	0018      	movs	r0, r3
 8000914:	2303      	movs	r3, #3
 8000916:	4003      	ands	r3, r0
 8000918:	00db      	lsls	r3, r3, #3
 800091a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800091c:	481f      	ldr	r0, [pc, #124]	@ (800099c <__NVIC_SetPriority+0xd4>)
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	b25b      	sxtb	r3, r3
 8000924:	089b      	lsrs	r3, r3, #2
 8000926:	430a      	orrs	r2, r1
 8000928:	33c0      	adds	r3, #192	@ 0xc0
 800092a:	009b      	lsls	r3, r3, #2
 800092c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800092e:	e031      	b.n	8000994 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000930:	4a1b      	ldr	r2, [pc, #108]	@ (80009a0 <__NVIC_SetPriority+0xd8>)
 8000932:	1dfb      	adds	r3, r7, #7
 8000934:	781b      	ldrb	r3, [r3, #0]
 8000936:	0019      	movs	r1, r3
 8000938:	230f      	movs	r3, #15
 800093a:	400b      	ands	r3, r1
 800093c:	3b08      	subs	r3, #8
 800093e:	089b      	lsrs	r3, r3, #2
 8000940:	3306      	adds	r3, #6
 8000942:	009b      	lsls	r3, r3, #2
 8000944:	18d3      	adds	r3, r2, r3
 8000946:	3304      	adds	r3, #4
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	1dfa      	adds	r2, r7, #7
 800094c:	7812      	ldrb	r2, [r2, #0]
 800094e:	0011      	movs	r1, r2
 8000950:	2203      	movs	r2, #3
 8000952:	400a      	ands	r2, r1
 8000954:	00d2      	lsls	r2, r2, #3
 8000956:	21ff      	movs	r1, #255	@ 0xff
 8000958:	4091      	lsls	r1, r2
 800095a:	000a      	movs	r2, r1
 800095c:	43d2      	mvns	r2, r2
 800095e:	401a      	ands	r2, r3
 8000960:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000962:	683b      	ldr	r3, [r7, #0]
 8000964:	019b      	lsls	r3, r3, #6
 8000966:	22ff      	movs	r2, #255	@ 0xff
 8000968:	401a      	ands	r2, r3
 800096a:	1dfb      	adds	r3, r7, #7
 800096c:	781b      	ldrb	r3, [r3, #0]
 800096e:	0018      	movs	r0, r3
 8000970:	2303      	movs	r3, #3
 8000972:	4003      	ands	r3, r0
 8000974:	00db      	lsls	r3, r3, #3
 8000976:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000978:	4809      	ldr	r0, [pc, #36]	@ (80009a0 <__NVIC_SetPriority+0xd8>)
 800097a:	1dfb      	adds	r3, r7, #7
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	001c      	movs	r4, r3
 8000980:	230f      	movs	r3, #15
 8000982:	4023      	ands	r3, r4
 8000984:	3b08      	subs	r3, #8
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	430a      	orrs	r2, r1
 800098a:	3306      	adds	r3, #6
 800098c:	009b      	lsls	r3, r3, #2
 800098e:	18c3      	adds	r3, r0, r3
 8000990:	3304      	adds	r3, #4
 8000992:	601a      	str	r2, [r3, #0]
}
 8000994:	46c0      	nop			@ (mov r8, r8)
 8000996:	46bd      	mov	sp, r7
 8000998:	b003      	add	sp, #12
 800099a:	bd90      	pop	{r4, r7, pc}
 800099c:	e000e100 	.word	0xe000e100
 80009a0:	e000ed00 	.word	0xe000ed00

080009a4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b082      	sub	sp, #8
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	1e5a      	subs	r2, r3, #1
 80009b0:	2380      	movs	r3, #128	@ 0x80
 80009b2:	045b      	lsls	r3, r3, #17
 80009b4:	429a      	cmp	r2, r3
 80009b6:	d301      	bcc.n	80009bc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009b8:	2301      	movs	r3, #1
 80009ba:	e010      	b.n	80009de <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009bc:	4b0a      	ldr	r3, [pc, #40]	@ (80009e8 <SysTick_Config+0x44>)
 80009be:	687a      	ldr	r2, [r7, #4]
 80009c0:	3a01      	subs	r2, #1
 80009c2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009c4:	2301      	movs	r3, #1
 80009c6:	425b      	negs	r3, r3
 80009c8:	2103      	movs	r1, #3
 80009ca:	0018      	movs	r0, r3
 80009cc:	f7ff ff7c 	bl	80008c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d0:	4b05      	ldr	r3, [pc, #20]	@ (80009e8 <SysTick_Config+0x44>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009d6:	4b04      	ldr	r3, [pc, #16]	@ (80009e8 <SysTick_Config+0x44>)
 80009d8:	2207      	movs	r2, #7
 80009da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009dc:	2300      	movs	r3, #0
}
 80009de:	0018      	movs	r0, r3
 80009e0:	46bd      	mov	sp, r7
 80009e2:	b002      	add	sp, #8
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	46c0      	nop			@ (mov r8, r8)
 80009e8:	e000e010 	.word	0xe000e010

080009ec <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80009ec:	b580      	push	{r7, lr}
 80009ee:	b084      	sub	sp, #16
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60b9      	str	r1, [r7, #8]
 80009f4:	607a      	str	r2, [r7, #4]
 80009f6:	210f      	movs	r1, #15
 80009f8:	187b      	adds	r3, r7, r1
 80009fa:	1c02      	adds	r2, r0, #0
 80009fc:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80009fe:	68ba      	ldr	r2, [r7, #8]
 8000a00:	187b      	adds	r3, r7, r1
 8000a02:	781b      	ldrb	r3, [r3, #0]
 8000a04:	b25b      	sxtb	r3, r3
 8000a06:	0011      	movs	r1, r2
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f7ff ff5d 	bl	80008c8 <__NVIC_SetPriority>
}
 8000a0e:	46c0      	nop			@ (mov r8, r8)
 8000a10:	46bd      	mov	sp, r7
 8000a12:	b004      	add	sp, #16
 8000a14:	bd80      	pop	{r7, pc}

08000a16 <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	b082      	sub	sp, #8
 8000a1a:	af00      	add	r7, sp, #0
 8000a1c:	0002      	movs	r2, r0
 8000a1e:	1dfb      	adds	r3, r7, #7
 8000a20:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a22:	1dfb      	adds	r3, r7, #7
 8000a24:	781b      	ldrb	r3, [r3, #0]
 8000a26:	b25b      	sxtb	r3, r3
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f7ff ff33 	bl	8000894 <__NVIC_EnableIRQ>
}
 8000a2e:	46c0      	nop			@ (mov r8, r8)
 8000a30:	46bd      	mov	sp, r7
 8000a32:	b002      	add	sp, #8
 8000a34:	bd80      	pop	{r7, pc}

08000a36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a36:	b580      	push	{r7, lr}
 8000a38:	b082      	sub	sp, #8
 8000a3a:	af00      	add	r7, sp, #0
 8000a3c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	0018      	movs	r0, r3
 8000a42:	f7ff ffaf 	bl	80009a4 <SysTick_Config>
 8000a46:	0003      	movs	r3, r0
}
 8000a48:	0018      	movs	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	b002      	add	sp, #8
 8000a4e:	bd80      	pop	{r7, pc}

08000a50 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b086      	sub	sp, #24
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
 8000a58:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8000a5a:	2300      	movs	r3, #0
 8000a5c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000a5e:	e14d      	b.n	8000cfc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8000a60:	683b      	ldr	r3, [r7, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	2101      	movs	r1, #1
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4091      	lsls	r1, r2
 8000a6a:	000a      	movs	r2, r1
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d100      	bne.n	8000a78 <HAL_GPIO_Init+0x28>
 8000a76:	e13e      	b.n	8000cf6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	2b02      	cmp	r3, #2
 8000a7e:	d003      	beq.n	8000a88 <HAL_GPIO_Init+0x38>
 8000a80:	683b      	ldr	r3, [r7, #0]
 8000a82:	685b      	ldr	r3, [r3, #4]
 8000a84:	2b12      	cmp	r3, #18
 8000a86:	d125      	bne.n	8000ad4 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8000a88:	693b      	ldr	r3, [r7, #16]
 8000a8a:	08da      	lsrs	r2, r3, #3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3208      	adds	r2, #8
 8000a90:	0092      	lsls	r2, r2, #2
 8000a92:	58d3      	ldr	r3, [r2, r3]
 8000a94:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 8000a96:	693b      	ldr	r3, [r7, #16]
 8000a98:	2207      	movs	r2, #7
 8000a9a:	4013      	ands	r3, r2
 8000a9c:	009b      	lsls	r3, r3, #2
 8000a9e:	220f      	movs	r2, #15
 8000aa0:	409a      	lsls	r2, r3
 8000aa2:	0013      	movs	r3, r2
 8000aa4:	43da      	mvns	r2, r3
 8000aa6:	697b      	ldr	r3, [r7, #20]
 8000aa8:	4013      	ands	r3, r2
 8000aaa:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	691b      	ldr	r3, [r3, #16]
 8000ab0:	220f      	movs	r2, #15
 8000ab2:	401a      	ands	r2, r3
 8000ab4:	693b      	ldr	r3, [r7, #16]
 8000ab6:	2107      	movs	r1, #7
 8000ab8:	400b      	ands	r3, r1
 8000aba:	009b      	lsls	r3, r3, #2
 8000abc:	409a      	lsls	r2, r3
 8000abe:	0013      	movs	r3, r2
 8000ac0:	697a      	ldr	r2, [r7, #20]
 8000ac2:	4313      	orrs	r3, r2
 8000ac4:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	08da      	lsrs	r2, r3, #3
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	3208      	adds	r2, #8
 8000ace:	0092      	lsls	r2, r2, #2
 8000ad0:	6979      	ldr	r1, [r7, #20]
 8000ad2:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	005b      	lsls	r3, r3, #1
 8000ade:	2203      	movs	r2, #3
 8000ae0:	409a      	lsls	r2, r3
 8000ae2:	0013      	movs	r3, r2
 8000ae4:	43da      	mvns	r2, r3
 8000ae6:	697b      	ldr	r3, [r7, #20]
 8000ae8:	4013      	ands	r3, r2
 8000aea:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	685b      	ldr	r3, [r3, #4]
 8000af0:	2203      	movs	r2, #3
 8000af2:	401a      	ands	r2, r3
 8000af4:	693b      	ldr	r3, [r7, #16]
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	409a      	lsls	r2, r3
 8000afa:	0013      	movs	r3, r2
 8000afc:	697a      	ldr	r2, [r7, #20]
 8000afe:	4313      	orrs	r3, r2
 8000b00:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	697a      	ldr	r2, [r7, #20]
 8000b06:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b08:	683b      	ldr	r3, [r7, #0]
 8000b0a:	685b      	ldr	r3, [r3, #4]
 8000b0c:	2b01      	cmp	r3, #1
 8000b0e:	d00b      	beq.n	8000b28 <HAL_GPIO_Init+0xd8>
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	685b      	ldr	r3, [r3, #4]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d007      	beq.n	8000b28 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b18:	683b      	ldr	r3, [r7, #0]
 8000b1a:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000b1c:	2b11      	cmp	r3, #17
 8000b1e:	d003      	beq.n	8000b28 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000b20:	683b      	ldr	r3, [r7, #0]
 8000b22:	685b      	ldr	r3, [r3, #4]
 8000b24:	2b12      	cmp	r3, #18
 8000b26:	d130      	bne.n	8000b8a <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000b2e:	693b      	ldr	r3, [r7, #16]
 8000b30:	005b      	lsls	r3, r3, #1
 8000b32:	2203      	movs	r2, #3
 8000b34:	409a      	lsls	r2, r3
 8000b36:	0013      	movs	r3, r2
 8000b38:	43da      	mvns	r2, r3
 8000b3a:	697b      	ldr	r3, [r7, #20]
 8000b3c:	4013      	ands	r3, r2
 8000b3e:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 8000b40:	683b      	ldr	r3, [r7, #0]
 8000b42:	68da      	ldr	r2, [r3, #12]
 8000b44:	693b      	ldr	r3, [r7, #16]
 8000b46:	005b      	lsls	r3, r3, #1
 8000b48:	409a      	lsls	r2, r3
 8000b4a:	0013      	movs	r3, r2
 8000b4c:	697a      	ldr	r2, [r7, #20]
 8000b4e:	4313      	orrs	r3, r2
 8000b50:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	697a      	ldr	r2, [r7, #20]
 8000b56:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000b5e:	2201      	movs	r2, #1
 8000b60:	693b      	ldr	r3, [r7, #16]
 8000b62:	409a      	lsls	r2, r3
 8000b64:	0013      	movs	r3, r2
 8000b66:	43da      	mvns	r2, r3
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	4013      	ands	r3, r2
 8000b6c:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000b6e:	683b      	ldr	r3, [r7, #0]
 8000b70:	685b      	ldr	r3, [r3, #4]
 8000b72:	091b      	lsrs	r3, r3, #4
 8000b74:	2201      	movs	r2, #1
 8000b76:	401a      	ands	r2, r3
 8000b78:	693b      	ldr	r3, [r7, #16]
 8000b7a:	409a      	lsls	r2, r3
 8000b7c:	0013      	movs	r3, r2
 8000b7e:	697a      	ldr	r2, [r7, #20]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	697a      	ldr	r2, [r7, #20]
 8000b88:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	685b      	ldr	r3, [r3, #4]
 8000b8e:	2b03      	cmp	r3, #3
 8000b90:	d017      	beq.n	8000bc2 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	68db      	ldr	r3, [r3, #12]
 8000b96:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 8000b98:	693b      	ldr	r3, [r7, #16]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	2203      	movs	r2, #3
 8000b9e:	409a      	lsls	r2, r3
 8000ba0:	0013      	movs	r3, r2
 8000ba2:	43da      	mvns	r2, r3
 8000ba4:	697b      	ldr	r3, [r7, #20]
 8000ba6:	4013      	ands	r3, r2
 8000ba8:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	689a      	ldr	r2, [r3, #8]
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	409a      	lsls	r2, r3
 8000bb4:	0013      	movs	r3, r2
 8000bb6:	697a      	ldr	r2, [r7, #20]
 8000bb8:	4313      	orrs	r3, r2
 8000bba:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	697a      	ldr	r2, [r7, #20]
 8000bc0:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685a      	ldr	r2, [r3, #4]
 8000bc6:	2380      	movs	r3, #128	@ 0x80
 8000bc8:	055b      	lsls	r3, r3, #21
 8000bca:	4013      	ands	r3, r2
 8000bcc:	d100      	bne.n	8000bd0 <HAL_GPIO_Init+0x180>
 8000bce:	e092      	b.n	8000cf6 <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8000bd0:	4a50      	ldr	r2, [pc, #320]	@ (8000d14 <HAL_GPIO_Init+0x2c4>)
 8000bd2:	693b      	ldr	r3, [r7, #16]
 8000bd4:	089b      	lsrs	r3, r3, #2
 8000bd6:	3318      	adds	r3, #24
 8000bd8:	009b      	lsls	r3, r3, #2
 8000bda:	589b      	ldr	r3, [r3, r2]
 8000bdc:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000bde:	693b      	ldr	r3, [r7, #16]
 8000be0:	2203      	movs	r2, #3
 8000be2:	4013      	ands	r3, r2
 8000be4:	00db      	lsls	r3, r3, #3
 8000be6:	220f      	movs	r2, #15
 8000be8:	409a      	lsls	r2, r3
 8000bea:	0013      	movs	r3, r2
 8000bec:	43da      	mvns	r2, r3
 8000bee:	697b      	ldr	r3, [r7, #20]
 8000bf0:	4013      	ands	r3, r2
 8000bf2:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8000bf4:	687a      	ldr	r2, [r7, #4]
 8000bf6:	23a0      	movs	r3, #160	@ 0xa0
 8000bf8:	05db      	lsls	r3, r3, #23
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	d013      	beq.n	8000c26 <HAL_GPIO_Init+0x1d6>
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	4a45      	ldr	r2, [pc, #276]	@ (8000d18 <HAL_GPIO_Init+0x2c8>)
 8000c02:	4293      	cmp	r3, r2
 8000c04:	d00d      	beq.n	8000c22 <HAL_GPIO_Init+0x1d2>
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	4a44      	ldr	r2, [pc, #272]	@ (8000d1c <HAL_GPIO_Init+0x2cc>)
 8000c0a:	4293      	cmp	r3, r2
 8000c0c:	d007      	beq.n	8000c1e <HAL_GPIO_Init+0x1ce>
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	4a43      	ldr	r2, [pc, #268]	@ (8000d20 <HAL_GPIO_Init+0x2d0>)
 8000c12:	4293      	cmp	r3, r2
 8000c14:	d101      	bne.n	8000c1a <HAL_GPIO_Init+0x1ca>
 8000c16:	2305      	movs	r3, #5
 8000c18:	e006      	b.n	8000c28 <HAL_GPIO_Init+0x1d8>
 8000c1a:	2306      	movs	r3, #6
 8000c1c:	e004      	b.n	8000c28 <HAL_GPIO_Init+0x1d8>
 8000c1e:	2302      	movs	r3, #2
 8000c20:	e002      	b.n	8000c28 <HAL_GPIO_Init+0x1d8>
 8000c22:	2301      	movs	r3, #1
 8000c24:	e000      	b.n	8000c28 <HAL_GPIO_Init+0x1d8>
 8000c26:	2300      	movs	r3, #0
 8000c28:	693a      	ldr	r2, [r7, #16]
 8000c2a:	2103      	movs	r1, #3
 8000c2c:	400a      	ands	r2, r1
 8000c2e:	00d2      	lsls	r2, r2, #3
 8000c30:	4093      	lsls	r3, r2
 8000c32:	697a      	ldr	r2, [r7, #20]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8000c38:	4936      	ldr	r1, [pc, #216]	@ (8000d14 <HAL_GPIO_Init+0x2c4>)
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	089b      	lsrs	r3, r3, #2
 8000c3e:	3318      	adds	r3, #24
 8000c40:	009b      	lsls	r3, r3, #2
 8000c42:	697a      	ldr	r2, [r7, #20]
 8000c44:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8000c46:	4a33      	ldr	r2, [pc, #204]	@ (8000d14 <HAL_GPIO_Init+0x2c4>)
 8000c48:	2380      	movs	r3, #128	@ 0x80
 8000c4a:	58d3      	ldr	r3, [r2, r3]
 8000c4c:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000c4e:	68fb      	ldr	r3, [r7, #12]
 8000c50:	43da      	mvns	r2, r3
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	4013      	ands	r3, r2
 8000c56:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000c58:	683b      	ldr	r3, [r7, #0]
 8000c5a:	685a      	ldr	r2, [r3, #4]
 8000c5c:	2380      	movs	r3, #128	@ 0x80
 8000c5e:	025b      	lsls	r3, r3, #9
 8000c60:	4013      	ands	r3, r2
 8000c62:	d003      	beq.n	8000c6c <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8000c64:	697a      	ldr	r2, [r7, #20]
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	4313      	orrs	r3, r2
 8000c6a:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8000c6c:	4929      	ldr	r1, [pc, #164]	@ (8000d14 <HAL_GPIO_Init+0x2c4>)
 8000c6e:	2280      	movs	r2, #128	@ 0x80
 8000c70:	697b      	ldr	r3, [r7, #20]
 8000c72:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8000c74:	4a27      	ldr	r2, [pc, #156]	@ (8000d14 <HAL_GPIO_Init+0x2c4>)
 8000c76:	2384      	movs	r3, #132	@ 0x84
 8000c78:	58d3      	ldr	r3, [r2, r3]
 8000c7a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	43da      	mvns	r2, r3
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	4013      	ands	r3, r2
 8000c84:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	685a      	ldr	r2, [r3, #4]
 8000c8a:	2380      	movs	r3, #128	@ 0x80
 8000c8c:	029b      	lsls	r3, r3, #10
 8000c8e:	4013      	ands	r3, r2
 8000c90:	d003      	beq.n	8000c9a <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8000c92:	697a      	ldr	r2, [r7, #20]
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	4313      	orrs	r3, r2
 8000c98:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8000c9a:	491e      	ldr	r1, [pc, #120]	@ (8000d14 <HAL_GPIO_Init+0x2c4>)
 8000c9c:	2284      	movs	r2, #132	@ 0x84
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8000ca2:	4b1c      	ldr	r3, [pc, #112]	@ (8000d14 <HAL_GPIO_Init+0x2c4>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000ca8:	68fb      	ldr	r3, [r7, #12]
 8000caa:	43da      	mvns	r2, r3
 8000cac:	697b      	ldr	r3, [r7, #20]
 8000cae:	4013      	ands	r3, r2
 8000cb0:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000cb2:	683b      	ldr	r3, [r7, #0]
 8000cb4:	685a      	ldr	r2, [r3, #4]
 8000cb6:	2380      	movs	r3, #128	@ 0x80
 8000cb8:	035b      	lsls	r3, r3, #13
 8000cba:	4013      	ands	r3, r2
 8000cbc:	d003      	beq.n	8000cc6 <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8000cbe:	697a      	ldr	r2, [r7, #20]
 8000cc0:	68fb      	ldr	r3, [r7, #12]
 8000cc2:	4313      	orrs	r3, r2
 8000cc4:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8000cc6:	4b13      	ldr	r3, [pc, #76]	@ (8000d14 <HAL_GPIO_Init+0x2c4>)
 8000cc8:	697a      	ldr	r2, [r7, #20]
 8000cca:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8000ccc:	4b11      	ldr	r3, [pc, #68]	@ (8000d14 <HAL_GPIO_Init+0x2c4>)
 8000cce:	685b      	ldr	r3, [r3, #4]
 8000cd0:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8000cd2:	68fb      	ldr	r3, [r7, #12]
 8000cd4:	43da      	mvns	r2, r3
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	4013      	ands	r3, r2
 8000cda:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000cdc:	683b      	ldr	r3, [r7, #0]
 8000cde:	685a      	ldr	r2, [r3, #4]
 8000ce0:	2380      	movs	r3, #128	@ 0x80
 8000ce2:	039b      	lsls	r3, r3, #14
 8000ce4:	4013      	ands	r3, r2
 8000ce6:	d003      	beq.n	8000cf0 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8000ce8:	697a      	ldr	r2, [r7, #20]
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	4313      	orrs	r3, r2
 8000cee:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8000cf0:	4b08      	ldr	r3, [pc, #32]	@ (8000d14 <HAL_GPIO_Init+0x2c4>)
 8000cf2:	697a      	ldr	r2, [r7, #20]
 8000cf4:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8000cf6:	693b      	ldr	r3, [r7, #16]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	681a      	ldr	r2, [r3, #0]
 8000d00:	693b      	ldr	r3, [r7, #16]
 8000d02:	40da      	lsrs	r2, r3
 8000d04:	1e13      	subs	r3, r2, #0
 8000d06:	d000      	beq.n	8000d0a <HAL_GPIO_Init+0x2ba>
 8000d08:	e6aa      	b.n	8000a60 <HAL_GPIO_Init+0x10>
  }
}
 8000d0a:	46c0      	nop			@ (mov r8, r8)
 8000d0c:	46c0      	nop			@ (mov r8, r8)
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	b006      	add	sp, #24
 8000d12:	bd80      	pop	{r7, pc}
 8000d14:	40021800 	.word	0x40021800
 8000d18:	50000400 	.word	0x50000400
 8000d1c:	50000800 	.word	0x50000800
 8000d20:	50001400 	.word	0x50001400

08000d24 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
 8000d2c:	0008      	movs	r0, r1
 8000d2e:	0011      	movs	r1, r2
 8000d30:	1cbb      	adds	r3, r7, #2
 8000d32:	1c02      	adds	r2, r0, #0
 8000d34:	801a      	strh	r2, [r3, #0]
 8000d36:	1c7b      	adds	r3, r7, #1
 8000d38:	1c0a      	adds	r2, r1, #0
 8000d3a:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000d3c:	1c7b      	adds	r3, r7, #1
 8000d3e:	781b      	ldrb	r3, [r3, #0]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d004      	beq.n	8000d4e <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000d44:	1cbb      	adds	r3, r7, #2
 8000d46:	881a      	ldrh	r2, [r3, #0]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000d4c:	e003      	b.n	8000d56 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000d4e:	1cbb      	adds	r3, r7, #2
 8000d50:	881a      	ldrh	r2, [r3, #0]
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8000d56:	46c0      	nop			@ (mov r8, r8)
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	b002      	add	sp, #8
 8000d5c:	bd80      	pop	{r7, pc}
	...

08000d60 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b082      	sub	sp, #8
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	0002      	movs	r2, r0
 8000d68:	1dbb      	adds	r3, r7, #6
 8000d6a:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8000d6c:	4b10      	ldr	r3, [pc, #64]	@ (8000db0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	1dba      	adds	r2, r7, #6
 8000d72:	8812      	ldrh	r2, [r2, #0]
 8000d74:	4013      	ands	r3, r2
 8000d76:	d008      	beq.n	8000d8a <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8000d78:	4b0d      	ldr	r3, [pc, #52]	@ (8000db0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000d7a:	1dba      	adds	r2, r7, #6
 8000d7c:	8812      	ldrh	r2, [r2, #0]
 8000d7e:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8000d80:	1dbb      	adds	r3, r7, #6
 8000d82:	881b      	ldrh	r3, [r3, #0]
 8000d84:	0018      	movs	r0, r3
 8000d86:	f7ff fc03 	bl	8000590 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 8000d8a:	4b09      	ldr	r3, [pc, #36]	@ (8000db0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000d8c:	691b      	ldr	r3, [r3, #16]
 8000d8e:	1dba      	adds	r2, r7, #6
 8000d90:	8812      	ldrh	r2, [r2, #0]
 8000d92:	4013      	ands	r3, r2
 8000d94:	d008      	beq.n	8000da8 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8000d96:	4b06      	ldr	r3, [pc, #24]	@ (8000db0 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8000d98:	1dba      	adds	r2, r7, #6
 8000d9a:	8812      	ldrh	r2, [r2, #0]
 8000d9c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8000d9e:	1dbb      	adds	r3, r7, #6
 8000da0:	881b      	ldrh	r3, [r3, #0]
 8000da2:	0018      	movs	r0, r3
 8000da4:	f7ff fc06 	bl	80005b4 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8000da8:	46c0      	nop			@ (mov r8, r8)
 8000daa:	46bd      	mov	sp, r7
 8000dac:	b002      	add	sp, #8
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40021800 	.word	0x40021800

08000db4 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	b086      	sub	sp, #24
 8000db8:	af00      	add	r7, sp, #0
 8000dba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d101      	bne.n	8000dc6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	e1d0      	b.n	8001168 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	2201      	movs	r2, #1
 8000dcc:	4013      	ands	r3, r2
 8000dce:	d100      	bne.n	8000dd2 <HAL_RCC_OscConfig+0x1e>
 8000dd0:	e069      	b.n	8000ea6 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000dd2:	4bc8      	ldr	r3, [pc, #800]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	2238      	movs	r2, #56	@ 0x38
 8000dd8:	4013      	ands	r3, r2
 8000dda:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8000ddc:	697b      	ldr	r3, [r7, #20]
 8000dde:	2b08      	cmp	r3, #8
 8000de0:	d105      	bne.n	8000dee <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	685b      	ldr	r3, [r3, #4]
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d15d      	bne.n	8000ea6 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8000dea:	2301      	movs	r3, #1
 8000dec:	e1bc      	b.n	8001168 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685a      	ldr	r2, [r3, #4]
 8000df2:	2380      	movs	r3, #128	@ 0x80
 8000df4:	025b      	lsls	r3, r3, #9
 8000df6:	429a      	cmp	r2, r3
 8000df8:	d107      	bne.n	8000e0a <HAL_RCC_OscConfig+0x56>
 8000dfa:	4bbe      	ldr	r3, [pc, #760]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000dfc:	681a      	ldr	r2, [r3, #0]
 8000dfe:	4bbd      	ldr	r3, [pc, #756]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000e00:	2180      	movs	r1, #128	@ 0x80
 8000e02:	0249      	lsls	r1, r1, #9
 8000e04:	430a      	orrs	r2, r1
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	e020      	b.n	8000e4c <HAL_RCC_OscConfig+0x98>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	685a      	ldr	r2, [r3, #4]
 8000e0e:	23a0      	movs	r3, #160	@ 0xa0
 8000e10:	02db      	lsls	r3, r3, #11
 8000e12:	429a      	cmp	r2, r3
 8000e14:	d10e      	bne.n	8000e34 <HAL_RCC_OscConfig+0x80>
 8000e16:	4bb7      	ldr	r3, [pc, #732]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000e18:	681a      	ldr	r2, [r3, #0]
 8000e1a:	4bb6      	ldr	r3, [pc, #728]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000e1c:	2180      	movs	r1, #128	@ 0x80
 8000e1e:	02c9      	lsls	r1, r1, #11
 8000e20:	430a      	orrs	r2, r1
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	4bb3      	ldr	r3, [pc, #716]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000e26:	681a      	ldr	r2, [r3, #0]
 8000e28:	4bb2      	ldr	r3, [pc, #712]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000e2a:	2180      	movs	r1, #128	@ 0x80
 8000e2c:	0249      	lsls	r1, r1, #9
 8000e2e:	430a      	orrs	r2, r1
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	e00b      	b.n	8000e4c <HAL_RCC_OscConfig+0x98>
 8000e34:	4baf      	ldr	r3, [pc, #700]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000e36:	681a      	ldr	r2, [r3, #0]
 8000e38:	4bae      	ldr	r3, [pc, #696]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000e3a:	49af      	ldr	r1, [pc, #700]	@ (80010f8 <HAL_RCC_OscConfig+0x344>)
 8000e3c:	400a      	ands	r2, r1
 8000e3e:	601a      	str	r2, [r3, #0]
 8000e40:	4bac      	ldr	r3, [pc, #688]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4bab      	ldr	r3, [pc, #684]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000e46:	49ad      	ldr	r1, [pc, #692]	@ (80010fc <HAL_RCC_OscConfig+0x348>)
 8000e48:	400a      	ands	r2, r1
 8000e4a:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d014      	beq.n	8000e7e <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e54:	f7ff fcf8 	bl	8000848 <HAL_GetTick>
 8000e58:	0003      	movs	r3, r0
 8000e5a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e5c:	e008      	b.n	8000e70 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000e5e:	f7ff fcf3 	bl	8000848 <HAL_GetTick>
 8000e62:	0002      	movs	r2, r0
 8000e64:	693b      	ldr	r3, [r7, #16]
 8000e66:	1ad3      	subs	r3, r2, r3
 8000e68:	2b64      	cmp	r3, #100	@ 0x64
 8000e6a:	d901      	bls.n	8000e70 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	e17b      	b.n	8001168 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8000e70:	4ba0      	ldr	r3, [pc, #640]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000e72:	681a      	ldr	r2, [r3, #0]
 8000e74:	2380      	movs	r3, #128	@ 0x80
 8000e76:	029b      	lsls	r3, r3, #10
 8000e78:	4013      	ands	r3, r2
 8000e7a:	d0f0      	beq.n	8000e5e <HAL_RCC_OscConfig+0xaa>
 8000e7c:	e013      	b.n	8000ea6 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000e7e:	f7ff fce3 	bl	8000848 <HAL_GetTick>
 8000e82:	0003      	movs	r3, r0
 8000e84:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e86:	e008      	b.n	8000e9a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8000e88:	f7ff fcde 	bl	8000848 <HAL_GetTick>
 8000e8c:	0002      	movs	r2, r0
 8000e8e:	693b      	ldr	r3, [r7, #16]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	2b64      	cmp	r3, #100	@ 0x64
 8000e94:	d901      	bls.n	8000e9a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8000e96:	2303      	movs	r3, #3
 8000e98:	e166      	b.n	8001168 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8000e9a:	4b96      	ldr	r3, [pc, #600]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	2380      	movs	r3, #128	@ 0x80
 8000ea0:	029b      	lsls	r3, r3, #10
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	d1f0      	bne.n	8000e88 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	2202      	movs	r2, #2
 8000eac:	4013      	ands	r3, r2
 8000eae:	d100      	bne.n	8000eb2 <HAL_RCC_OscConfig+0xfe>
 8000eb0:	e086      	b.n	8000fc0 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000eb2:	4b90      	ldr	r3, [pc, #576]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000eb4:	689b      	ldr	r3, [r3, #8]
 8000eb6:	2238      	movs	r2, #56	@ 0x38
 8000eb8:	4013      	ands	r3, r2
 8000eba:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000ebc:	697b      	ldr	r3, [r7, #20]
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d12f      	bne.n	8000f22 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	68db      	ldr	r3, [r3, #12]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d101      	bne.n	8000ece <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8000eca:	2301      	movs	r3, #1
 8000ecc:	e14c      	b.n	8001168 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000ece:	4b89      	ldr	r3, [pc, #548]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000ed0:	685b      	ldr	r3, [r3, #4]
 8000ed2:	4a8b      	ldr	r2, [pc, #556]	@ (8001100 <HAL_RCC_OscConfig+0x34c>)
 8000ed4:	4013      	ands	r3, r2
 8000ed6:	0019      	movs	r1, r3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	695b      	ldr	r3, [r3, #20]
 8000edc:	021a      	lsls	r2, r3, #8
 8000ede:	4b85      	ldr	r3, [pc, #532]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000ee0:	430a      	orrs	r2, r1
 8000ee2:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8000ee4:	697b      	ldr	r3, [r7, #20]
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d112      	bne.n	8000f10 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000eea:	4b82      	ldr	r3, [pc, #520]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	4a85      	ldr	r2, [pc, #532]	@ (8001104 <HAL_RCC_OscConfig+0x350>)
 8000ef0:	4013      	ands	r3, r2
 8000ef2:	0019      	movs	r1, r3
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	691a      	ldr	r2, [r3, #16]
 8000ef8:	4b7e      	ldr	r3, [pc, #504]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000efa:	430a      	orrs	r2, r1
 8000efc:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8000efe:	4b7d      	ldr	r3, [pc, #500]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	0adb      	lsrs	r3, r3, #11
 8000f04:	2207      	movs	r2, #7
 8000f06:	4013      	ands	r3, r2
 8000f08:	4a7f      	ldr	r2, [pc, #508]	@ (8001108 <HAL_RCC_OscConfig+0x354>)
 8000f0a:	40da      	lsrs	r2, r3
 8000f0c:	4b7f      	ldr	r3, [pc, #508]	@ (800110c <HAL_RCC_OscConfig+0x358>)
 8000f0e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8000f10:	4b7f      	ldr	r3, [pc, #508]	@ (8001110 <HAL_RCC_OscConfig+0x35c>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	0018      	movs	r0, r3
 8000f16:	f7ff fc3b 	bl	8000790 <HAL_InitTick>
 8000f1a:	1e03      	subs	r3, r0, #0
 8000f1c:	d050      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8000f1e:	2301      	movs	r3, #1
 8000f20:	e122      	b.n	8001168 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d030      	beq.n	8000f8c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8000f2a:	4b72      	ldr	r3, [pc, #456]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	4a75      	ldr	r2, [pc, #468]	@ (8001104 <HAL_RCC_OscConfig+0x350>)
 8000f30:	4013      	ands	r3, r2
 8000f32:	0019      	movs	r1, r3
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	691a      	ldr	r2, [r3, #16]
 8000f38:	4b6e      	ldr	r3, [pc, #440]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000f3a:	430a      	orrs	r2, r1
 8000f3c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8000f3e:	4b6d      	ldr	r3, [pc, #436]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000f40:	681a      	ldr	r2, [r3, #0]
 8000f42:	4b6c      	ldr	r3, [pc, #432]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000f44:	2180      	movs	r1, #128	@ 0x80
 8000f46:	0049      	lsls	r1, r1, #1
 8000f48:	430a      	orrs	r2, r1
 8000f4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f4c:	f7ff fc7c 	bl	8000848 <HAL_GetTick>
 8000f50:	0003      	movs	r3, r0
 8000f52:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f54:	e008      	b.n	8000f68 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000f56:	f7ff fc77 	bl	8000848 <HAL_GetTick>
 8000f5a:	0002      	movs	r2, r0
 8000f5c:	693b      	ldr	r3, [r7, #16]
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	2b02      	cmp	r3, #2
 8000f62:	d901      	bls.n	8000f68 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8000f64:	2303      	movs	r3, #3
 8000f66:	e0ff      	b.n	8001168 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8000f68:	4b62      	ldr	r3, [pc, #392]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000f6a:	681a      	ldr	r2, [r3, #0]
 8000f6c:	2380      	movs	r3, #128	@ 0x80
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	4013      	ands	r3, r2
 8000f72:	d0f0      	beq.n	8000f56 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000f74:	4b5f      	ldr	r3, [pc, #380]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000f76:	685b      	ldr	r3, [r3, #4]
 8000f78:	4a61      	ldr	r2, [pc, #388]	@ (8001100 <HAL_RCC_OscConfig+0x34c>)
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	0019      	movs	r1, r3
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	695b      	ldr	r3, [r3, #20]
 8000f82:	021a      	lsls	r2, r3, #8
 8000f84:	4b5b      	ldr	r3, [pc, #364]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000f86:	430a      	orrs	r2, r1
 8000f88:	605a      	str	r2, [r3, #4]
 8000f8a:	e019      	b.n	8000fc0 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8000f8c:	4b59      	ldr	r3, [pc, #356]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000f8e:	681a      	ldr	r2, [r3, #0]
 8000f90:	4b58      	ldr	r3, [pc, #352]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000f92:	4960      	ldr	r1, [pc, #384]	@ (8001114 <HAL_RCC_OscConfig+0x360>)
 8000f94:	400a      	ands	r2, r1
 8000f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000f98:	f7ff fc56 	bl	8000848 <HAL_GetTick>
 8000f9c:	0003      	movs	r3, r0
 8000f9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fa0:	e008      	b.n	8000fb4 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8000fa2:	f7ff fc51 	bl	8000848 <HAL_GetTick>
 8000fa6:	0002      	movs	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	2b02      	cmp	r3, #2
 8000fae:	d901      	bls.n	8000fb4 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8000fb0:	2303      	movs	r3, #3
 8000fb2:	e0d9      	b.n	8001168 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8000fb4:	4b4f      	ldr	r3, [pc, #316]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000fb6:	681a      	ldr	r2, [r3, #0]
 8000fb8:	2380      	movs	r3, #128	@ 0x80
 8000fba:	00db      	lsls	r3, r3, #3
 8000fbc:	4013      	ands	r3, r2
 8000fbe:	d1f0      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	2208      	movs	r2, #8
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	d042      	beq.n	8001050 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8000fca:	4b4a      	ldr	r3, [pc, #296]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000fcc:	689b      	ldr	r3, [r3, #8]
 8000fce:	2238      	movs	r2, #56	@ 0x38
 8000fd0:	4013      	ands	r3, r2
 8000fd2:	2b18      	cmp	r3, #24
 8000fd4:	d105      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d138      	bne.n	8001050 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8000fde:	2301      	movs	r3, #1
 8000fe0:	e0c2      	b.n	8001168 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	699b      	ldr	r3, [r3, #24]
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d019      	beq.n	800101e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8000fea:	4b42      	ldr	r3, [pc, #264]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000fec:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8000fee:	4b41      	ldr	r3, [pc, #260]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000ff6:	f7ff fc27 	bl	8000848 <HAL_GetTick>
 8000ffa:	0003      	movs	r3, r0
 8000ffc:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001000:	f7ff fc22 	bl	8000848 <HAL_GetTick>
 8001004:	0002      	movs	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e0aa      	b.n	8001168 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001012:	4b38      	ldr	r3, [pc, #224]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8001014:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001016:	2202      	movs	r2, #2
 8001018:	4013      	ands	r3, r2
 800101a:	d0f1      	beq.n	8001000 <HAL_RCC_OscConfig+0x24c>
 800101c:	e018      	b.n	8001050 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800101e:	4b35      	ldr	r3, [pc, #212]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8001020:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8001022:	4b34      	ldr	r3, [pc, #208]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8001024:	2101      	movs	r1, #1
 8001026:	438a      	bics	r2, r1
 8001028:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800102a:	f7ff fc0d 	bl	8000848 <HAL_GetTick>
 800102e:	0003      	movs	r3, r0
 8001030:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001032:	e008      	b.n	8001046 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001034:	f7ff fc08 	bl	8000848 <HAL_GetTick>
 8001038:	0002      	movs	r2, r0
 800103a:	693b      	ldr	r3, [r7, #16]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	2b02      	cmp	r3, #2
 8001040:	d901      	bls.n	8001046 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001042:	2303      	movs	r3, #3
 8001044:	e090      	b.n	8001168 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001046:	4b2b      	ldr	r3, [pc, #172]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8001048:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800104a:	2202      	movs	r2, #2
 800104c:	4013      	ands	r3, r2
 800104e:	d1f1      	bne.n	8001034 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	2204      	movs	r2, #4
 8001056:	4013      	ands	r3, r2
 8001058:	d100      	bne.n	800105c <HAL_RCC_OscConfig+0x2a8>
 800105a:	e084      	b.n	8001166 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 800105c:	230f      	movs	r3, #15
 800105e:	18fb      	adds	r3, r7, r3
 8001060:	2200      	movs	r2, #0
 8001062:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001064:	4b23      	ldr	r3, [pc, #140]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8001066:	689b      	ldr	r3, [r3, #8]
 8001068:	2238      	movs	r2, #56	@ 0x38
 800106a:	4013      	ands	r3, r2
 800106c:	2b20      	cmp	r3, #32
 800106e:	d106      	bne.n	800107e <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	2b00      	cmp	r3, #0
 8001076:	d000      	beq.n	800107a <HAL_RCC_OscConfig+0x2c6>
 8001078:	e075      	b.n	8001166 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800107a:	2301      	movs	r3, #1
 800107c:	e074      	b.n	8001168 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	689b      	ldr	r3, [r3, #8]
 8001082:	2b01      	cmp	r3, #1
 8001084:	d106      	bne.n	8001094 <HAL_RCC_OscConfig+0x2e0>
 8001086:	4b1b      	ldr	r3, [pc, #108]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 8001088:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800108a:	4b1a      	ldr	r3, [pc, #104]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 800108c:	2101      	movs	r1, #1
 800108e:	430a      	orrs	r2, r1
 8001090:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001092:	e01c      	b.n	80010ce <HAL_RCC_OscConfig+0x31a>
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	689b      	ldr	r3, [r3, #8]
 8001098:	2b05      	cmp	r3, #5
 800109a:	d10c      	bne.n	80010b6 <HAL_RCC_OscConfig+0x302>
 800109c:	4b15      	ldr	r3, [pc, #84]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 800109e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80010a0:	4b14      	ldr	r3, [pc, #80]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 80010a2:	2104      	movs	r1, #4
 80010a4:	430a      	orrs	r2, r1
 80010a6:	65da      	str	r2, [r3, #92]	@ 0x5c
 80010a8:	4b12      	ldr	r3, [pc, #72]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 80010aa:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80010ac:	4b11      	ldr	r3, [pc, #68]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 80010ae:	2101      	movs	r1, #1
 80010b0:	430a      	orrs	r2, r1
 80010b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80010b4:	e00b      	b.n	80010ce <HAL_RCC_OscConfig+0x31a>
 80010b6:	4b0f      	ldr	r3, [pc, #60]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 80010b8:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80010ba:	4b0e      	ldr	r3, [pc, #56]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 80010bc:	2101      	movs	r1, #1
 80010be:	438a      	bics	r2, r1
 80010c0:	65da      	str	r2, [r3, #92]	@ 0x5c
 80010c2:	4b0c      	ldr	r3, [pc, #48]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 80010c4:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80010c6:	4b0b      	ldr	r3, [pc, #44]	@ (80010f4 <HAL_RCC_OscConfig+0x340>)
 80010c8:	2104      	movs	r1, #4
 80010ca:	438a      	bics	r2, r1
 80010cc:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	689b      	ldr	r3, [r3, #8]
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d028      	beq.n	8001128 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010d6:	f7ff fbb7 	bl	8000848 <HAL_GetTick>
 80010da:	0003      	movs	r3, r0
 80010dc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80010de:	e01d      	b.n	800111c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80010e0:	f7ff fbb2 	bl	8000848 <HAL_GetTick>
 80010e4:	0002      	movs	r2, r0
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	1ad3      	subs	r3, r2, r3
 80010ea:	4a0b      	ldr	r2, [pc, #44]	@ (8001118 <HAL_RCC_OscConfig+0x364>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d915      	bls.n	800111c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e039      	b.n	8001168 <HAL_RCC_OscConfig+0x3b4>
 80010f4:	40021000 	.word	0x40021000
 80010f8:	fffeffff 	.word	0xfffeffff
 80010fc:	fffbffff 	.word	0xfffbffff
 8001100:	ffff80ff 	.word	0xffff80ff
 8001104:	ffffc7ff 	.word	0xffffc7ff
 8001108:	02dc6c00 	.word	0x02dc6c00
 800110c:	20000000 	.word	0x20000000
 8001110:	20000004 	.word	0x20000004
 8001114:	fffffeff 	.word	0xfffffeff
 8001118:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800111c:	4b14      	ldr	r3, [pc, #80]	@ (8001170 <HAL_RCC_OscConfig+0x3bc>)
 800111e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001120:	2202      	movs	r2, #2
 8001122:	4013      	ands	r3, r2
 8001124:	d0dc      	beq.n	80010e0 <HAL_RCC_OscConfig+0x32c>
 8001126:	e013      	b.n	8001150 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001128:	f7ff fb8e 	bl	8000848 <HAL_GetTick>
 800112c:	0003      	movs	r3, r0
 800112e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001130:	e009      	b.n	8001146 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001132:	f7ff fb89 	bl	8000848 <HAL_GetTick>
 8001136:	0002      	movs	r2, r0
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	1ad3      	subs	r3, r2, r3
 800113c:	4a0d      	ldr	r2, [pc, #52]	@ (8001174 <HAL_RCC_OscConfig+0x3c0>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d901      	bls.n	8001146 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	e010      	b.n	8001168 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001146:	4b0a      	ldr	r3, [pc, #40]	@ (8001170 <HAL_RCC_OscConfig+0x3bc>)
 8001148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800114a:	2202      	movs	r2, #2
 800114c:	4013      	ands	r3, r2
 800114e:	d1f0      	bne.n	8001132 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001150:	230f      	movs	r3, #15
 8001152:	18fb      	adds	r3, r7, r3
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	2b01      	cmp	r3, #1
 8001158:	d105      	bne.n	8001166 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800115a:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <HAL_RCC_OscConfig+0x3bc>)
 800115c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800115e:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <HAL_RCC_OscConfig+0x3bc>)
 8001160:	4905      	ldr	r1, [pc, #20]	@ (8001178 <HAL_RCC_OscConfig+0x3c4>)
 8001162:	400a      	ands	r2, r1
 8001164:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	0018      	movs	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	b006      	add	sp, #24
 800116e:	bd80      	pop	{r7, pc}
 8001170:	40021000 	.word	0x40021000
 8001174:	00001388 	.word	0x00001388
 8001178:	efffffff 	.word	0xefffffff

0800117c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b084      	sub	sp, #16
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e0df      	b.n	8001350 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001190:	4b71      	ldr	r3, [pc, #452]	@ (8001358 <HAL_RCC_ClockConfig+0x1dc>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2207      	movs	r2, #7
 8001196:	4013      	ands	r3, r2
 8001198:	683a      	ldr	r2, [r7, #0]
 800119a:	429a      	cmp	r2, r3
 800119c:	d91e      	bls.n	80011dc <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800119e:	4b6e      	ldr	r3, [pc, #440]	@ (8001358 <HAL_RCC_ClockConfig+0x1dc>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	2207      	movs	r2, #7
 80011a4:	4393      	bics	r3, r2
 80011a6:	0019      	movs	r1, r3
 80011a8:	4b6b      	ldr	r3, [pc, #428]	@ (8001358 <HAL_RCC_ClockConfig+0x1dc>)
 80011aa:	683a      	ldr	r2, [r7, #0]
 80011ac:	430a      	orrs	r2, r1
 80011ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80011b0:	f7ff fb4a 	bl	8000848 <HAL_GetTick>
 80011b4:	0003      	movs	r3, r0
 80011b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011b8:	e009      	b.n	80011ce <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80011ba:	f7ff fb45 	bl	8000848 <HAL_GetTick>
 80011be:	0002      	movs	r2, r0
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	1ad3      	subs	r3, r2, r3
 80011c4:	4a65      	ldr	r2, [pc, #404]	@ (800135c <HAL_RCC_ClockConfig+0x1e0>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e0c0      	b.n	8001350 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80011ce:	4b62      	ldr	r3, [pc, #392]	@ (8001358 <HAL_RCC_ClockConfig+0x1dc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2207      	movs	r2, #7
 80011d4:	4013      	ands	r3, r2
 80011d6:	683a      	ldr	r2, [r7, #0]
 80011d8:	429a      	cmp	r2, r3
 80011da:	d1ee      	bne.n	80011ba <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	2202      	movs	r2, #2
 80011e2:	4013      	ands	r3, r2
 80011e4:	d017      	beq.n	8001216 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	2204      	movs	r2, #4
 80011ec:	4013      	ands	r3, r2
 80011ee:	d008      	beq.n	8001202 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80011f0:	4b5b      	ldr	r3, [pc, #364]	@ (8001360 <HAL_RCC_ClockConfig+0x1e4>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	4a5b      	ldr	r2, [pc, #364]	@ (8001364 <HAL_RCC_ClockConfig+0x1e8>)
 80011f6:	401a      	ands	r2, r3
 80011f8:	4b59      	ldr	r3, [pc, #356]	@ (8001360 <HAL_RCC_ClockConfig+0x1e4>)
 80011fa:	21b0      	movs	r1, #176	@ 0xb0
 80011fc:	0109      	lsls	r1, r1, #4
 80011fe:	430a      	orrs	r2, r1
 8001200:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001202:	4b57      	ldr	r3, [pc, #348]	@ (8001360 <HAL_RCC_ClockConfig+0x1e4>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	4a58      	ldr	r2, [pc, #352]	@ (8001368 <HAL_RCC_ClockConfig+0x1ec>)
 8001208:	4013      	ands	r3, r2
 800120a:	0019      	movs	r1, r3
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	68da      	ldr	r2, [r3, #12]
 8001210:	4b53      	ldr	r3, [pc, #332]	@ (8001360 <HAL_RCC_ClockConfig+0x1e4>)
 8001212:	430a      	orrs	r2, r1
 8001214:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2201      	movs	r2, #1
 800121c:	4013      	ands	r3, r2
 800121e:	d04b      	beq.n	80012b8 <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b01      	cmp	r3, #1
 8001226:	d107      	bne.n	8001238 <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001228:	4b4d      	ldr	r3, [pc, #308]	@ (8001360 <HAL_RCC_ClockConfig+0x1e4>)
 800122a:	681a      	ldr	r2, [r3, #0]
 800122c:	2380      	movs	r3, #128	@ 0x80
 800122e:	029b      	lsls	r3, r3, #10
 8001230:	4013      	ands	r3, r2
 8001232:	d11f      	bne.n	8001274 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e08b      	b.n	8001350 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d107      	bne.n	8001250 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001240:	4b47      	ldr	r3, [pc, #284]	@ (8001360 <HAL_RCC_ClockConfig+0x1e4>)
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	2380      	movs	r3, #128	@ 0x80
 8001246:	00db      	lsls	r3, r3, #3
 8001248:	4013      	ands	r3, r2
 800124a:	d113      	bne.n	8001274 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 800124c:	2301      	movs	r3, #1
 800124e:	e07f      	b.n	8001350 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	685b      	ldr	r3, [r3, #4]
 8001254:	2b03      	cmp	r3, #3
 8001256:	d106      	bne.n	8001266 <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001258:	4b41      	ldr	r3, [pc, #260]	@ (8001360 <HAL_RCC_ClockConfig+0x1e4>)
 800125a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800125c:	2202      	movs	r2, #2
 800125e:	4013      	ands	r3, r2
 8001260:	d108      	bne.n	8001274 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001262:	2301      	movs	r3, #1
 8001264:	e074      	b.n	8001350 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001266:	4b3e      	ldr	r3, [pc, #248]	@ (8001360 <HAL_RCC_ClockConfig+0x1e4>)
 8001268:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800126a:	2202      	movs	r2, #2
 800126c:	4013      	ands	r3, r2
 800126e:	d101      	bne.n	8001274 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e06d      	b.n	8001350 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001274:	4b3a      	ldr	r3, [pc, #232]	@ (8001360 <HAL_RCC_ClockConfig+0x1e4>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	2207      	movs	r2, #7
 800127a:	4393      	bics	r3, r2
 800127c:	0019      	movs	r1, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	685a      	ldr	r2, [r3, #4]
 8001282:	4b37      	ldr	r3, [pc, #220]	@ (8001360 <HAL_RCC_ClockConfig+0x1e4>)
 8001284:	430a      	orrs	r2, r1
 8001286:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001288:	f7ff fade 	bl	8000848 <HAL_GetTick>
 800128c:	0003      	movs	r3, r0
 800128e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001290:	e009      	b.n	80012a6 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001292:	f7ff fad9 	bl	8000848 <HAL_GetTick>
 8001296:	0002      	movs	r2, r0
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	1ad3      	subs	r3, r2, r3
 800129c:	4a2f      	ldr	r2, [pc, #188]	@ (800135c <HAL_RCC_ClockConfig+0x1e0>)
 800129e:	4293      	cmp	r3, r2
 80012a0:	d901      	bls.n	80012a6 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80012a2:	2303      	movs	r3, #3
 80012a4:	e054      	b.n	8001350 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80012a6:	4b2e      	ldr	r3, [pc, #184]	@ (8001360 <HAL_RCC_ClockConfig+0x1e4>)
 80012a8:	689b      	ldr	r3, [r3, #8]
 80012aa:	2238      	movs	r2, #56	@ 0x38
 80012ac:	401a      	ands	r2, r3
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	00db      	lsls	r3, r3, #3
 80012b4:	429a      	cmp	r2, r3
 80012b6:	d1ec      	bne.n	8001292 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80012b8:	4b27      	ldr	r3, [pc, #156]	@ (8001358 <HAL_RCC_ClockConfig+0x1dc>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	2207      	movs	r2, #7
 80012be:	4013      	ands	r3, r2
 80012c0:	683a      	ldr	r2, [r7, #0]
 80012c2:	429a      	cmp	r2, r3
 80012c4:	d21e      	bcs.n	8001304 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80012c6:	4b24      	ldr	r3, [pc, #144]	@ (8001358 <HAL_RCC_ClockConfig+0x1dc>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	2207      	movs	r2, #7
 80012cc:	4393      	bics	r3, r2
 80012ce:	0019      	movs	r1, r3
 80012d0:	4b21      	ldr	r3, [pc, #132]	@ (8001358 <HAL_RCC_ClockConfig+0x1dc>)
 80012d2:	683a      	ldr	r2, [r7, #0]
 80012d4:	430a      	orrs	r2, r1
 80012d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80012d8:	f7ff fab6 	bl	8000848 <HAL_GetTick>
 80012dc:	0003      	movs	r3, r0
 80012de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012e0:	e009      	b.n	80012f6 <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80012e2:	f7ff fab1 	bl	8000848 <HAL_GetTick>
 80012e6:	0002      	movs	r2, r0
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	1ad3      	subs	r3, r2, r3
 80012ec:	4a1b      	ldr	r2, [pc, #108]	@ (800135c <HAL_RCC_ClockConfig+0x1e0>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d901      	bls.n	80012f6 <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 80012f2:	2303      	movs	r3, #3
 80012f4:	e02c      	b.n	8001350 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80012f6:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <HAL_RCC_ClockConfig+0x1dc>)
 80012f8:	681b      	ldr	r3, [r3, #0]
 80012fa:	2207      	movs	r2, #7
 80012fc:	4013      	ands	r3, r2
 80012fe:	683a      	ldr	r2, [r7, #0]
 8001300:	429a      	cmp	r2, r3
 8001302:	d1ee      	bne.n	80012e2 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	2204      	movs	r2, #4
 800130a:	4013      	ands	r3, r2
 800130c:	d009      	beq.n	8001322 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800130e:	4b14      	ldr	r3, [pc, #80]	@ (8001360 <HAL_RCC_ClockConfig+0x1e4>)
 8001310:	689b      	ldr	r3, [r3, #8]
 8001312:	4a16      	ldr	r2, [pc, #88]	@ (800136c <HAL_RCC_ClockConfig+0x1f0>)
 8001314:	4013      	ands	r3, r2
 8001316:	0019      	movs	r1, r3
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	691a      	ldr	r2, [r3, #16]
 800131c:	4b10      	ldr	r3, [pc, #64]	@ (8001360 <HAL_RCC_ClockConfig+0x1e4>)
 800131e:	430a      	orrs	r2, r1
 8001320:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001322:	f000 f82b 	bl	800137c <HAL_RCC_GetSysClockFreq>
 8001326:	0001      	movs	r1, r0
 8001328:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <HAL_RCC_ClockConfig+0x1e4>)
 800132a:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800132c:	0a1b      	lsrs	r3, r3, #8
 800132e:	220f      	movs	r2, #15
 8001330:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001332:	4b0f      	ldr	r3, [pc, #60]	@ (8001370 <HAL_RCC_ClockConfig+0x1f4>)
 8001334:	0092      	lsls	r2, r2, #2
 8001336:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001338:	221f      	movs	r2, #31
 800133a:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 800133c:	000a      	movs	r2, r1
 800133e:	40da      	lsrs	r2, r3
 8001340:	4b0c      	ldr	r3, [pc, #48]	@ (8001374 <HAL_RCC_ClockConfig+0x1f8>)
 8001342:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001344:	4b0c      	ldr	r3, [pc, #48]	@ (8001378 <HAL_RCC_ClockConfig+0x1fc>)
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	0018      	movs	r0, r3
 800134a:	f7ff fa21 	bl	8000790 <HAL_InitTick>
 800134e:	0003      	movs	r3, r0
}
 8001350:	0018      	movs	r0, r3
 8001352:	46bd      	mov	sp, r7
 8001354:	b004      	add	sp, #16
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40022000 	.word	0x40022000
 800135c:	00001388 	.word	0x00001388
 8001360:	40021000 	.word	0x40021000
 8001364:	ffff84ff 	.word	0xffff84ff
 8001368:	fffff0ff 	.word	0xfffff0ff
 800136c:	ffff8fff 	.word	0xffff8fff
 8001370:	08001a38 	.word	0x08001a38
 8001374:	20000000 	.word	0x20000000
 8001378:	20000004 	.word	0x20000004

0800137c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001382:	4b1c      	ldr	r3, [pc, #112]	@ (80013f4 <HAL_RCC_GetSysClockFreq+0x78>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2238      	movs	r2, #56	@ 0x38
 8001388:	4013      	ands	r3, r2
 800138a:	d10f      	bne.n	80013ac <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 800138c:	4b19      	ldr	r3, [pc, #100]	@ (80013f4 <HAL_RCC_GetSysClockFreq+0x78>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	0adb      	lsrs	r3, r3, #11
 8001392:	2207      	movs	r2, #7
 8001394:	4013      	ands	r3, r2
 8001396:	2201      	movs	r2, #1
 8001398:	409a      	lsls	r2, r3
 800139a:	0013      	movs	r3, r2
 800139c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800139e:	6839      	ldr	r1, [r7, #0]
 80013a0:	4815      	ldr	r0, [pc, #84]	@ (80013f8 <HAL_RCC_GetSysClockFreq+0x7c>)
 80013a2:	f7fe feb1 	bl	8000108 <__udivsi3>
 80013a6:	0003      	movs	r3, r0
 80013a8:	607b      	str	r3, [r7, #4]
 80013aa:	e01e      	b.n	80013ea <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80013ac:	4b11      	ldr	r3, [pc, #68]	@ (80013f4 <HAL_RCC_GetSysClockFreq+0x78>)
 80013ae:	689b      	ldr	r3, [r3, #8]
 80013b0:	2238      	movs	r2, #56	@ 0x38
 80013b2:	4013      	ands	r3, r2
 80013b4:	2b08      	cmp	r3, #8
 80013b6:	d102      	bne.n	80013be <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80013b8:	4b10      	ldr	r3, [pc, #64]	@ (80013fc <HAL_RCC_GetSysClockFreq+0x80>)
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	e015      	b.n	80013ea <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80013be:	4b0d      	ldr	r3, [pc, #52]	@ (80013f4 <HAL_RCC_GetSysClockFreq+0x78>)
 80013c0:	689b      	ldr	r3, [r3, #8]
 80013c2:	2238      	movs	r2, #56	@ 0x38
 80013c4:	4013      	ands	r3, r2
 80013c6:	2b20      	cmp	r3, #32
 80013c8:	d103      	bne.n	80013d2 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80013ca:	2380      	movs	r3, #128	@ 0x80
 80013cc:	021b      	lsls	r3, r3, #8
 80013ce:	607b      	str	r3, [r7, #4]
 80013d0:	e00b      	b.n	80013ea <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80013d2:	4b08      	ldr	r3, [pc, #32]	@ (80013f4 <HAL_RCC_GetSysClockFreq+0x78>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	2238      	movs	r2, #56	@ 0x38
 80013d8:	4013      	ands	r3, r2
 80013da:	2b18      	cmp	r3, #24
 80013dc:	d103      	bne.n	80013e6 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80013de:	23fa      	movs	r3, #250	@ 0xfa
 80013e0:	01db      	lsls	r3, r3, #7
 80013e2:	607b      	str	r3, [r7, #4]
 80013e4:	e001      	b.n	80013ea <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 80013e6:	2300      	movs	r3, #0
 80013e8:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 80013ea:	687b      	ldr	r3, [r7, #4]
}
 80013ec:	0018      	movs	r0, r3
 80013ee:	46bd      	mov	sp, r7
 80013f0:	b002      	add	sp, #8
 80013f2:	bd80      	pop	{r7, pc}
 80013f4:	40021000 	.word	0x40021000
 80013f8:	02dc6c00 	.word	0x02dc6c00
 80013fc:	007a1200 	.word	0x007a1200

08001400 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001400:	b580      	push	{r7, lr}
 8001402:	b082      	sub	sp, #8
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	2b00      	cmp	r3, #0
 800140c:	d101      	bne.n	8001412 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800140e:	2301      	movs	r3, #1
 8001410:	e04a      	b.n	80014a8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	223d      	movs	r2, #61	@ 0x3d
 8001416:	5c9b      	ldrb	r3, [r3, r2]
 8001418:	b2db      	uxtb	r3, r3
 800141a:	2b00      	cmp	r3, #0
 800141c:	d107      	bne.n	800142e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	223c      	movs	r2, #60	@ 0x3c
 8001422:	2100      	movs	r1, #0
 8001424:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	0018      	movs	r0, r3
 800142a:	f7ff f909 	bl	8000640 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	223d      	movs	r2, #61	@ 0x3d
 8001432:	2102      	movs	r1, #2
 8001434:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681a      	ldr	r2, [r3, #0]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	3304      	adds	r3, #4
 800143e:	0019      	movs	r1, r3
 8001440:	0010      	movs	r0, r2
 8001442:	f000 f951 	bl	80016e8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2248      	movs	r2, #72	@ 0x48
 800144a:	2101      	movs	r1, #1
 800144c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	223e      	movs	r2, #62	@ 0x3e
 8001452:	2101      	movs	r1, #1
 8001454:	5499      	strb	r1, [r3, r2]
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	223f      	movs	r2, #63	@ 0x3f
 800145a:	2101      	movs	r1, #1
 800145c:	5499      	strb	r1, [r3, r2]
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2240      	movs	r2, #64	@ 0x40
 8001462:	2101      	movs	r1, #1
 8001464:	5499      	strb	r1, [r3, r2]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	2241      	movs	r2, #65	@ 0x41
 800146a:	2101      	movs	r1, #1
 800146c:	5499      	strb	r1, [r3, r2]
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	2242      	movs	r2, #66	@ 0x42
 8001472:	2101      	movs	r1, #1
 8001474:	5499      	strb	r1, [r3, r2]
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2243      	movs	r2, #67	@ 0x43
 800147a:	2101      	movs	r1, #1
 800147c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	2244      	movs	r2, #68	@ 0x44
 8001482:	2101      	movs	r1, #1
 8001484:	5499      	strb	r1, [r3, r2]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	2245      	movs	r2, #69	@ 0x45
 800148a:	2101      	movs	r1, #1
 800148c:	5499      	strb	r1, [r3, r2]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2246      	movs	r2, #70	@ 0x46
 8001492:	2101      	movs	r1, #1
 8001494:	5499      	strb	r1, [r3, r2]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2247      	movs	r2, #71	@ 0x47
 800149a:	2101      	movs	r1, #1
 800149c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	223d      	movs	r2, #61	@ 0x3d
 80014a2:	2101      	movs	r1, #1
 80014a4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80014a6:	2300      	movs	r3, #0
}
 80014a8:	0018      	movs	r0, r3
 80014aa:	46bd      	mov	sp, r7
 80014ac:	b002      	add	sp, #8
 80014ae:	bd80      	pop	{r7, pc}

080014b0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b084      	sub	sp, #16
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	223d      	movs	r2, #61	@ 0x3d
 80014bc:	5c9b      	ldrb	r3, [r3, r2]
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b01      	cmp	r3, #1
 80014c2:	d001      	beq.n	80014c8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e02f      	b.n	8001528 <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	223d      	movs	r2, #61	@ 0x3d
 80014cc:	2102      	movs	r1, #2
 80014ce:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a16      	ldr	r2, [pc, #88]	@ (8001530 <HAL_TIM_Base_Start+0x80>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d004      	beq.n	80014e4 <HAL_TIM_Base_Start+0x34>
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a15      	ldr	r2, [pc, #84]	@ (8001534 <HAL_TIM_Base_Start+0x84>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d116      	bne.n	8001512 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	4a13      	ldr	r2, [pc, #76]	@ (8001538 <HAL_TIM_Base_Start+0x88>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	2b06      	cmp	r3, #6
 80014f4:	d016      	beq.n	8001524 <HAL_TIM_Base_Start+0x74>
 80014f6:	68fa      	ldr	r2, [r7, #12]
 80014f8:	2380      	movs	r3, #128	@ 0x80
 80014fa:	025b      	lsls	r3, r3, #9
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d011      	beq.n	8001524 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	681a      	ldr	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2101      	movs	r1, #1
 800150c:	430a      	orrs	r2, r1
 800150e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001510:	e008      	b.n	8001524 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2101      	movs	r1, #1
 800151e:	430a      	orrs	r2, r1
 8001520:	601a      	str	r2, [r3, #0]
 8001522:	e000      	b.n	8001526 <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001524:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	0018      	movs	r0, r3
 800152a:	46bd      	mov	sp, r7
 800152c:	b004      	add	sp, #16
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40012c00 	.word	0x40012c00
 8001534:	40000400 	.word	0x40000400
 8001538:	00010007 	.word	0x00010007

0800153c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	b084      	sub	sp, #16
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001546:	230f      	movs	r3, #15
 8001548:	18fb      	adds	r3, r7, r3
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	223c      	movs	r2, #60	@ 0x3c
 8001552:	5c9b      	ldrb	r3, [r3, r2]
 8001554:	2b01      	cmp	r3, #1
 8001556:	d101      	bne.n	800155c <HAL_TIM_ConfigClockSource+0x20>
 8001558:	2302      	movs	r3, #2
 800155a:	e0bc      	b.n	80016d6 <HAL_TIM_ConfigClockSource+0x19a>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	223c      	movs	r2, #60	@ 0x3c
 8001560:	2101      	movs	r1, #1
 8001562:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	223d      	movs	r2, #61	@ 0x3d
 8001568:	2102      	movs	r1, #2
 800156a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001574:	68bb      	ldr	r3, [r7, #8]
 8001576:	4a5a      	ldr	r2, [pc, #360]	@ (80016e0 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001578:	4013      	ands	r3, r2
 800157a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800157c:	68bb      	ldr	r3, [r7, #8]
 800157e:	4a59      	ldr	r2, [pc, #356]	@ (80016e4 <HAL_TIM_ConfigClockSource+0x1a8>)
 8001580:	4013      	ands	r3, r2
 8001582:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	68ba      	ldr	r2, [r7, #8]
 800158a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2280      	movs	r2, #128	@ 0x80
 8001592:	0192      	lsls	r2, r2, #6
 8001594:	4293      	cmp	r3, r2
 8001596:	d040      	beq.n	800161a <HAL_TIM_ConfigClockSource+0xde>
 8001598:	2280      	movs	r2, #128	@ 0x80
 800159a:	0192      	lsls	r2, r2, #6
 800159c:	4293      	cmp	r3, r2
 800159e:	d900      	bls.n	80015a2 <HAL_TIM_ConfigClockSource+0x66>
 80015a0:	e088      	b.n	80016b4 <HAL_TIM_ConfigClockSource+0x178>
 80015a2:	2280      	movs	r2, #128	@ 0x80
 80015a4:	0152      	lsls	r2, r2, #5
 80015a6:	4293      	cmp	r3, r2
 80015a8:	d100      	bne.n	80015ac <HAL_TIM_ConfigClockSource+0x70>
 80015aa:	e088      	b.n	80016be <HAL_TIM_ConfigClockSource+0x182>
 80015ac:	2280      	movs	r2, #128	@ 0x80
 80015ae:	0152      	lsls	r2, r2, #5
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d900      	bls.n	80015b6 <HAL_TIM_ConfigClockSource+0x7a>
 80015b4:	e07e      	b.n	80016b4 <HAL_TIM_ConfigClockSource+0x178>
 80015b6:	2b70      	cmp	r3, #112	@ 0x70
 80015b8:	d018      	beq.n	80015ec <HAL_TIM_ConfigClockSource+0xb0>
 80015ba:	d900      	bls.n	80015be <HAL_TIM_ConfigClockSource+0x82>
 80015bc:	e07a      	b.n	80016b4 <HAL_TIM_ConfigClockSource+0x178>
 80015be:	2b60      	cmp	r3, #96	@ 0x60
 80015c0:	d04f      	beq.n	8001662 <HAL_TIM_ConfigClockSource+0x126>
 80015c2:	d900      	bls.n	80015c6 <HAL_TIM_ConfigClockSource+0x8a>
 80015c4:	e076      	b.n	80016b4 <HAL_TIM_ConfigClockSource+0x178>
 80015c6:	2b50      	cmp	r3, #80	@ 0x50
 80015c8:	d03b      	beq.n	8001642 <HAL_TIM_ConfigClockSource+0x106>
 80015ca:	d900      	bls.n	80015ce <HAL_TIM_ConfigClockSource+0x92>
 80015cc:	e072      	b.n	80016b4 <HAL_TIM_ConfigClockSource+0x178>
 80015ce:	2b40      	cmp	r3, #64	@ 0x40
 80015d0:	d057      	beq.n	8001682 <HAL_TIM_ConfigClockSource+0x146>
 80015d2:	d900      	bls.n	80015d6 <HAL_TIM_ConfigClockSource+0x9a>
 80015d4:	e06e      	b.n	80016b4 <HAL_TIM_ConfigClockSource+0x178>
 80015d6:	2b30      	cmp	r3, #48	@ 0x30
 80015d8:	d063      	beq.n	80016a2 <HAL_TIM_ConfigClockSource+0x166>
 80015da:	d86b      	bhi.n	80016b4 <HAL_TIM_ConfigClockSource+0x178>
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d060      	beq.n	80016a2 <HAL_TIM_ConfigClockSource+0x166>
 80015e0:	d868      	bhi.n	80016b4 <HAL_TIM_ConfigClockSource+0x178>
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d05d      	beq.n	80016a2 <HAL_TIM_ConfigClockSource+0x166>
 80015e6:	2b10      	cmp	r3, #16
 80015e8:	d05b      	beq.n	80016a2 <HAL_TIM_ConfigClockSource+0x166>
 80015ea:	e063      	b.n	80016b4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80015f8:	683b      	ldr	r3, [r7, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80015fc:	f000 f962 	bl	80018c4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	689b      	ldr	r3, [r3, #8]
 8001606:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001608:	68bb      	ldr	r3, [r7, #8]
 800160a:	2277      	movs	r2, #119	@ 0x77
 800160c:	4313      	orrs	r3, r2
 800160e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	68ba      	ldr	r2, [r7, #8]
 8001616:	609a      	str	r2, [r3, #8]
      break;
 8001618:	e052      	b.n	80016c0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800162a:	f000 f94b 	bl	80018c4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2180      	movs	r1, #128	@ 0x80
 800163a:	01c9      	lsls	r1, r1, #7
 800163c:	430a      	orrs	r2, r1
 800163e:	609a      	str	r2, [r3, #8]
      break;
 8001640:	e03e      	b.n	80016c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800164e:	001a      	movs	r2, r3
 8001650:	f000 f8bc 	bl	80017cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	2150      	movs	r1, #80	@ 0x50
 800165a:	0018      	movs	r0, r3
 800165c:	f000 f916 	bl	800188c <TIM_ITRx_SetConfig>
      break;
 8001660:	e02e      	b.n	80016c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800166a:	683b      	ldr	r3, [r7, #0]
 800166c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800166e:	001a      	movs	r2, r3
 8001670:	f000 f8da 	bl	8001828 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	2160      	movs	r1, #96	@ 0x60
 800167a:	0018      	movs	r0, r3
 800167c:	f000 f906 	bl	800188c <TIM_ITRx_SetConfig>
      break;
 8001680:	e01e      	b.n	80016c0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800168e:	001a      	movs	r2, r3
 8001690:	f000 f89c 	bl	80017cc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	2140      	movs	r1, #64	@ 0x40
 800169a:	0018      	movs	r0, r3
 800169c:	f000 f8f6 	bl	800188c <TIM_ITRx_SetConfig>
      break;
 80016a0:	e00e      	b.n	80016c0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681a      	ldr	r2, [r3, #0]
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	0019      	movs	r1, r3
 80016ac:	0010      	movs	r0, r2
 80016ae:	f000 f8ed 	bl	800188c <TIM_ITRx_SetConfig>
      break;
 80016b2:	e005      	b.n	80016c0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80016b4:	230f      	movs	r3, #15
 80016b6:	18fb      	adds	r3, r7, r3
 80016b8:	2201      	movs	r2, #1
 80016ba:	701a      	strb	r2, [r3, #0]
      break;
 80016bc:	e000      	b.n	80016c0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80016be:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	223d      	movs	r2, #61	@ 0x3d
 80016c4:	2101      	movs	r1, #1
 80016c6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	223c      	movs	r2, #60	@ 0x3c
 80016cc:	2100      	movs	r1, #0
 80016ce:	5499      	strb	r1, [r3, r2]

  return status;
 80016d0:	230f      	movs	r3, #15
 80016d2:	18fb      	adds	r3, r7, r3
 80016d4:	781b      	ldrb	r3, [r3, #0]
}
 80016d6:	0018      	movs	r0, r3
 80016d8:	46bd      	mov	sp, r7
 80016da:	b004      	add	sp, #16
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	46c0      	nop			@ (mov r8, r8)
 80016e0:	ffceff88 	.word	0xffceff88
 80016e4:	ffff00ff 	.word	0xffff00ff

080016e8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b084      	sub	sp, #16
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
 80016f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	4a2e      	ldr	r2, [pc, #184]	@ (80017b4 <TIM_Base_SetConfig+0xcc>)
 80016fc:	4293      	cmp	r3, r2
 80016fe:	d003      	beq.n	8001708 <TIM_Base_SetConfig+0x20>
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	4a2d      	ldr	r2, [pc, #180]	@ (80017b8 <TIM_Base_SetConfig+0xd0>)
 8001704:	4293      	cmp	r3, r2
 8001706:	d108      	bne.n	800171a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	2270      	movs	r2, #112	@ 0x70
 800170c:	4393      	bics	r3, r2
 800170e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	685b      	ldr	r3, [r3, #4]
 8001714:	68fa      	ldr	r2, [r7, #12]
 8001716:	4313      	orrs	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	4a25      	ldr	r2, [pc, #148]	@ (80017b4 <TIM_Base_SetConfig+0xcc>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d00f      	beq.n	8001742 <TIM_Base_SetConfig+0x5a>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	4a24      	ldr	r2, [pc, #144]	@ (80017b8 <TIM_Base_SetConfig+0xd0>)
 8001726:	4293      	cmp	r3, r2
 8001728:	d00b      	beq.n	8001742 <TIM_Base_SetConfig+0x5a>
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	4a23      	ldr	r2, [pc, #140]	@ (80017bc <TIM_Base_SetConfig+0xd4>)
 800172e:	4293      	cmp	r3, r2
 8001730:	d007      	beq.n	8001742 <TIM_Base_SetConfig+0x5a>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	4a22      	ldr	r2, [pc, #136]	@ (80017c0 <TIM_Base_SetConfig+0xd8>)
 8001736:	4293      	cmp	r3, r2
 8001738:	d003      	beq.n	8001742 <TIM_Base_SetConfig+0x5a>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a21      	ldr	r2, [pc, #132]	@ (80017c4 <TIM_Base_SetConfig+0xdc>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d108      	bne.n	8001754 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	4a20      	ldr	r2, [pc, #128]	@ (80017c8 <TIM_Base_SetConfig+0xe0>)
 8001746:	4013      	ands	r3, r2
 8001748:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	68db      	ldr	r3, [r3, #12]
 800174e:	68fa      	ldr	r2, [r7, #12]
 8001750:	4313      	orrs	r3, r2
 8001752:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	2280      	movs	r2, #128	@ 0x80
 8001758:	4393      	bics	r3, r2
 800175a:	001a      	movs	r2, r3
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	695b      	ldr	r3, [r3, #20]
 8001760:	4313      	orrs	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001764:	683b      	ldr	r3, [r7, #0]
 8001766:	689a      	ldr	r2, [r3, #8]
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4a0f      	ldr	r2, [pc, #60]	@ (80017b4 <TIM_Base_SetConfig+0xcc>)
 8001778:	4293      	cmp	r3, r2
 800177a:	d007      	beq.n	800178c <TIM_Base_SetConfig+0xa4>
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	4a10      	ldr	r2, [pc, #64]	@ (80017c0 <TIM_Base_SetConfig+0xd8>)
 8001780:	4293      	cmp	r3, r2
 8001782:	d003      	beq.n	800178c <TIM_Base_SetConfig+0xa4>
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	4a0f      	ldr	r2, [pc, #60]	@ (80017c4 <TIM_Base_SetConfig+0xdc>)
 8001788:	4293      	cmp	r3, r2
 800178a:	d103      	bne.n	8001794 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	691a      	ldr	r2, [r3, #16]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	2204      	movs	r2, #4
 800179a:	431a      	orrs	r2, r3
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	2201      	movs	r2, #1
 80017a4:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	68fa      	ldr	r2, [r7, #12]
 80017aa:	601a      	str	r2, [r3, #0]
}
 80017ac:	46c0      	nop			@ (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b004      	add	sp, #16
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40012c00 	.word	0x40012c00
 80017b8:	40000400 	.word	0x40000400
 80017bc:	40002000 	.word	0x40002000
 80017c0:	40014400 	.word	0x40014400
 80017c4:	40014800 	.word	0x40014800
 80017c8:	fffffcff 	.word	0xfffffcff

080017cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80017cc:	b580      	push	{r7, lr}
 80017ce:	b086      	sub	sp, #24
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	60f8      	str	r0, [r7, #12]
 80017d4:	60b9      	str	r1, [r7, #8]
 80017d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	6a1b      	ldr	r3, [r3, #32]
 80017dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	2201      	movs	r2, #1
 80017e4:	4393      	bics	r3, r2
 80017e6:	001a      	movs	r2, r3
 80017e8:	68fb      	ldr	r3, [r7, #12]
 80017ea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80017ec:	68fb      	ldr	r3, [r7, #12]
 80017ee:	699b      	ldr	r3, [r3, #24]
 80017f0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	22f0      	movs	r2, #240	@ 0xf0
 80017f6:	4393      	bics	r3, r2
 80017f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	011b      	lsls	r3, r3, #4
 80017fe:	693a      	ldr	r2, [r7, #16]
 8001800:	4313      	orrs	r3, r2
 8001802:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	220a      	movs	r2, #10
 8001808:	4393      	bics	r3, r2
 800180a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800180c:	697a      	ldr	r2, [r7, #20]
 800180e:	68bb      	ldr	r3, [r7, #8]
 8001810:	4313      	orrs	r3, r2
 8001812:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	693a      	ldr	r2, [r7, #16]
 8001818:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	697a      	ldr	r2, [r7, #20]
 800181e:	621a      	str	r2, [r3, #32]
}
 8001820:	46c0      	nop			@ (mov r8, r8)
 8001822:	46bd      	mov	sp, r7
 8001824:	b006      	add	sp, #24
 8001826:	bd80      	pop	{r7, pc}

08001828 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	6a1b      	ldr	r3, [r3, #32]
 8001838:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	2210      	movs	r2, #16
 8001840:	4393      	bics	r3, r2
 8001842:	001a      	movs	r2, r3
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	699b      	ldr	r3, [r3, #24]
 800184c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800184e:	693b      	ldr	r3, [r7, #16]
 8001850:	4a0d      	ldr	r2, [pc, #52]	@ (8001888 <TIM_TI2_ConfigInputStage+0x60>)
 8001852:	4013      	ands	r3, r2
 8001854:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	031b      	lsls	r3, r3, #12
 800185a:	693a      	ldr	r2, [r7, #16]
 800185c:	4313      	orrs	r3, r2
 800185e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001860:	697b      	ldr	r3, [r7, #20]
 8001862:	22a0      	movs	r2, #160	@ 0xa0
 8001864:	4393      	bics	r3, r2
 8001866:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	011b      	lsls	r3, r3, #4
 800186c:	697a      	ldr	r2, [r7, #20]
 800186e:	4313      	orrs	r3, r2
 8001870:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	693a      	ldr	r2, [r7, #16]
 8001876:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	697a      	ldr	r2, [r7, #20]
 800187c:	621a      	str	r2, [r3, #32]
}
 800187e:	46c0      	nop			@ (mov r8, r8)
 8001880:	46bd      	mov	sp, r7
 8001882:	b006      	add	sp, #24
 8001884:	bd80      	pop	{r7, pc}
 8001886:	46c0      	nop			@ (mov r8, r8)
 8001888:	ffff0fff 	.word	0xffff0fff

0800188c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b084      	sub	sp, #16
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	689b      	ldr	r3, [r3, #8]
 800189a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	4a08      	ldr	r2, [pc, #32]	@ (80018c0 <TIM_ITRx_SetConfig+0x34>)
 80018a0:	4013      	ands	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80018a4:	683a      	ldr	r2, [r7, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	4313      	orrs	r3, r2
 80018aa:	2207      	movs	r2, #7
 80018ac:	4313      	orrs	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	68fa      	ldr	r2, [r7, #12]
 80018b4:	609a      	str	r2, [r3, #8]
}
 80018b6:	46c0      	nop			@ (mov r8, r8)
 80018b8:	46bd      	mov	sp, r7
 80018ba:	b004      	add	sp, #16
 80018bc:	bd80      	pop	{r7, pc}
 80018be:	46c0      	nop			@ (mov r8, r8)
 80018c0:	ffcfff8f 	.word	0xffcfff8f

080018c4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b086      	sub	sp, #24
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	60f8      	str	r0, [r7, #12]
 80018cc:	60b9      	str	r1, [r7, #8]
 80018ce:	607a      	str	r2, [r7, #4]
 80018d0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	689b      	ldr	r3, [r3, #8]
 80018d6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	4a09      	ldr	r2, [pc, #36]	@ (8001900 <TIM_ETR_SetConfig+0x3c>)
 80018dc:	4013      	ands	r3, r2
 80018de:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80018e0:	683b      	ldr	r3, [r7, #0]
 80018e2:	021a      	lsls	r2, r3, #8
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	431a      	orrs	r2, r3
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	4313      	orrs	r3, r2
 80018ec:	697a      	ldr	r2, [r7, #20]
 80018ee:	4313      	orrs	r3, r2
 80018f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	697a      	ldr	r2, [r7, #20]
 80018f6:	609a      	str	r2, [r3, #8]
}
 80018f8:	46c0      	nop			@ (mov r8, r8)
 80018fa:	46bd      	mov	sp, r7
 80018fc:	b006      	add	sp, #24
 80018fe:	bd80      	pop	{r7, pc}
 8001900:	ffff00ff 	.word	0xffff00ff

08001904 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	223c      	movs	r2, #60	@ 0x3c
 8001912:	5c9b      	ldrb	r3, [r3, r2]
 8001914:	2b01      	cmp	r3, #1
 8001916:	d101      	bne.n	800191c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8001918:	2302      	movs	r3, #2
 800191a:	e04a      	b.n	80019b2 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	223c      	movs	r2, #60	@ 0x3c
 8001920:	2101      	movs	r1, #1
 8001922:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	223d      	movs	r2, #61	@ 0x3d
 8001928:	2102      	movs	r1, #2
 800192a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	689b      	ldr	r3, [r3, #8]
 800193a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	4a1e      	ldr	r2, [pc, #120]	@ (80019bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d108      	bne.n	8001958 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4a1d      	ldr	r2, [pc, #116]	@ (80019c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 800194a:	4013      	ands	r3, r2
 800194c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800194e:	683b      	ldr	r3, [r7, #0]
 8001950:	685b      	ldr	r3, [r3, #4]
 8001952:	68fa      	ldr	r2, [r7, #12]
 8001954:	4313      	orrs	r3, r2
 8001956:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8001958:	68fb      	ldr	r3, [r7, #12]
 800195a:	2270      	movs	r2, #112	@ 0x70
 800195c:	4393      	bics	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001960:	683b      	ldr	r3, [r7, #0]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	68fa      	ldr	r2, [r7, #12]
 8001966:	4313      	orrs	r3, r2
 8001968:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	68fa      	ldr	r2, [r7, #12]
 8001970:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a11      	ldr	r2, [pc, #68]	@ (80019bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d004      	beq.n	8001986 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a10      	ldr	r2, [pc, #64]	@ (80019c4 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d10c      	bne.n	80019a0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8001986:	68bb      	ldr	r3, [r7, #8]
 8001988:	2280      	movs	r2, #128	@ 0x80
 800198a:	4393      	bics	r3, r2
 800198c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	4313      	orrs	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	68ba      	ldr	r2, [r7, #8]
 800199e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	223d      	movs	r2, #61	@ 0x3d
 80019a4:	2101      	movs	r1, #1
 80019a6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	223c      	movs	r2, #60	@ 0x3c
 80019ac:	2100      	movs	r1, #0
 80019ae:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80019b0:	2300      	movs	r3, #0
}
 80019b2:	0018      	movs	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b004      	add	sp, #16
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	46c0      	nop			@ (mov r8, r8)
 80019bc:	40012c00 	.word	0x40012c00
 80019c0:	ff0fffff 	.word	0xff0fffff
 80019c4:	40000400 	.word	0x40000400

080019c8 <memset>:
 80019c8:	0003      	movs	r3, r0
 80019ca:	1882      	adds	r2, r0, r2
 80019cc:	4293      	cmp	r3, r2
 80019ce:	d100      	bne.n	80019d2 <memset+0xa>
 80019d0:	4770      	bx	lr
 80019d2:	7019      	strb	r1, [r3, #0]
 80019d4:	3301      	adds	r3, #1
 80019d6:	e7f9      	b.n	80019cc <memset+0x4>

080019d8 <__libc_init_array>:
 80019d8:	b570      	push	{r4, r5, r6, lr}
 80019da:	2600      	movs	r6, #0
 80019dc:	4c0c      	ldr	r4, [pc, #48]	@ (8001a10 <__libc_init_array+0x38>)
 80019de:	4d0d      	ldr	r5, [pc, #52]	@ (8001a14 <__libc_init_array+0x3c>)
 80019e0:	1b64      	subs	r4, r4, r5
 80019e2:	10a4      	asrs	r4, r4, #2
 80019e4:	42a6      	cmp	r6, r4
 80019e6:	d109      	bne.n	80019fc <__libc_init_array+0x24>
 80019e8:	2600      	movs	r6, #0
 80019ea:	f000 f819 	bl	8001a20 <_init>
 80019ee:	4c0a      	ldr	r4, [pc, #40]	@ (8001a18 <__libc_init_array+0x40>)
 80019f0:	4d0a      	ldr	r5, [pc, #40]	@ (8001a1c <__libc_init_array+0x44>)
 80019f2:	1b64      	subs	r4, r4, r5
 80019f4:	10a4      	asrs	r4, r4, #2
 80019f6:	42a6      	cmp	r6, r4
 80019f8:	d105      	bne.n	8001a06 <__libc_init_array+0x2e>
 80019fa:	bd70      	pop	{r4, r5, r6, pc}
 80019fc:	00b3      	lsls	r3, r6, #2
 80019fe:	58eb      	ldr	r3, [r5, r3]
 8001a00:	4798      	blx	r3
 8001a02:	3601      	adds	r6, #1
 8001a04:	e7ee      	b.n	80019e4 <__libc_init_array+0xc>
 8001a06:	00b3      	lsls	r3, r6, #2
 8001a08:	58eb      	ldr	r3, [r5, r3]
 8001a0a:	4798      	blx	r3
 8001a0c:	3601      	adds	r6, #1
 8001a0e:	e7f2      	b.n	80019f6 <__libc_init_array+0x1e>
 8001a10:	08001a78 	.word	0x08001a78
 8001a14:	08001a78 	.word	0x08001a78
 8001a18:	08001a7c 	.word	0x08001a7c
 8001a1c:	08001a78 	.word	0x08001a78

08001a20 <_init>:
 8001a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a22:	46c0      	nop			@ (mov r8, r8)
 8001a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a26:	bc08      	pop	{r3}
 8001a28:	469e      	mov	lr, r3
 8001a2a:	4770      	bx	lr

08001a2c <_fini>:
 8001a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001a2e:	46c0      	nop			@ (mov r8, r8)
 8001a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001a32:	bc08      	pop	{r3}
 8001a34:	469e      	mov	lr, r3
 8001a36:	4770      	bx	lr
