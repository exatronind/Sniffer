
Sniffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002448  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  08002508  08002508  00003508  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080025c4  080025c4  0000400c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080025c4  080025c4  0000400c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080025c4  080025c4  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080025c4  080025c4  000035c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080025c8  080025c8  000035c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  080025cc  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  2000000c  080025d8  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  080025d8  00004270  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000093d0  00000000  00000000  00004034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019a9  00000000  00000000  0000d404  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000009f8  00000000  00000000  0000edb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000007b0  00000000  00000000  0000f7a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000124f4  00000000  00000000  0000ff58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b6d0  00000000  00000000  0002244c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00074a68  00000000  00000000  0002db1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000a2584  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000023f4  00000000  00000000  000a25c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000a49bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000000c 	.word	0x2000000c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080024f0 	.word	0x080024f0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000010 	.word	0x20000010
 8000104:	080024f0 	.word	0x080024f0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	@ 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			@ (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			@ (mov r8, r8)

08000220 <__aeabi_fdiv>:
 8000220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000222:	4646      	mov	r6, r8
 8000224:	464f      	mov	r7, r9
 8000226:	46d6      	mov	lr, sl
 8000228:	0245      	lsls	r5, r0, #9
 800022a:	b5c0      	push	{r6, r7, lr}
 800022c:	0fc3      	lsrs	r3, r0, #31
 800022e:	0047      	lsls	r7, r0, #1
 8000230:	4698      	mov	r8, r3
 8000232:	1c0e      	adds	r6, r1, #0
 8000234:	0a6d      	lsrs	r5, r5, #9
 8000236:	0e3f      	lsrs	r7, r7, #24
 8000238:	d05b      	beq.n	80002f2 <__aeabi_fdiv+0xd2>
 800023a:	2fff      	cmp	r7, #255	@ 0xff
 800023c:	d021      	beq.n	8000282 <__aeabi_fdiv+0x62>
 800023e:	2380      	movs	r3, #128	@ 0x80
 8000240:	00ed      	lsls	r5, r5, #3
 8000242:	04db      	lsls	r3, r3, #19
 8000244:	431d      	orrs	r5, r3
 8000246:	2300      	movs	r3, #0
 8000248:	4699      	mov	r9, r3
 800024a:	469a      	mov	sl, r3
 800024c:	3f7f      	subs	r7, #127	@ 0x7f
 800024e:	0274      	lsls	r4, r6, #9
 8000250:	0073      	lsls	r3, r6, #1
 8000252:	0a64      	lsrs	r4, r4, #9
 8000254:	0e1b      	lsrs	r3, r3, #24
 8000256:	0ff6      	lsrs	r6, r6, #31
 8000258:	2b00      	cmp	r3, #0
 800025a:	d020      	beq.n	800029e <__aeabi_fdiv+0x7e>
 800025c:	2bff      	cmp	r3, #255	@ 0xff
 800025e:	d043      	beq.n	80002e8 <__aeabi_fdiv+0xc8>
 8000260:	2280      	movs	r2, #128	@ 0x80
 8000262:	2000      	movs	r0, #0
 8000264:	00e4      	lsls	r4, r4, #3
 8000266:	04d2      	lsls	r2, r2, #19
 8000268:	4314      	orrs	r4, r2
 800026a:	3b7f      	subs	r3, #127	@ 0x7f
 800026c:	4642      	mov	r2, r8
 800026e:	1aff      	subs	r7, r7, r3
 8000270:	464b      	mov	r3, r9
 8000272:	4072      	eors	r2, r6
 8000274:	2b0f      	cmp	r3, #15
 8000276:	d900      	bls.n	800027a <__aeabi_fdiv+0x5a>
 8000278:	e09d      	b.n	80003b6 <__aeabi_fdiv+0x196>
 800027a:	4971      	ldr	r1, [pc, #452]	@ (8000440 <__aeabi_fdiv+0x220>)
 800027c:	009b      	lsls	r3, r3, #2
 800027e:	58cb      	ldr	r3, [r1, r3]
 8000280:	469f      	mov	pc, r3
 8000282:	2d00      	cmp	r5, #0
 8000284:	d15a      	bne.n	800033c <__aeabi_fdiv+0x11c>
 8000286:	2308      	movs	r3, #8
 8000288:	4699      	mov	r9, r3
 800028a:	3b06      	subs	r3, #6
 800028c:	0274      	lsls	r4, r6, #9
 800028e:	469a      	mov	sl, r3
 8000290:	0073      	lsls	r3, r6, #1
 8000292:	27ff      	movs	r7, #255	@ 0xff
 8000294:	0a64      	lsrs	r4, r4, #9
 8000296:	0e1b      	lsrs	r3, r3, #24
 8000298:	0ff6      	lsrs	r6, r6, #31
 800029a:	2b00      	cmp	r3, #0
 800029c:	d1de      	bne.n	800025c <__aeabi_fdiv+0x3c>
 800029e:	2c00      	cmp	r4, #0
 80002a0:	d13b      	bne.n	800031a <__aeabi_fdiv+0xfa>
 80002a2:	2301      	movs	r3, #1
 80002a4:	4642      	mov	r2, r8
 80002a6:	4649      	mov	r1, r9
 80002a8:	4072      	eors	r2, r6
 80002aa:	4319      	orrs	r1, r3
 80002ac:	290e      	cmp	r1, #14
 80002ae:	d818      	bhi.n	80002e2 <__aeabi_fdiv+0xc2>
 80002b0:	4864      	ldr	r0, [pc, #400]	@ (8000444 <__aeabi_fdiv+0x224>)
 80002b2:	0089      	lsls	r1, r1, #2
 80002b4:	5841      	ldr	r1, [r0, r1]
 80002b6:	468f      	mov	pc, r1
 80002b8:	4653      	mov	r3, sl
 80002ba:	2b02      	cmp	r3, #2
 80002bc:	d100      	bne.n	80002c0 <__aeabi_fdiv+0xa0>
 80002be:	e0b8      	b.n	8000432 <__aeabi_fdiv+0x212>
 80002c0:	2b03      	cmp	r3, #3
 80002c2:	d06e      	beq.n	80003a2 <__aeabi_fdiv+0x182>
 80002c4:	4642      	mov	r2, r8
 80002c6:	002c      	movs	r4, r5
 80002c8:	2b01      	cmp	r3, #1
 80002ca:	d140      	bne.n	800034e <__aeabi_fdiv+0x12e>
 80002cc:	2000      	movs	r0, #0
 80002ce:	2400      	movs	r4, #0
 80002d0:	05c0      	lsls	r0, r0, #23
 80002d2:	4320      	orrs	r0, r4
 80002d4:	07d2      	lsls	r2, r2, #31
 80002d6:	4310      	orrs	r0, r2
 80002d8:	bce0      	pop	{r5, r6, r7}
 80002da:	46ba      	mov	sl, r7
 80002dc:	46b1      	mov	r9, r6
 80002de:	46a8      	mov	r8, r5
 80002e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002e2:	20ff      	movs	r0, #255	@ 0xff
 80002e4:	2400      	movs	r4, #0
 80002e6:	e7f3      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 80002e8:	2c00      	cmp	r4, #0
 80002ea:	d120      	bne.n	800032e <__aeabi_fdiv+0x10e>
 80002ec:	2302      	movs	r3, #2
 80002ee:	3fff      	subs	r7, #255	@ 0xff
 80002f0:	e7d8      	b.n	80002a4 <__aeabi_fdiv+0x84>
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d105      	bne.n	8000302 <__aeabi_fdiv+0xe2>
 80002f6:	2304      	movs	r3, #4
 80002f8:	4699      	mov	r9, r3
 80002fa:	3b03      	subs	r3, #3
 80002fc:	2700      	movs	r7, #0
 80002fe:	469a      	mov	sl, r3
 8000300:	e7a5      	b.n	800024e <__aeabi_fdiv+0x2e>
 8000302:	0028      	movs	r0, r5
 8000304:	f000 fa42 	bl	800078c <__clzsi2>
 8000308:	2776      	movs	r7, #118	@ 0x76
 800030a:	1f43      	subs	r3, r0, #5
 800030c:	409d      	lsls	r5, r3
 800030e:	2300      	movs	r3, #0
 8000310:	427f      	negs	r7, r7
 8000312:	4699      	mov	r9, r3
 8000314:	469a      	mov	sl, r3
 8000316:	1a3f      	subs	r7, r7, r0
 8000318:	e799      	b.n	800024e <__aeabi_fdiv+0x2e>
 800031a:	0020      	movs	r0, r4
 800031c:	f000 fa36 	bl	800078c <__clzsi2>
 8000320:	1f43      	subs	r3, r0, #5
 8000322:	409c      	lsls	r4, r3
 8000324:	2376      	movs	r3, #118	@ 0x76
 8000326:	425b      	negs	r3, r3
 8000328:	1a1b      	subs	r3, r3, r0
 800032a:	2000      	movs	r0, #0
 800032c:	e79e      	b.n	800026c <__aeabi_fdiv+0x4c>
 800032e:	2303      	movs	r3, #3
 8000330:	464a      	mov	r2, r9
 8000332:	431a      	orrs	r2, r3
 8000334:	4691      	mov	r9, r2
 8000336:	2003      	movs	r0, #3
 8000338:	33fc      	adds	r3, #252	@ 0xfc
 800033a:	e797      	b.n	800026c <__aeabi_fdiv+0x4c>
 800033c:	230c      	movs	r3, #12
 800033e:	4699      	mov	r9, r3
 8000340:	3b09      	subs	r3, #9
 8000342:	27ff      	movs	r7, #255	@ 0xff
 8000344:	469a      	mov	sl, r3
 8000346:	e782      	b.n	800024e <__aeabi_fdiv+0x2e>
 8000348:	2803      	cmp	r0, #3
 800034a:	d02c      	beq.n	80003a6 <__aeabi_fdiv+0x186>
 800034c:	0032      	movs	r2, r6
 800034e:	0038      	movs	r0, r7
 8000350:	307f      	adds	r0, #127	@ 0x7f
 8000352:	2800      	cmp	r0, #0
 8000354:	dd47      	ble.n	80003e6 <__aeabi_fdiv+0x1c6>
 8000356:	0763      	lsls	r3, r4, #29
 8000358:	d004      	beq.n	8000364 <__aeabi_fdiv+0x144>
 800035a:	230f      	movs	r3, #15
 800035c:	4023      	ands	r3, r4
 800035e:	2b04      	cmp	r3, #4
 8000360:	d000      	beq.n	8000364 <__aeabi_fdiv+0x144>
 8000362:	3404      	adds	r4, #4
 8000364:	0123      	lsls	r3, r4, #4
 8000366:	d503      	bpl.n	8000370 <__aeabi_fdiv+0x150>
 8000368:	0038      	movs	r0, r7
 800036a:	4b37      	ldr	r3, [pc, #220]	@ (8000448 <__aeabi_fdiv+0x228>)
 800036c:	3080      	adds	r0, #128	@ 0x80
 800036e:	401c      	ands	r4, r3
 8000370:	28fe      	cmp	r0, #254	@ 0xfe
 8000372:	dcb6      	bgt.n	80002e2 <__aeabi_fdiv+0xc2>
 8000374:	01a4      	lsls	r4, r4, #6
 8000376:	0a64      	lsrs	r4, r4, #9
 8000378:	b2c0      	uxtb	r0, r0
 800037a:	e7a9      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 800037c:	2480      	movs	r4, #128	@ 0x80
 800037e:	2200      	movs	r2, #0
 8000380:	20ff      	movs	r0, #255	@ 0xff
 8000382:	03e4      	lsls	r4, r4, #15
 8000384:	e7a4      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 8000386:	2380      	movs	r3, #128	@ 0x80
 8000388:	03db      	lsls	r3, r3, #15
 800038a:	421d      	tst	r5, r3
 800038c:	d001      	beq.n	8000392 <__aeabi_fdiv+0x172>
 800038e:	421c      	tst	r4, r3
 8000390:	d00b      	beq.n	80003aa <__aeabi_fdiv+0x18a>
 8000392:	2480      	movs	r4, #128	@ 0x80
 8000394:	03e4      	lsls	r4, r4, #15
 8000396:	432c      	orrs	r4, r5
 8000398:	0264      	lsls	r4, r4, #9
 800039a:	4642      	mov	r2, r8
 800039c:	20ff      	movs	r0, #255	@ 0xff
 800039e:	0a64      	lsrs	r4, r4, #9
 80003a0:	e796      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 80003a2:	4646      	mov	r6, r8
 80003a4:	002c      	movs	r4, r5
 80003a6:	2380      	movs	r3, #128	@ 0x80
 80003a8:	03db      	lsls	r3, r3, #15
 80003aa:	431c      	orrs	r4, r3
 80003ac:	0264      	lsls	r4, r4, #9
 80003ae:	0032      	movs	r2, r6
 80003b0:	20ff      	movs	r0, #255	@ 0xff
 80003b2:	0a64      	lsrs	r4, r4, #9
 80003b4:	e78c      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 80003b6:	016d      	lsls	r5, r5, #5
 80003b8:	0160      	lsls	r0, r4, #5
 80003ba:	4285      	cmp	r5, r0
 80003bc:	d22d      	bcs.n	800041a <__aeabi_fdiv+0x1fa>
 80003be:	231b      	movs	r3, #27
 80003c0:	2400      	movs	r4, #0
 80003c2:	3f01      	subs	r7, #1
 80003c4:	2601      	movs	r6, #1
 80003c6:	0029      	movs	r1, r5
 80003c8:	0064      	lsls	r4, r4, #1
 80003ca:	006d      	lsls	r5, r5, #1
 80003cc:	2900      	cmp	r1, #0
 80003ce:	db01      	blt.n	80003d4 <__aeabi_fdiv+0x1b4>
 80003d0:	4285      	cmp	r5, r0
 80003d2:	d301      	bcc.n	80003d8 <__aeabi_fdiv+0x1b8>
 80003d4:	1a2d      	subs	r5, r5, r0
 80003d6:	4334      	orrs	r4, r6
 80003d8:	3b01      	subs	r3, #1
 80003da:	2b00      	cmp	r3, #0
 80003dc:	d1f3      	bne.n	80003c6 <__aeabi_fdiv+0x1a6>
 80003de:	1e6b      	subs	r3, r5, #1
 80003e0:	419d      	sbcs	r5, r3
 80003e2:	432c      	orrs	r4, r5
 80003e4:	e7b3      	b.n	800034e <__aeabi_fdiv+0x12e>
 80003e6:	2301      	movs	r3, #1
 80003e8:	1a1b      	subs	r3, r3, r0
 80003ea:	2b1b      	cmp	r3, #27
 80003ec:	dd00      	ble.n	80003f0 <__aeabi_fdiv+0x1d0>
 80003ee:	e76d      	b.n	80002cc <__aeabi_fdiv+0xac>
 80003f0:	0021      	movs	r1, r4
 80003f2:	379e      	adds	r7, #158	@ 0x9e
 80003f4:	40d9      	lsrs	r1, r3
 80003f6:	40bc      	lsls	r4, r7
 80003f8:	000b      	movs	r3, r1
 80003fa:	1e61      	subs	r1, r4, #1
 80003fc:	418c      	sbcs	r4, r1
 80003fe:	4323      	orrs	r3, r4
 8000400:	0759      	lsls	r1, r3, #29
 8000402:	d004      	beq.n	800040e <__aeabi_fdiv+0x1ee>
 8000404:	210f      	movs	r1, #15
 8000406:	4019      	ands	r1, r3
 8000408:	2904      	cmp	r1, #4
 800040a:	d000      	beq.n	800040e <__aeabi_fdiv+0x1ee>
 800040c:	3304      	adds	r3, #4
 800040e:	0159      	lsls	r1, r3, #5
 8000410:	d413      	bmi.n	800043a <__aeabi_fdiv+0x21a>
 8000412:	019b      	lsls	r3, r3, #6
 8000414:	2000      	movs	r0, #0
 8000416:	0a5c      	lsrs	r4, r3, #9
 8000418:	e75a      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 800041a:	231a      	movs	r3, #26
 800041c:	2401      	movs	r4, #1
 800041e:	1a2d      	subs	r5, r5, r0
 8000420:	e7d0      	b.n	80003c4 <__aeabi_fdiv+0x1a4>
 8000422:	1e98      	subs	r0, r3, #2
 8000424:	4243      	negs	r3, r0
 8000426:	4158      	adcs	r0, r3
 8000428:	4240      	negs	r0, r0
 800042a:	0032      	movs	r2, r6
 800042c:	2400      	movs	r4, #0
 800042e:	b2c0      	uxtb	r0, r0
 8000430:	e74e      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 8000432:	4642      	mov	r2, r8
 8000434:	20ff      	movs	r0, #255	@ 0xff
 8000436:	2400      	movs	r4, #0
 8000438:	e74a      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 800043a:	2001      	movs	r0, #1
 800043c:	2400      	movs	r4, #0
 800043e:	e747      	b.n	80002d0 <__aeabi_fdiv+0xb0>
 8000440:	08002508 	.word	0x08002508
 8000444:	08002548 	.word	0x08002548
 8000448:	f7ffffff 	.word	0xf7ffffff

0800044c <__aeabi_fmul>:
 800044c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800044e:	464f      	mov	r7, r9
 8000450:	4646      	mov	r6, r8
 8000452:	46d6      	mov	lr, sl
 8000454:	0044      	lsls	r4, r0, #1
 8000456:	b5c0      	push	{r6, r7, lr}
 8000458:	0246      	lsls	r6, r0, #9
 800045a:	1c0f      	adds	r7, r1, #0
 800045c:	0a76      	lsrs	r6, r6, #9
 800045e:	0e24      	lsrs	r4, r4, #24
 8000460:	0fc5      	lsrs	r5, r0, #31
 8000462:	2c00      	cmp	r4, #0
 8000464:	d100      	bne.n	8000468 <__aeabi_fmul+0x1c>
 8000466:	e0da      	b.n	800061e <__aeabi_fmul+0x1d2>
 8000468:	2cff      	cmp	r4, #255	@ 0xff
 800046a:	d074      	beq.n	8000556 <__aeabi_fmul+0x10a>
 800046c:	2380      	movs	r3, #128	@ 0x80
 800046e:	00f6      	lsls	r6, r6, #3
 8000470:	04db      	lsls	r3, r3, #19
 8000472:	431e      	orrs	r6, r3
 8000474:	2300      	movs	r3, #0
 8000476:	4699      	mov	r9, r3
 8000478:	469a      	mov	sl, r3
 800047a:	3c7f      	subs	r4, #127	@ 0x7f
 800047c:	027b      	lsls	r3, r7, #9
 800047e:	0a5b      	lsrs	r3, r3, #9
 8000480:	4698      	mov	r8, r3
 8000482:	007b      	lsls	r3, r7, #1
 8000484:	0e1b      	lsrs	r3, r3, #24
 8000486:	0fff      	lsrs	r7, r7, #31
 8000488:	2b00      	cmp	r3, #0
 800048a:	d074      	beq.n	8000576 <__aeabi_fmul+0x12a>
 800048c:	2bff      	cmp	r3, #255	@ 0xff
 800048e:	d100      	bne.n	8000492 <__aeabi_fmul+0x46>
 8000490:	e08e      	b.n	80005b0 <__aeabi_fmul+0x164>
 8000492:	4642      	mov	r2, r8
 8000494:	2180      	movs	r1, #128	@ 0x80
 8000496:	00d2      	lsls	r2, r2, #3
 8000498:	04c9      	lsls	r1, r1, #19
 800049a:	4311      	orrs	r1, r2
 800049c:	3b7f      	subs	r3, #127	@ 0x7f
 800049e:	002a      	movs	r2, r5
 80004a0:	18e4      	adds	r4, r4, r3
 80004a2:	464b      	mov	r3, r9
 80004a4:	407a      	eors	r2, r7
 80004a6:	4688      	mov	r8, r1
 80004a8:	b2d2      	uxtb	r2, r2
 80004aa:	2b0a      	cmp	r3, #10
 80004ac:	dc75      	bgt.n	800059a <__aeabi_fmul+0x14e>
 80004ae:	464b      	mov	r3, r9
 80004b0:	2000      	movs	r0, #0
 80004b2:	2b02      	cmp	r3, #2
 80004b4:	dd0f      	ble.n	80004d6 <__aeabi_fmul+0x8a>
 80004b6:	4649      	mov	r1, r9
 80004b8:	2301      	movs	r3, #1
 80004ba:	408b      	lsls	r3, r1
 80004bc:	21a6      	movs	r1, #166	@ 0xa6
 80004be:	00c9      	lsls	r1, r1, #3
 80004c0:	420b      	tst	r3, r1
 80004c2:	d169      	bne.n	8000598 <__aeabi_fmul+0x14c>
 80004c4:	2190      	movs	r1, #144	@ 0x90
 80004c6:	0089      	lsls	r1, r1, #2
 80004c8:	420b      	tst	r3, r1
 80004ca:	d000      	beq.n	80004ce <__aeabi_fmul+0x82>
 80004cc:	e100      	b.n	80006d0 <__aeabi_fmul+0x284>
 80004ce:	2188      	movs	r1, #136	@ 0x88
 80004d0:	4219      	tst	r1, r3
 80004d2:	d000      	beq.n	80004d6 <__aeabi_fmul+0x8a>
 80004d4:	e0f5      	b.n	80006c2 <__aeabi_fmul+0x276>
 80004d6:	4641      	mov	r1, r8
 80004d8:	0409      	lsls	r1, r1, #16
 80004da:	0c09      	lsrs	r1, r1, #16
 80004dc:	4643      	mov	r3, r8
 80004de:	0008      	movs	r0, r1
 80004e0:	0c35      	lsrs	r5, r6, #16
 80004e2:	0436      	lsls	r6, r6, #16
 80004e4:	0c1b      	lsrs	r3, r3, #16
 80004e6:	0c36      	lsrs	r6, r6, #16
 80004e8:	4370      	muls	r0, r6
 80004ea:	4369      	muls	r1, r5
 80004ec:	435e      	muls	r6, r3
 80004ee:	435d      	muls	r5, r3
 80004f0:	1876      	adds	r6, r6, r1
 80004f2:	0c03      	lsrs	r3, r0, #16
 80004f4:	199b      	adds	r3, r3, r6
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d903      	bls.n	8000502 <__aeabi_fmul+0xb6>
 80004fa:	2180      	movs	r1, #128	@ 0x80
 80004fc:	0249      	lsls	r1, r1, #9
 80004fe:	468c      	mov	ip, r1
 8000500:	4465      	add	r5, ip
 8000502:	0400      	lsls	r0, r0, #16
 8000504:	0419      	lsls	r1, r3, #16
 8000506:	0c00      	lsrs	r0, r0, #16
 8000508:	1809      	adds	r1, r1, r0
 800050a:	018e      	lsls	r6, r1, #6
 800050c:	1e70      	subs	r0, r6, #1
 800050e:	4186      	sbcs	r6, r0
 8000510:	0c1b      	lsrs	r3, r3, #16
 8000512:	0e89      	lsrs	r1, r1, #26
 8000514:	195b      	adds	r3, r3, r5
 8000516:	430e      	orrs	r6, r1
 8000518:	019b      	lsls	r3, r3, #6
 800051a:	431e      	orrs	r6, r3
 800051c:	011b      	lsls	r3, r3, #4
 800051e:	d46c      	bmi.n	80005fa <__aeabi_fmul+0x1ae>
 8000520:	0023      	movs	r3, r4
 8000522:	337f      	adds	r3, #127	@ 0x7f
 8000524:	2b00      	cmp	r3, #0
 8000526:	dc00      	bgt.n	800052a <__aeabi_fmul+0xde>
 8000528:	e0b1      	b.n	800068e <__aeabi_fmul+0x242>
 800052a:	0015      	movs	r5, r2
 800052c:	0771      	lsls	r1, r6, #29
 800052e:	d00b      	beq.n	8000548 <__aeabi_fmul+0xfc>
 8000530:	200f      	movs	r0, #15
 8000532:	0021      	movs	r1, r4
 8000534:	4030      	ands	r0, r6
 8000536:	2804      	cmp	r0, #4
 8000538:	d006      	beq.n	8000548 <__aeabi_fmul+0xfc>
 800053a:	3604      	adds	r6, #4
 800053c:	0132      	lsls	r2, r6, #4
 800053e:	d503      	bpl.n	8000548 <__aeabi_fmul+0xfc>
 8000540:	4b6e      	ldr	r3, [pc, #440]	@ (80006fc <__aeabi_fmul+0x2b0>)
 8000542:	401e      	ands	r6, r3
 8000544:	000b      	movs	r3, r1
 8000546:	3380      	adds	r3, #128	@ 0x80
 8000548:	2bfe      	cmp	r3, #254	@ 0xfe
 800054a:	dd00      	ble.n	800054e <__aeabi_fmul+0x102>
 800054c:	e0bd      	b.n	80006ca <__aeabi_fmul+0x27e>
 800054e:	01b2      	lsls	r2, r6, #6
 8000550:	0a52      	lsrs	r2, r2, #9
 8000552:	b2db      	uxtb	r3, r3
 8000554:	e048      	b.n	80005e8 <__aeabi_fmul+0x19c>
 8000556:	2e00      	cmp	r6, #0
 8000558:	d000      	beq.n	800055c <__aeabi_fmul+0x110>
 800055a:	e092      	b.n	8000682 <__aeabi_fmul+0x236>
 800055c:	2308      	movs	r3, #8
 800055e:	4699      	mov	r9, r3
 8000560:	3b06      	subs	r3, #6
 8000562:	469a      	mov	sl, r3
 8000564:	027b      	lsls	r3, r7, #9
 8000566:	0a5b      	lsrs	r3, r3, #9
 8000568:	4698      	mov	r8, r3
 800056a:	007b      	lsls	r3, r7, #1
 800056c:	24ff      	movs	r4, #255	@ 0xff
 800056e:	0e1b      	lsrs	r3, r3, #24
 8000570:	0fff      	lsrs	r7, r7, #31
 8000572:	2b00      	cmp	r3, #0
 8000574:	d18a      	bne.n	800048c <__aeabi_fmul+0x40>
 8000576:	4642      	mov	r2, r8
 8000578:	2a00      	cmp	r2, #0
 800057a:	d164      	bne.n	8000646 <__aeabi_fmul+0x1fa>
 800057c:	4649      	mov	r1, r9
 800057e:	3201      	adds	r2, #1
 8000580:	4311      	orrs	r1, r2
 8000582:	4689      	mov	r9, r1
 8000584:	290a      	cmp	r1, #10
 8000586:	dc08      	bgt.n	800059a <__aeabi_fmul+0x14e>
 8000588:	407d      	eors	r5, r7
 800058a:	2001      	movs	r0, #1
 800058c:	b2ea      	uxtb	r2, r5
 800058e:	2902      	cmp	r1, #2
 8000590:	dc91      	bgt.n	80004b6 <__aeabi_fmul+0x6a>
 8000592:	0015      	movs	r5, r2
 8000594:	2200      	movs	r2, #0
 8000596:	e027      	b.n	80005e8 <__aeabi_fmul+0x19c>
 8000598:	0015      	movs	r5, r2
 800059a:	4653      	mov	r3, sl
 800059c:	2b02      	cmp	r3, #2
 800059e:	d100      	bne.n	80005a2 <__aeabi_fmul+0x156>
 80005a0:	e093      	b.n	80006ca <__aeabi_fmul+0x27e>
 80005a2:	2b03      	cmp	r3, #3
 80005a4:	d01a      	beq.n	80005dc <__aeabi_fmul+0x190>
 80005a6:	2b01      	cmp	r3, #1
 80005a8:	d12c      	bne.n	8000604 <__aeabi_fmul+0x1b8>
 80005aa:	2300      	movs	r3, #0
 80005ac:	2200      	movs	r2, #0
 80005ae:	e01b      	b.n	80005e8 <__aeabi_fmul+0x19c>
 80005b0:	4643      	mov	r3, r8
 80005b2:	34ff      	adds	r4, #255	@ 0xff
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d055      	beq.n	8000664 <__aeabi_fmul+0x218>
 80005b8:	2103      	movs	r1, #3
 80005ba:	464b      	mov	r3, r9
 80005bc:	430b      	orrs	r3, r1
 80005be:	0019      	movs	r1, r3
 80005c0:	2b0a      	cmp	r3, #10
 80005c2:	dc00      	bgt.n	80005c6 <__aeabi_fmul+0x17a>
 80005c4:	e092      	b.n	80006ec <__aeabi_fmul+0x2a0>
 80005c6:	2b0f      	cmp	r3, #15
 80005c8:	d000      	beq.n	80005cc <__aeabi_fmul+0x180>
 80005ca:	e08c      	b.n	80006e6 <__aeabi_fmul+0x29a>
 80005cc:	2280      	movs	r2, #128	@ 0x80
 80005ce:	03d2      	lsls	r2, r2, #15
 80005d0:	4216      	tst	r6, r2
 80005d2:	d003      	beq.n	80005dc <__aeabi_fmul+0x190>
 80005d4:	4643      	mov	r3, r8
 80005d6:	4213      	tst	r3, r2
 80005d8:	d100      	bne.n	80005dc <__aeabi_fmul+0x190>
 80005da:	e07d      	b.n	80006d8 <__aeabi_fmul+0x28c>
 80005dc:	2280      	movs	r2, #128	@ 0x80
 80005de:	03d2      	lsls	r2, r2, #15
 80005e0:	4332      	orrs	r2, r6
 80005e2:	0252      	lsls	r2, r2, #9
 80005e4:	0a52      	lsrs	r2, r2, #9
 80005e6:	23ff      	movs	r3, #255	@ 0xff
 80005e8:	05d8      	lsls	r0, r3, #23
 80005ea:	07ed      	lsls	r5, r5, #31
 80005ec:	4310      	orrs	r0, r2
 80005ee:	4328      	orrs	r0, r5
 80005f0:	bce0      	pop	{r5, r6, r7}
 80005f2:	46ba      	mov	sl, r7
 80005f4:	46b1      	mov	r9, r6
 80005f6:	46a8      	mov	r8, r5
 80005f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80005fa:	2301      	movs	r3, #1
 80005fc:	0015      	movs	r5, r2
 80005fe:	0871      	lsrs	r1, r6, #1
 8000600:	401e      	ands	r6, r3
 8000602:	430e      	orrs	r6, r1
 8000604:	0023      	movs	r3, r4
 8000606:	3380      	adds	r3, #128	@ 0x80
 8000608:	1c61      	adds	r1, r4, #1
 800060a:	2b00      	cmp	r3, #0
 800060c:	dd41      	ble.n	8000692 <__aeabi_fmul+0x246>
 800060e:	0772      	lsls	r2, r6, #29
 8000610:	d094      	beq.n	800053c <__aeabi_fmul+0xf0>
 8000612:	220f      	movs	r2, #15
 8000614:	4032      	ands	r2, r6
 8000616:	2a04      	cmp	r2, #4
 8000618:	d000      	beq.n	800061c <__aeabi_fmul+0x1d0>
 800061a:	e78e      	b.n	800053a <__aeabi_fmul+0xee>
 800061c:	e78e      	b.n	800053c <__aeabi_fmul+0xf0>
 800061e:	2e00      	cmp	r6, #0
 8000620:	d105      	bne.n	800062e <__aeabi_fmul+0x1e2>
 8000622:	2304      	movs	r3, #4
 8000624:	4699      	mov	r9, r3
 8000626:	3b03      	subs	r3, #3
 8000628:	2400      	movs	r4, #0
 800062a:	469a      	mov	sl, r3
 800062c:	e726      	b.n	800047c <__aeabi_fmul+0x30>
 800062e:	0030      	movs	r0, r6
 8000630:	f000 f8ac 	bl	800078c <__clzsi2>
 8000634:	2476      	movs	r4, #118	@ 0x76
 8000636:	1f43      	subs	r3, r0, #5
 8000638:	409e      	lsls	r6, r3
 800063a:	2300      	movs	r3, #0
 800063c:	4264      	negs	r4, r4
 800063e:	4699      	mov	r9, r3
 8000640:	469a      	mov	sl, r3
 8000642:	1a24      	subs	r4, r4, r0
 8000644:	e71a      	b.n	800047c <__aeabi_fmul+0x30>
 8000646:	4640      	mov	r0, r8
 8000648:	f000 f8a0 	bl	800078c <__clzsi2>
 800064c:	464b      	mov	r3, r9
 800064e:	1a24      	subs	r4, r4, r0
 8000650:	3c76      	subs	r4, #118	@ 0x76
 8000652:	2b0a      	cmp	r3, #10
 8000654:	dca1      	bgt.n	800059a <__aeabi_fmul+0x14e>
 8000656:	4643      	mov	r3, r8
 8000658:	3805      	subs	r0, #5
 800065a:	4083      	lsls	r3, r0
 800065c:	407d      	eors	r5, r7
 800065e:	4698      	mov	r8, r3
 8000660:	b2ea      	uxtb	r2, r5
 8000662:	e724      	b.n	80004ae <__aeabi_fmul+0x62>
 8000664:	464a      	mov	r2, r9
 8000666:	3302      	adds	r3, #2
 8000668:	4313      	orrs	r3, r2
 800066a:	002a      	movs	r2, r5
 800066c:	407a      	eors	r2, r7
 800066e:	b2d2      	uxtb	r2, r2
 8000670:	2b0a      	cmp	r3, #10
 8000672:	dc92      	bgt.n	800059a <__aeabi_fmul+0x14e>
 8000674:	4649      	mov	r1, r9
 8000676:	0015      	movs	r5, r2
 8000678:	2900      	cmp	r1, #0
 800067a:	d026      	beq.n	80006ca <__aeabi_fmul+0x27e>
 800067c:	4699      	mov	r9, r3
 800067e:	2002      	movs	r0, #2
 8000680:	e719      	b.n	80004b6 <__aeabi_fmul+0x6a>
 8000682:	230c      	movs	r3, #12
 8000684:	4699      	mov	r9, r3
 8000686:	3b09      	subs	r3, #9
 8000688:	24ff      	movs	r4, #255	@ 0xff
 800068a:	469a      	mov	sl, r3
 800068c:	e6f6      	b.n	800047c <__aeabi_fmul+0x30>
 800068e:	0015      	movs	r5, r2
 8000690:	0021      	movs	r1, r4
 8000692:	2201      	movs	r2, #1
 8000694:	1ad3      	subs	r3, r2, r3
 8000696:	2b1b      	cmp	r3, #27
 8000698:	dd00      	ble.n	800069c <__aeabi_fmul+0x250>
 800069a:	e786      	b.n	80005aa <__aeabi_fmul+0x15e>
 800069c:	319e      	adds	r1, #158	@ 0x9e
 800069e:	0032      	movs	r2, r6
 80006a0:	408e      	lsls	r6, r1
 80006a2:	40da      	lsrs	r2, r3
 80006a4:	1e73      	subs	r3, r6, #1
 80006a6:	419e      	sbcs	r6, r3
 80006a8:	4332      	orrs	r2, r6
 80006aa:	0753      	lsls	r3, r2, #29
 80006ac:	d004      	beq.n	80006b8 <__aeabi_fmul+0x26c>
 80006ae:	230f      	movs	r3, #15
 80006b0:	4013      	ands	r3, r2
 80006b2:	2b04      	cmp	r3, #4
 80006b4:	d000      	beq.n	80006b8 <__aeabi_fmul+0x26c>
 80006b6:	3204      	adds	r2, #4
 80006b8:	0153      	lsls	r3, r2, #5
 80006ba:	d510      	bpl.n	80006de <__aeabi_fmul+0x292>
 80006bc:	2301      	movs	r3, #1
 80006be:	2200      	movs	r2, #0
 80006c0:	e792      	b.n	80005e8 <__aeabi_fmul+0x19c>
 80006c2:	003d      	movs	r5, r7
 80006c4:	4646      	mov	r6, r8
 80006c6:	4682      	mov	sl, r0
 80006c8:	e767      	b.n	800059a <__aeabi_fmul+0x14e>
 80006ca:	23ff      	movs	r3, #255	@ 0xff
 80006cc:	2200      	movs	r2, #0
 80006ce:	e78b      	b.n	80005e8 <__aeabi_fmul+0x19c>
 80006d0:	2280      	movs	r2, #128	@ 0x80
 80006d2:	2500      	movs	r5, #0
 80006d4:	03d2      	lsls	r2, r2, #15
 80006d6:	e786      	b.n	80005e6 <__aeabi_fmul+0x19a>
 80006d8:	003d      	movs	r5, r7
 80006da:	431a      	orrs	r2, r3
 80006dc:	e783      	b.n	80005e6 <__aeabi_fmul+0x19a>
 80006de:	0192      	lsls	r2, r2, #6
 80006e0:	2300      	movs	r3, #0
 80006e2:	0a52      	lsrs	r2, r2, #9
 80006e4:	e780      	b.n	80005e8 <__aeabi_fmul+0x19c>
 80006e6:	003d      	movs	r5, r7
 80006e8:	4646      	mov	r6, r8
 80006ea:	e777      	b.n	80005dc <__aeabi_fmul+0x190>
 80006ec:	002a      	movs	r2, r5
 80006ee:	2301      	movs	r3, #1
 80006f0:	407a      	eors	r2, r7
 80006f2:	408b      	lsls	r3, r1
 80006f4:	2003      	movs	r0, #3
 80006f6:	b2d2      	uxtb	r2, r2
 80006f8:	e6e9      	b.n	80004ce <__aeabi_fmul+0x82>
 80006fa:	46c0      	nop			@ (mov r8, r8)
 80006fc:	f7ffffff 	.word	0xf7ffffff

08000700 <__aeabi_ui2f>:
 8000700:	b510      	push	{r4, lr}
 8000702:	1e04      	subs	r4, r0, #0
 8000704:	d00d      	beq.n	8000722 <__aeabi_ui2f+0x22>
 8000706:	f000 f841 	bl	800078c <__clzsi2>
 800070a:	239e      	movs	r3, #158	@ 0x9e
 800070c:	1a1b      	subs	r3, r3, r0
 800070e:	2b96      	cmp	r3, #150	@ 0x96
 8000710:	dc0c      	bgt.n	800072c <__aeabi_ui2f+0x2c>
 8000712:	2808      	cmp	r0, #8
 8000714:	d034      	beq.n	8000780 <__aeabi_ui2f+0x80>
 8000716:	3808      	subs	r0, #8
 8000718:	4084      	lsls	r4, r0
 800071a:	0264      	lsls	r4, r4, #9
 800071c:	0a64      	lsrs	r4, r4, #9
 800071e:	b2d8      	uxtb	r0, r3
 8000720:	e001      	b.n	8000726 <__aeabi_ui2f+0x26>
 8000722:	2000      	movs	r0, #0
 8000724:	2400      	movs	r4, #0
 8000726:	05c0      	lsls	r0, r0, #23
 8000728:	4320      	orrs	r0, r4
 800072a:	bd10      	pop	{r4, pc}
 800072c:	2b99      	cmp	r3, #153	@ 0x99
 800072e:	dc13      	bgt.n	8000758 <__aeabi_ui2f+0x58>
 8000730:	1f42      	subs	r2, r0, #5
 8000732:	4094      	lsls	r4, r2
 8000734:	4a14      	ldr	r2, [pc, #80]	@ (8000788 <__aeabi_ui2f+0x88>)
 8000736:	4022      	ands	r2, r4
 8000738:	0761      	lsls	r1, r4, #29
 800073a:	d01c      	beq.n	8000776 <__aeabi_ui2f+0x76>
 800073c:	210f      	movs	r1, #15
 800073e:	4021      	ands	r1, r4
 8000740:	2904      	cmp	r1, #4
 8000742:	d018      	beq.n	8000776 <__aeabi_ui2f+0x76>
 8000744:	3204      	adds	r2, #4
 8000746:	08d4      	lsrs	r4, r2, #3
 8000748:	0152      	lsls	r2, r2, #5
 800074a:	d515      	bpl.n	8000778 <__aeabi_ui2f+0x78>
 800074c:	239f      	movs	r3, #159	@ 0x9f
 800074e:	0264      	lsls	r4, r4, #9
 8000750:	1a18      	subs	r0, r3, r0
 8000752:	0a64      	lsrs	r4, r4, #9
 8000754:	b2c0      	uxtb	r0, r0
 8000756:	e7e6      	b.n	8000726 <__aeabi_ui2f+0x26>
 8000758:	0002      	movs	r2, r0
 800075a:	0021      	movs	r1, r4
 800075c:	321b      	adds	r2, #27
 800075e:	4091      	lsls	r1, r2
 8000760:	000a      	movs	r2, r1
 8000762:	1e51      	subs	r1, r2, #1
 8000764:	418a      	sbcs	r2, r1
 8000766:	2105      	movs	r1, #5
 8000768:	1a09      	subs	r1, r1, r0
 800076a:	40cc      	lsrs	r4, r1
 800076c:	4314      	orrs	r4, r2
 800076e:	4a06      	ldr	r2, [pc, #24]	@ (8000788 <__aeabi_ui2f+0x88>)
 8000770:	4022      	ands	r2, r4
 8000772:	0761      	lsls	r1, r4, #29
 8000774:	d1e2      	bne.n	800073c <__aeabi_ui2f+0x3c>
 8000776:	08d4      	lsrs	r4, r2, #3
 8000778:	0264      	lsls	r4, r4, #9
 800077a:	0a64      	lsrs	r4, r4, #9
 800077c:	b2d8      	uxtb	r0, r3
 800077e:	e7d2      	b.n	8000726 <__aeabi_ui2f+0x26>
 8000780:	0264      	lsls	r4, r4, #9
 8000782:	0a64      	lsrs	r4, r4, #9
 8000784:	308e      	adds	r0, #142	@ 0x8e
 8000786:	e7ce      	b.n	8000726 <__aeabi_ui2f+0x26>
 8000788:	fbffffff 	.word	0xfbffffff

0800078c <__clzsi2>:
 800078c:	211c      	movs	r1, #28
 800078e:	2301      	movs	r3, #1
 8000790:	041b      	lsls	r3, r3, #16
 8000792:	4298      	cmp	r0, r3
 8000794:	d301      	bcc.n	800079a <__clzsi2+0xe>
 8000796:	0c00      	lsrs	r0, r0, #16
 8000798:	3910      	subs	r1, #16
 800079a:	0a1b      	lsrs	r3, r3, #8
 800079c:	4298      	cmp	r0, r3
 800079e:	d301      	bcc.n	80007a4 <__clzsi2+0x18>
 80007a0:	0a00      	lsrs	r0, r0, #8
 80007a2:	3908      	subs	r1, #8
 80007a4:	091b      	lsrs	r3, r3, #4
 80007a6:	4298      	cmp	r0, r3
 80007a8:	d301      	bcc.n	80007ae <__clzsi2+0x22>
 80007aa:	0900      	lsrs	r0, r0, #4
 80007ac:	3904      	subs	r1, #4
 80007ae:	a202      	add	r2, pc, #8	@ (adr r2, 80007b8 <__clzsi2+0x2c>)
 80007b0:	5c10      	ldrb	r0, [r2, r0]
 80007b2:	1840      	adds	r0, r0, r1
 80007b4:	4770      	bx	lr
 80007b6:	46c0      	nop			@ (mov r8, r8)
 80007b8:	02020304 	.word	0x02020304
 80007bc:	01010101 	.word	0x01010101
	...

080007c8 <HAL_TIM_PeriodElapsedCallback>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim14;

/* USER CODE BEGIN PV */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b082      	sub	sp, #8
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM14) // Verifica se é o TIM2
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	4a08      	ldr	r2, [pc, #32]	@ (80007f8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80007d6:	4293      	cmp	r3, r2
 80007d8:	d10a      	bne.n	80007f0 <HAL_TIM_PeriodElapsedCallback+0x28>
    {
        // Chamar funções a cada 1ms
        processPulses();
 80007da:	f000 f9d5 	bl	8000b88 <processPulses>

        if (data_ready)
 80007de:	4b07      	ldr	r3, [pc, #28]	@ (80007fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	2b00      	cmp	r3, #0
 80007e4:	d004      	beq.n	80007f0 <HAL_TIM_PeriodElapsedCallback+0x28>
        {
        	analyze_pulses();
 80007e6:	f000 f96b 	bl	8000ac0 <analyze_pulses>
            data_ready = 0; // Reseta a flag após o uso
 80007ea:	4b04      	ldr	r3, [pc, #16]	@ (80007fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80007f0:	46c0      	nop			@ (mov r8, r8)
 80007f2:	46bd      	mov	sp, r7
 80007f4:	b002      	add	sp, #8
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	40002000 	.word	0x40002000
 80007fc:	20000260 	.word	0x20000260

08000800 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000804:	f000 fb86 	bl	8000f14 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000808:	f000 f818 	bl	800083c <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 800080c:	f000 f8e0 	bl	80009d0 <MX_GPIO_Init>
    MX_TIM3_Init();
 8000810:	f000 f862 	bl	80008d8 <MX_TIM3_Init>
    MX_TIM14_Init();
 8000814:	f000 f8b6 	bl	8000984 <MX_TIM14_Init>
    /* USER CODE BEGIN 2 */
    // HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
    HAL_TIM_Base_Start(&htim3);
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <main+0x34>)
 800081a:	0018      	movs	r0, r3
 800081c:	f001 fa22 	bl	8001c64 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start_IT(&htim14);
 8000820:	4b05      	ldr	r3, [pc, #20]	@ (8000838 <main+0x38>)
 8000822:	0018      	movs	r0, r3
 8000824:	f001 fa64 	bl	8001cf0 <HAL_TIM_Base_Start_IT>
    setTimerPulses(&htim3);
 8000828:	4b02      	ldr	r3, [pc, #8]	@ (8000834 <main+0x34>)
 800082a:	0018      	movs	r0, r3
 800082c:	f000 fa84 	bl	8000d38 <setTimerPulses>
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
 8000830:	46c0      	nop			@ (mov r8, r8)
 8000832:	e7fd      	b.n	8000830 <main+0x30>
 8000834:	20000028 	.word	0x20000028
 8000838:	20000074 	.word	0x20000074

0800083c <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 800083c:	b590      	push	{r4, r7, lr}
 800083e:	b08d      	sub	sp, #52	@ 0x34
 8000840:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000842:	2414      	movs	r4, #20
 8000844:	193b      	adds	r3, r7, r4
 8000846:	0018      	movs	r0, r3
 8000848:	231c      	movs	r3, #28
 800084a:	001a      	movs	r2, r3
 800084c:	2100      	movs	r1, #0
 800084e:	f001 fe23 	bl	8002498 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000852:	003b      	movs	r3, r7
 8000854:	0018      	movs	r0, r3
 8000856:	2314      	movs	r3, #20
 8000858:	001a      	movs	r2, r3
 800085a:	2100      	movs	r1, #0
 800085c:	f001 fe1c 	bl	8002498 <memset>

    __HAL_FLASH_SET_LATENCY(FLASH_LATENCY_1);
 8000860:	4b1c      	ldr	r3, [pc, #112]	@ (80008d4 <SystemClock_Config+0x98>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	2207      	movs	r2, #7
 8000866:	4393      	bics	r3, r2
 8000868:	001a      	movs	r2, r3
 800086a:	4b1a      	ldr	r3, [pc, #104]	@ (80008d4 <SystemClock_Config+0x98>)
 800086c:	2101      	movs	r1, #1
 800086e:	430a      	orrs	r2, r1
 8000870:	601a      	str	r2, [r3, #0]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000872:	193b      	adds	r3, r7, r4
 8000874:	2202      	movs	r2, #2
 8000876:	601a      	str	r2, [r3, #0]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000878:	193b      	adds	r3, r7, r4
 800087a:	2280      	movs	r2, #128	@ 0x80
 800087c:	0052      	lsls	r2, r2, #1
 800087e:	60da      	str	r2, [r3, #12]
    RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000880:	193b      	adds	r3, r7, r4
 8000882:	2200      	movs	r2, #0
 8000884:	611a      	str	r2, [r3, #16]
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000886:	193b      	adds	r3, r7, r4
 8000888:	2240      	movs	r2, #64	@ 0x40
 800088a:	615a      	str	r2, [r3, #20]
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800088c:	193b      	adds	r3, r7, r4
 800088e:	0018      	movs	r0, r3
 8000890:	f000 fe6a 	bl	8001568 <HAL_RCC_OscConfig>
 8000894:	1e03      	subs	r3, r0, #0
 8000896:	d001      	beq.n	800089c <SystemClock_Config+0x60>
    {
        Error_Handler();
 8000898:	f000 f90c 	bl	8000ab4 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1;
 800089c:	003b      	movs	r3, r7
 800089e:	2207      	movs	r2, #7
 80008a0:	601a      	str	r2, [r3, #0]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80008a2:	003b      	movs	r3, r7
 80008a4:	2200      	movs	r2, #0
 80008a6:	605a      	str	r2, [r3, #4]
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80008a8:	003b      	movs	r3, r7
 80008aa:	2200      	movs	r2, #0
 80008ac:	609a      	str	r2, [r3, #8]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80008ae:	003b      	movs	r3, r7
 80008b0:	2200      	movs	r2, #0
 80008b2:	60da      	str	r2, [r3, #12]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80008b4:	003b      	movs	r3, r7
 80008b6:	2200      	movs	r2, #0
 80008b8:	611a      	str	r2, [r3, #16]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80008ba:	003b      	movs	r3, r7
 80008bc:	2101      	movs	r1, #1
 80008be:	0018      	movs	r0, r3
 80008c0:	f001 f836 	bl	8001930 <HAL_RCC_ClockConfig>
 80008c4:	1e03      	subs	r3, r0, #0
 80008c6:	d001      	beq.n	80008cc <SystemClock_Config+0x90>
    {
        Error_Handler();
 80008c8:	f000 f8f4 	bl	8000ab4 <Error_Handler>
    }
}
 80008cc:	46c0      	nop			@ (mov r8, r8)
 80008ce:	46bd      	mov	sp, r7
 80008d0:	b00d      	add	sp, #52	@ 0x34
 80008d2:	bd90      	pop	{r4, r7, pc}
 80008d4:	40022000 	.word	0x40022000

080008d8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b088      	sub	sp, #32
 80008dc:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008de:	2310      	movs	r3, #16
 80008e0:	18fb      	adds	r3, r7, r3
 80008e2:	0018      	movs	r0, r3
 80008e4:	2310      	movs	r3, #16
 80008e6:	001a      	movs	r2, r3
 80008e8:	2100      	movs	r1, #0
 80008ea:	f001 fdd5 	bl	8002498 <memset>
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008ee:	1d3b      	adds	r3, r7, #4
 80008f0:	0018      	movs	r0, r3
 80008f2:	230c      	movs	r3, #12
 80008f4:	001a      	movs	r2, r3
 80008f6:	2100      	movs	r1, #0
 80008f8:	f001 fdce 	bl	8002498 <memset>

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 80008fc:	4b1e      	ldr	r3, [pc, #120]	@ (8000978 <MX_TIM3_Init+0xa0>)
 80008fe:	4a1f      	ldr	r2, [pc, #124]	@ (800097c <MX_TIM3_Init+0xa4>)
 8000900:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 47;
 8000902:	4b1d      	ldr	r3, [pc, #116]	@ (8000978 <MX_TIM3_Init+0xa0>)
 8000904:	222f      	movs	r2, #47	@ 0x2f
 8000906:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000908:	4b1b      	ldr	r3, [pc, #108]	@ (8000978 <MX_TIM3_Init+0xa0>)
 800090a:	2200      	movs	r2, #0
 800090c:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 65535;
 800090e:	4b1a      	ldr	r3, [pc, #104]	@ (8000978 <MX_TIM3_Init+0xa0>)
 8000910:	4a1b      	ldr	r2, [pc, #108]	@ (8000980 <MX_TIM3_Init+0xa8>)
 8000912:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000914:	4b18      	ldr	r3, [pc, #96]	@ (8000978 <MX_TIM3_Init+0xa0>)
 8000916:	2200      	movs	r2, #0
 8000918:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800091a:	4b17      	ldr	r3, [pc, #92]	@ (8000978 <MX_TIM3_Init+0xa0>)
 800091c:	2200      	movs	r2, #0
 800091e:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000920:	4b15      	ldr	r3, [pc, #84]	@ (8000978 <MX_TIM3_Init+0xa0>)
 8000922:	0018      	movs	r0, r3
 8000924:	f001 f946 	bl	8001bb4 <HAL_TIM_Base_Init>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d001      	beq.n	8000930 <MX_TIM3_Init+0x58>
    {
        Error_Handler();
 800092c:	f000 f8c2 	bl	8000ab4 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000930:	2110      	movs	r1, #16
 8000932:	187b      	adds	r3, r7, r1
 8000934:	2280      	movs	r2, #128	@ 0x80
 8000936:	0152      	lsls	r2, r2, #5
 8000938:	601a      	str	r2, [r3, #0]
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800093a:	187a      	adds	r2, r7, r1
 800093c:	4b0e      	ldr	r3, [pc, #56]	@ (8000978 <MX_TIM3_Init+0xa0>)
 800093e:	0011      	movs	r1, r2
 8000940:	0018      	movs	r0, r3
 8000942:	f001 fb2b 	bl	8001f9c <HAL_TIM_ConfigClockSource>
 8000946:	1e03      	subs	r3, r0, #0
 8000948:	d001      	beq.n	800094e <MX_TIM3_Init+0x76>
    {
        Error_Handler();
 800094a:	f000 f8b3 	bl	8000ab4 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800094e:	1d3b      	adds	r3, r7, #4
 8000950:	2200      	movs	r2, #0
 8000952:	601a      	str	r2, [r3, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000954:	1d3b      	adds	r3, r7, #4
 8000956:	2200      	movs	r2, #0
 8000958:	609a      	str	r2, [r3, #8]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800095a:	1d3a      	adds	r2, r7, #4
 800095c:	4b06      	ldr	r3, [pc, #24]	@ (8000978 <MX_TIM3_Init+0xa0>)
 800095e:	0011      	movs	r1, r2
 8000960:	0018      	movs	r0, r3
 8000962:	f001 fd1f 	bl	80023a4 <HAL_TIMEx_MasterConfigSynchronization>
 8000966:	1e03      	subs	r3, r0, #0
 8000968:	d001      	beq.n	800096e <MX_TIM3_Init+0x96>
    {
        Error_Handler();
 800096a:	f000 f8a3 	bl	8000ab4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
}
 800096e:	46c0      	nop			@ (mov r8, r8)
 8000970:	46bd      	mov	sp, r7
 8000972:	b008      	add	sp, #32
 8000974:	bd80      	pop	{r7, pc}
 8000976:	46c0      	nop			@ (mov r8, r8)
 8000978:	20000028 	.word	0x20000028
 800097c:	40000400 	.word	0x40000400
 8000980:	0000ffff 	.word	0x0000ffff

08000984 <MX_TIM14_Init>:
 * @brief TIM14 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM14_Init(void)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	af00      	add	r7, sp, #0
    /* USER CODE END TIM14_Init 0 */

    /* USER CODE BEGIN TIM14_Init 1 */

    /* USER CODE END TIM14_Init 1 */
    htim14.Instance = TIM14;
 8000988:	4b0e      	ldr	r3, [pc, #56]	@ (80009c4 <MX_TIM14_Init+0x40>)
 800098a:	4a0f      	ldr	r2, [pc, #60]	@ (80009c8 <MX_TIM14_Init+0x44>)
 800098c:	601a      	str	r2, [r3, #0]
    htim14.Init.Prescaler = 47;
 800098e:	4b0d      	ldr	r3, [pc, #52]	@ (80009c4 <MX_TIM14_Init+0x40>)
 8000990:	222f      	movs	r2, #47	@ 0x2f
 8000992:	605a      	str	r2, [r3, #4]
    htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000994:	4b0b      	ldr	r3, [pc, #44]	@ (80009c4 <MX_TIM14_Init+0x40>)
 8000996:	2200      	movs	r2, #0
 8000998:	609a      	str	r2, [r3, #8]
    htim14.Init.Period = 999;
 800099a:	4b0a      	ldr	r3, [pc, #40]	@ (80009c4 <MX_TIM14_Init+0x40>)
 800099c:	4a0b      	ldr	r2, [pc, #44]	@ (80009cc <MX_TIM14_Init+0x48>)
 800099e:	60da      	str	r2, [r3, #12]
    htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009a0:	4b08      	ldr	r3, [pc, #32]	@ (80009c4 <MX_TIM14_Init+0x40>)
 80009a2:	2200      	movs	r2, #0
 80009a4:	611a      	str	r2, [r3, #16]
    htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a6:	4b07      	ldr	r3, [pc, #28]	@ (80009c4 <MX_TIM14_Init+0x40>)
 80009a8:	2200      	movs	r2, #0
 80009aa:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 80009ac:	4b05      	ldr	r3, [pc, #20]	@ (80009c4 <MX_TIM14_Init+0x40>)
 80009ae:	0018      	movs	r0, r3
 80009b0:	f001 f900 	bl	8001bb4 <HAL_TIM_Base_Init>
 80009b4:	1e03      	subs	r3, r0, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM14_Init+0x38>
    {
        Error_Handler();
 80009b8:	f000 f87c 	bl	8000ab4 <Error_Handler>
    }
    /* USER CODE BEGIN TIM14_Init 2 */

    /* USER CODE END TIM14_Init 2 */
}
 80009bc:	46c0      	nop			@ (mov r8, r8)
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	46c0      	nop			@ (mov r8, r8)
 80009c4:	20000074 	.word	0x20000074
 80009c8:	40002000 	.word	0x40002000
 80009cc:	000003e7 	.word	0x000003e7

080009d0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80009d0:	b590      	push	{r4, r7, lr}
 80009d2:	b089      	sub	sp, #36	@ 0x24
 80009d4:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009d6:	240c      	movs	r4, #12
 80009d8:	193b      	adds	r3, r7, r4
 80009da:	0018      	movs	r0, r3
 80009dc:	2314      	movs	r3, #20
 80009de:	001a      	movs	r2, r3
 80009e0:	2100      	movs	r1, #0
 80009e2:	f001 fd59 	bl	8002498 <memset>
    /* USER CODE BEGIN MX_GPIO_Init_1 */

    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80009e6:	4b2e      	ldr	r3, [pc, #184]	@ (8000aa0 <MX_GPIO_Init+0xd0>)
 80009e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80009ea:	4b2d      	ldr	r3, [pc, #180]	@ (8000aa0 <MX_GPIO_Init+0xd0>)
 80009ec:	2104      	movs	r1, #4
 80009ee:	430a      	orrs	r2, r1
 80009f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80009f2:	4b2b      	ldr	r3, [pc, #172]	@ (8000aa0 <MX_GPIO_Init+0xd0>)
 80009f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80009f6:	2204      	movs	r2, #4
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
 80009fc:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009fe:	4b28      	ldr	r3, [pc, #160]	@ (8000aa0 <MX_GPIO_Init+0xd0>)
 8000a00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8000a02:	4b27      	ldr	r3, [pc, #156]	@ (8000aa0 <MX_GPIO_Init+0xd0>)
 8000a04:	2101      	movs	r1, #1
 8000a06:	430a      	orrs	r2, r1
 8000a08:	635a      	str	r2, [r3, #52]	@ 0x34
 8000a0a:	4b25      	ldr	r3, [pc, #148]	@ (8000aa0 <MX_GPIO_Init+0xd0>)
 8000a0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000a0e:	2201      	movs	r2, #1
 8000a10:	4013      	ands	r3, r2
 8000a12:	607b      	str	r3, [r7, #4]
 8000a14:	687b      	ldr	r3, [r7, #4]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_9, GPIO_PIN_RESET);
 8000a16:	2380      	movs	r3, #128	@ 0x80
 8000a18:	0099      	lsls	r1, r3, #2
 8000a1a:	23a0      	movs	r3, #160	@ 0xa0
 8000a1c:	05db      	lsls	r3, r3, #23
 8000a1e:	2200      	movs	r2, #0
 8000a20:	0018      	movs	r0, r3
 8000a22:	f000 fd59 	bl	80014d8 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : PIR_Pin */
    GPIO_InitStruct.Pin = PIR_Pin;
 8000a26:	193b      	adds	r3, r7, r4
 8000a28:	2280      	movs	r2, #128	@ 0x80
 8000a2a:	01d2      	lsls	r2, r2, #7
 8000a2c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	4a1c      	ldr	r2, [pc, #112]	@ (8000aa4 <MX_GPIO_Init+0xd4>)
 8000a32:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	193b      	adds	r3, r7, r4
 8000a36:	2200      	movs	r2, #0
 8000a38:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(PIR_GPIO_Port, &GPIO_InitStruct);
 8000a3a:	193b      	adds	r3, r7, r4
 8000a3c:	4a1a      	ldr	r2, [pc, #104]	@ (8000aa8 <MX_GPIO_Init+0xd8>)
 8000a3e:	0019      	movs	r1, r3
 8000a40:	0010      	movs	r0, r2
 8000a42:	f000 fbdf 	bl	8001204 <HAL_GPIO_Init>

    /*Configure GPIO pin : PA9 */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a46:	0021      	movs	r1, r4
 8000a48:	187b      	adds	r3, r7, r1
 8000a4a:	2280      	movs	r2, #128	@ 0x80
 8000a4c:	0092      	lsls	r2, r2, #2
 8000a4e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a50:	187b      	adds	r3, r7, r1
 8000a52:	2201      	movs	r2, #1
 8000a54:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a56:	187b      	adds	r3, r7, r1
 8000a58:	2200      	movs	r2, #0
 8000a5a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a5c:	187b      	adds	r3, r7, r1
 8000a5e:	2200      	movs	r2, #0
 8000a60:	60da      	str	r2, [r3, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a62:	187a      	adds	r2, r7, r1
 8000a64:	23a0      	movs	r3, #160	@ 0xa0
 8000a66:	05db      	lsls	r3, r3, #23
 8000a68:	0011      	movs	r1, r2
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f000 fbca 	bl	8001204 <HAL_GPIO_Init>

    /**/
    __HAL_SYSCFG_FASTMODEPLUS_ENABLE(SYSCFG_FASTMODEPLUS_PA9);
 8000a70:	4b0e      	ldr	r3, [pc, #56]	@ (8000aac <MX_GPIO_Init+0xdc>)
 8000a72:	681a      	ldr	r2, [r3, #0]
 8000a74:	4b0d      	ldr	r3, [pc, #52]	@ (8000aac <MX_GPIO_Init+0xdc>)
 8000a76:	2180      	movs	r1, #128	@ 0x80
 8000a78:	03c9      	lsls	r1, r1, #15
 8000a7a:	430a      	orrs	r2, r1
 8000a7c:	601a      	str	r2, [r3, #0]

    /**/
    HAL_SYSCFG_SetPinBinding(HAL_BIND_SO8_PIN5_PA11);
 8000a7e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ab0 <MX_GPIO_Init+0xe0>)
 8000a80:	0018      	movs	r0, r3
 8000a82:	f000 fad5 	bl	8001030 <HAL_SYSCFG_SetPinBinding>

    /* EXTI interrupt init*/
    HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2100      	movs	r1, #0
 8000a8a:	2007      	movs	r0, #7
 8000a8c:	f000 fb88 	bl	80011a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a90:	2007      	movs	r0, #7
 8000a92:	f000 fb9a 	bl	80011ca <HAL_NVIC_EnableIRQ>

    /* USER CODE BEGIN MX_GPIO_Init_2 */

    /* USER CODE END MX_GPIO_Init_2 */
}
 8000a96:	46c0      	nop			@ (mov r8, r8)
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	b009      	add	sp, #36	@ 0x24
 8000a9c:	bd90      	pop	{r4, r7, pc}
 8000a9e:	46c0      	nop			@ (mov r8, r8)
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	10310000 	.word	0x10310000
 8000aa8:	50000800 	.word	0x50000800
 8000aac:	40010000 	.word	0x40010000
 8000ab0:	00300010 	.word	0x00300010

08000ab4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab8:	b672      	cpsid	i
}
 8000aba:	46c0      	nop			@ (mov r8, r8)
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8000abc:	46c0      	nop			@ (mov r8, r8)
 8000abe:	e7fd      	b.n	8000abc <Error_Handler+0x8>

08000ac0 <analyze_pulses>:
#include "pulse_capture.h"

static float duty_cycles[DUTY_CYCLE_SIZE];

void analyze_pulses(void)
{
 8000ac0:	b590      	push	{r4, r7, lr}
 8000ac2:	b087      	sub	sp, #28
 8000ac4:	af00      	add	r7, sp, #0
    const volatile uint32_t *pulse_widths = get_width_pulses();
 8000ac6:	f000 f92f 	bl	8000d28 <get_width_pulses>
 8000aca:	0003      	movs	r3, r0
 8000acc:	613b      	str	r3, [r7, #16]
    uint32_t highTime, lowTime, totalTime;

    for (uint8_t i = 0, j = 0; i < PULSE_BUFFER_SIZE - 1; i += 2, j++)
 8000ace:	2317      	movs	r3, #23
 8000ad0:	18fb      	adds	r3, r7, r3
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	701a      	strb	r2, [r3, #0]
 8000ad6:	2316      	movs	r3, #22
 8000ad8:	18fb      	adds	r3, r7, r3
 8000ada:	2200      	movs	r2, #0
 8000adc:	701a      	strb	r2, [r3, #0]
 8000ade:	e044      	b.n	8000b6a <analyze_pulses+0xaa>
    {
        highTime = pulse_widths[i];
 8000ae0:	2117      	movs	r1, #23
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	781b      	ldrb	r3, [r3, #0]
 8000ae6:	009b      	lsls	r3, r3, #2
 8000ae8:	693a      	ldr	r2, [r7, #16]
 8000aea:	18d3      	adds	r3, r2, r3
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	60fb      	str	r3, [r7, #12]
        lowTime = pulse_widths[i + 1];
 8000af0:	187b      	adds	r3, r7, r1
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	3301      	adds	r3, #1
 8000af6:	009b      	lsls	r3, r3, #2
 8000af8:	693a      	ldr	r2, [r7, #16]
 8000afa:	18d3      	adds	r3, r2, r3
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	60bb      	str	r3, [r7, #8]
        totalTime = highTime + lowTime;
 8000b00:	68fa      	ldr	r2, [r7, #12]
 8000b02:	68bb      	ldr	r3, [r7, #8]
 8000b04:	18d3      	adds	r3, r2, r3
 8000b06:	607b      	str	r3, [r7, #4]
        
        if (totalTime > 0)
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d01a      	beq.n	8000b44 <analyze_pulses+0x84>
        {
            duty_cycles[j] = ((float)highTime / totalTime) * 100.0f;
 8000b0e:	68f8      	ldr	r0, [r7, #12]
 8000b10:	f7ff fdf6 	bl	8000700 <__aeabi_ui2f>
 8000b14:	1c04      	adds	r4, r0, #0
 8000b16:	6878      	ldr	r0, [r7, #4]
 8000b18:	f7ff fdf2 	bl	8000700 <__aeabi_ui2f>
 8000b1c:	1c03      	adds	r3, r0, #0
 8000b1e:	1c19      	adds	r1, r3, #0
 8000b20:	1c20      	adds	r0, r4, #0
 8000b22:	f7ff fb7d 	bl	8000220 <__aeabi_fdiv>
 8000b26:	1c03      	adds	r3, r0, #0
 8000b28:	1c1a      	adds	r2, r3, #0
 8000b2a:	2316      	movs	r3, #22
 8000b2c:	18fb      	adds	r3, r7, r3
 8000b2e:	781c      	ldrb	r4, [r3, #0]
 8000b30:	4913      	ldr	r1, [pc, #76]	@ (8000b80 <analyze_pulses+0xc0>)
 8000b32:	1c10      	adds	r0, r2, #0
 8000b34:	f7ff fc8a 	bl	800044c <__aeabi_fmul>
 8000b38:	1c03      	adds	r3, r0, #0
 8000b3a:	1c19      	adds	r1, r3, #0
 8000b3c:	4b11      	ldr	r3, [pc, #68]	@ (8000b84 <analyze_pulses+0xc4>)
 8000b3e:	00a2      	lsls	r2, r4, #2
 8000b40:	50d1      	str	r1, [r2, r3]
 8000b42:	e006      	b.n	8000b52 <analyze_pulses+0x92>
        }
        else
        {
            duty_cycles[j] = 0.0f; // Evita divisão por zero
 8000b44:	2316      	movs	r3, #22
 8000b46:	18fb      	adds	r3, r7, r3
 8000b48:	781a      	ldrb	r2, [r3, #0]
 8000b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b84 <analyze_pulses+0xc4>)
 8000b4c:	0092      	lsls	r2, r2, #2
 8000b4e:	2100      	movs	r1, #0
 8000b50:	50d1      	str	r1, [r2, r3]
    for (uint8_t i = 0, j = 0; i < PULSE_BUFFER_SIZE - 1; i += 2, j++)
 8000b52:	2217      	movs	r2, #23
 8000b54:	18bb      	adds	r3, r7, r2
 8000b56:	18ba      	adds	r2, r7, r2
 8000b58:	7812      	ldrb	r2, [r2, #0]
 8000b5a:	3202      	adds	r2, #2
 8000b5c:	701a      	strb	r2, [r3, #0]
 8000b5e:	2116      	movs	r1, #22
 8000b60:	187b      	adds	r3, r7, r1
 8000b62:	781a      	ldrb	r2, [r3, #0]
 8000b64:	187b      	adds	r3, r7, r1
 8000b66:	3201      	adds	r2, #1
 8000b68:	701a      	strb	r2, [r3, #0]
 8000b6a:	2317      	movs	r3, #23
 8000b6c:	18fb      	adds	r3, r7, r3
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	2b28      	cmp	r3, #40	@ 0x28
 8000b72:	d9b5      	bls.n	8000ae0 <analyze_pulses+0x20>
        }
    }
}
 8000b74:	46c0      	nop			@ (mov r8, r8)
 8000b76:	46c0      	nop			@ (mov r8, r8)
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	b007      	add	sp, #28
 8000b7c:	bd90      	pop	{r4, r7, pc}
 8000b7e:	46c0      	nop			@ (mov r8, r8)
 8000b80:	42c80000 	.word	0x42c80000
 8000b84:	200000c0 	.word	0x200000c0

08000b88 <processPulses>:
static uint16_t pulse_index = 0;
static TIM_HandleTypeDef *htim = NULL;
static uint32_t idleTimer = 0;

void processPulses()
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0
    if (data_ready)
 8000b8e:	4b3a      	ldr	r3, [pc, #232]	@ (8000c78 <processPulses+0xf0>)
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b00      	cmp	r3, #0
 8000b94:	d16c      	bne.n	8000c70 <processPulses+0xe8>
        return;

    if (++idleTimer > 9) // se passar de 5ms, ele reseta o timer e volta para o indice 0 do vetor
 8000b96:	4b39      	ldr	r3, [pc, #228]	@ (8000c7c <processPulses+0xf4>)
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	1c5a      	adds	r2, r3, #1
 8000b9c:	4b37      	ldr	r3, [pc, #220]	@ (8000c7c <processPulses+0xf4>)
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	4b36      	ldr	r3, [pc, #216]	@ (8000c7c <processPulses+0xf4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	2b09      	cmp	r3, #9
 8000ba6:	d964      	bls.n	8000c72 <processPulses+0xea>
    {
        if (pulse_index > 1) // Garante que há pelo menos 2 pulsos para calcular tempos
 8000ba8:	4b35      	ldr	r3, [pc, #212]	@ (8000c80 <processPulses+0xf8>)
 8000baa:	881b      	ldrh	r3, [r3, #0]
 8000bac:	2b01      	cmp	r3, #1
 8000bae:	d945      	bls.n	8000c3c <processPulses+0xb4>
        {
            for (uint8_t i = 0, j = 0; i < PULSE_BUFFER_SIZE - 1; i++, j++)
 8000bb0:	1dfb      	adds	r3, r7, #7
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
 8000bb6:	1dbb      	adds	r3, r7, #6
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]
 8000bbc:	e037      	b.n	8000c2e <processPulses+0xa6>
            {
                pulse_width[j] = (pulse_buffer[i + 1] >= pulse_buffer[i]) ? (pulse_buffer[i + 1] - pulse_buffer[i]) : ((0xFFFF - pulse_buffer[i]) + pulse_buffer[i + 1]);
 8000bbe:	1dfb      	adds	r3, r7, #7
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	1c5a      	adds	r2, r3, #1
 8000bc4:	4b2f      	ldr	r3, [pc, #188]	@ (8000c84 <processPulses+0xfc>)
 8000bc6:	0092      	lsls	r2, r2, #2
 8000bc8:	58d2      	ldr	r2, [r2, r3]
 8000bca:	1dfb      	adds	r3, r7, #7
 8000bcc:	7819      	ldrb	r1, [r3, #0]
 8000bce:	4b2d      	ldr	r3, [pc, #180]	@ (8000c84 <processPulses+0xfc>)
 8000bd0:	0089      	lsls	r1, r1, #2
 8000bd2:	58cb      	ldr	r3, [r1, r3]
 8000bd4:	429a      	cmp	r2, r3
 8000bd6:	d30c      	bcc.n	8000bf2 <processPulses+0x6a>
 8000bd8:	1dfb      	adds	r3, r7, #7
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	1c5a      	adds	r2, r3, #1
 8000bde:	4b29      	ldr	r3, [pc, #164]	@ (8000c84 <processPulses+0xfc>)
 8000be0:	0092      	lsls	r2, r2, #2
 8000be2:	58d2      	ldr	r2, [r2, r3]
 8000be4:	1dfb      	adds	r3, r7, #7
 8000be6:	7819      	ldrb	r1, [r3, #0]
 8000be8:	4b26      	ldr	r3, [pc, #152]	@ (8000c84 <processPulses+0xfc>)
 8000bea:	0089      	lsls	r1, r1, #2
 8000bec:	58cb      	ldr	r3, [r1, r3]
 8000bee:	1ad3      	subs	r3, r2, r3
 8000bf0:	e00e      	b.n	8000c10 <processPulses+0x88>
 8000bf2:	1dfb      	adds	r3, r7, #7
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	1c5a      	adds	r2, r3, #1
 8000bf8:	4b22      	ldr	r3, [pc, #136]	@ (8000c84 <processPulses+0xfc>)
 8000bfa:	0092      	lsls	r2, r2, #2
 8000bfc:	58d2      	ldr	r2, [r2, r3]
 8000bfe:	1dfb      	adds	r3, r7, #7
 8000c00:	7819      	ldrb	r1, [r3, #0]
 8000c02:	4b20      	ldr	r3, [pc, #128]	@ (8000c84 <processPulses+0xfc>)
 8000c04:	0089      	lsls	r1, r1, #2
 8000c06:	58cb      	ldr	r3, [r1, r3]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	4a1f      	ldr	r2, [pc, #124]	@ (8000c88 <processPulses+0x100>)
 8000c0c:	4694      	mov	ip, r2
 8000c0e:	4463      	add	r3, ip
 8000c10:	1dba      	adds	r2, r7, #6
 8000c12:	7811      	ldrb	r1, [r2, #0]
 8000c14:	4a1d      	ldr	r2, [pc, #116]	@ (8000c8c <processPulses+0x104>)
 8000c16:	0089      	lsls	r1, r1, #2
 8000c18:	508b      	str	r3, [r1, r2]
            for (uint8_t i = 0, j = 0; i < PULSE_BUFFER_SIZE - 1; i++, j++)
 8000c1a:	1dfb      	adds	r3, r7, #7
 8000c1c:	781a      	ldrb	r2, [r3, #0]
 8000c1e:	1dfb      	adds	r3, r7, #7
 8000c20:	3201      	adds	r2, #1
 8000c22:	701a      	strb	r2, [r3, #0]
 8000c24:	1dbb      	adds	r3, r7, #6
 8000c26:	781a      	ldrb	r2, [r3, #0]
 8000c28:	1dbb      	adds	r3, r7, #6
 8000c2a:	3201      	adds	r2, #1
 8000c2c:	701a      	strb	r2, [r3, #0]
 8000c2e:	1dfb      	adds	r3, r7, #7
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	2b28      	cmp	r3, #40	@ 0x28
 8000c34:	d9c3      	bls.n	8000bbe <processPulses+0x36>
            }
            data_ready = 1; // Reseta a flag para a próxima captura
 8000c36:	4b10      	ldr	r3, [pc, #64]	@ (8000c78 <processPulses+0xf0>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
        }

        //RESET_TIMER(htim);
        pulse_index = 0; // Reinicia o índice para a próxima captura
 8000c3c:	4b10      	ldr	r3, [pc, #64]	@ (8000c80 <processPulses+0xf8>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	801a      	strh	r2, [r3, #0]
        // data_ready = 1;
        idleTimer = 0;
 8000c42:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <processPulses+0xf4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	601a      	str	r2, [r3, #0]

        for (uint8_t i = 0; i < PULSE_BUFFER_SIZE; i++)
 8000c48:	1d7b      	adds	r3, r7, #5
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
 8000c4e:	e00a      	b.n	8000c66 <processPulses+0xde>
        {
            pulse_buffer[i] = 0;
 8000c50:	1d7b      	adds	r3, r7, #5
 8000c52:	781a      	ldrb	r2, [r3, #0]
 8000c54:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <processPulses+0xfc>)
 8000c56:	0092      	lsls	r2, r2, #2
 8000c58:	2100      	movs	r1, #0
 8000c5a:	50d1      	str	r1, [r2, r3]
        for (uint8_t i = 0; i < PULSE_BUFFER_SIZE; i++)
 8000c5c:	1d7b      	adds	r3, r7, #5
 8000c5e:	781a      	ldrb	r2, [r3, #0]
 8000c60:	1d7b      	adds	r3, r7, #5
 8000c62:	3201      	adds	r2, #1
 8000c64:	701a      	strb	r2, [r3, #0]
 8000c66:	1d7b      	adds	r3, r7, #5
 8000c68:	781b      	ldrb	r3, [r3, #0]
 8000c6a:	2b29      	cmp	r3, #41	@ 0x29
 8000c6c:	d9f0      	bls.n	8000c50 <processPulses+0xc8>
 8000c6e:	e000      	b.n	8000c72 <processPulses+0xea>
        return;
 8000c70:	46c0      	nop			@ (mov r8, r8)
        }
    }
}
 8000c72:	46bd      	mov	sp, r7
 8000c74:	b002      	add	sp, #8
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	20000260 	.word	0x20000260
 8000c7c:	20000268 	.word	0x20000268
 8000c80:	20000262 	.word	0x20000262
 8000c84:	20000114 	.word	0x20000114
 8000c88:	0000ffff 	.word	0x0000ffff
 8000c8c:	200001bc 	.word	0x200001bc

08000c90 <get_Sample>:

void get_Sample(void)
{
 8000c90:	b580      	push	{r7, lr}
 8000c92:	af00      	add	r7, sp, #0

    if (data_ready) return; // Se os dados já estão prontos, ignora novas capturas
 8000c94:	4b0d      	ldr	r3, [pc, #52]	@ (8000ccc <get_Sample+0x3c>)
 8000c96:	781b      	ldrb	r3, [r3, #0]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	d114      	bne.n	8000cc6 <get_Sample+0x36>

    if (pulse_index < PULSE_BUFFER_SIZE)
 8000c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cd0 <get_Sample+0x40>)
 8000c9e:	881b      	ldrh	r3, [r3, #0]
 8000ca0:	2b29      	cmp	r3, #41	@ 0x29
 8000ca2:	d811      	bhi.n	8000cc8 <get_Sample+0x38>
    {
        pulse_buffer[pulse_index++] = __HAL_TIM_GET_COUNTER(htim);
 8000ca4:	4b0b      	ldr	r3, [pc, #44]	@ (8000cd4 <get_Sample+0x44>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a09      	ldr	r2, [pc, #36]	@ (8000cd0 <get_Sample+0x40>)
 8000cac:	8812      	ldrh	r2, [r2, #0]
 8000cae:	1c51      	adds	r1, r2, #1
 8000cb0:	b288      	uxth	r0, r1
 8000cb2:	4907      	ldr	r1, [pc, #28]	@ (8000cd0 <get_Sample+0x40>)
 8000cb4:	8008      	strh	r0, [r1, #0]
 8000cb6:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8000cb8:	4b07      	ldr	r3, [pc, #28]	@ (8000cd8 <get_Sample+0x48>)
 8000cba:	0092      	lsls	r2, r2, #2
 8000cbc:	50d1      	str	r1, [r2, r3]
        idleTimer = 0; // Reset o tempo de inatividade quando um novo pulso chega
 8000cbe:	4b07      	ldr	r3, [pc, #28]	@ (8000cdc <get_Sample+0x4c>)
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	e000      	b.n	8000cc8 <get_Sample+0x38>
    if (data_ready) return; // Se os dados já estão prontos, ignora novas capturas
 8000cc6:	46c0      	nop			@ (mov r8, r8)
    }
}
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000260 	.word	0x20000260
 8000cd0:	20000262 	.word	0x20000262
 8000cd4:	20000264 	.word	0x20000264
 8000cd8:	20000114 	.word	0x20000114
 8000cdc:	20000268 	.word	0x20000268

08000ce0 <HAL_GPIO_EXTI_Rising_Callback>:

void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	0002      	movs	r2, r0
 8000ce8:	1dbb      	adds	r3, r7, #6
 8000cea:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == PINO_INTERRUPT)
 8000cec:	1dbb      	adds	r3, r7, #6
 8000cee:	881a      	ldrh	r2, [r3, #0]
 8000cf0:	2380      	movs	r3, #128	@ 0x80
 8000cf2:	01db      	lsls	r3, r3, #7
 8000cf4:	429a      	cmp	r2, r3
 8000cf6:	d101      	bne.n	8000cfc <HAL_GPIO_EXTI_Rising_Callback+0x1c>
    {
        get_Sample();
 8000cf8:	f7ff ffca 	bl	8000c90 <get_Sample>
    }
}
 8000cfc:	46c0      	nop			@ (mov r8, r8)
 8000cfe:	46bd      	mov	sp, r7
 8000d00:	b002      	add	sp, #8
 8000d02:	bd80      	pop	{r7, pc}

08000d04 <HAL_GPIO_EXTI_Falling_Callback>:

void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b082      	sub	sp, #8
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	0002      	movs	r2, r0
 8000d0c:	1dbb      	adds	r3, r7, #6
 8000d0e:	801a      	strh	r2, [r3, #0]
    if (GPIO_Pin == PINO_INTERRUPT)
 8000d10:	1dbb      	adds	r3, r7, #6
 8000d12:	881a      	ldrh	r2, [r3, #0]
 8000d14:	2380      	movs	r3, #128	@ 0x80
 8000d16:	01db      	lsls	r3, r3, #7
 8000d18:	429a      	cmp	r2, r3
 8000d1a:	d101      	bne.n	8000d20 <HAL_GPIO_EXTI_Falling_Callback+0x1c>
    {

        get_Sample();
 8000d1c:	f7ff ffb8 	bl	8000c90 <get_Sample>
    }
}
 8000d20:	46c0      	nop			@ (mov r8, r8)
 8000d22:	46bd      	mov	sp, r7
 8000d24:	b002      	add	sp, #8
 8000d26:	bd80      	pop	{r7, pc}

08000d28 <get_width_pulses>:

const volatile uint32_t *get_width_pulses(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
    return pulse_width;
 8000d2c:	4b01      	ldr	r3, [pc, #4]	@ (8000d34 <get_width_pulses+0xc>)
}
 8000d2e:	0018      	movs	r0, r3
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	200001bc 	.word	0x200001bc

08000d38 <setTimerPulses>:

void setTimerPulses(TIM_HandleTypeDef *htimChosed)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b082      	sub	sp, #8
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
    htim = htimChosed;
 8000d40:	4b03      	ldr	r3, [pc, #12]	@ (8000d50 <setTimerPulses+0x18>)
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	601a      	str	r2, [r3, #0]
}
 8000d46:	46c0      	nop			@ (mov r8, r8)
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	b002      	add	sp, #8
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	46c0      	nop			@ (mov r8, r8)
 8000d50:	20000264 	.word	0x20000264

08000d54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d5a:	4b10      	ldr	r3, [pc, #64]	@ (8000d9c <HAL_MspInit+0x48>)
 8000d5c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d5e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d9c <HAL_MspInit+0x48>)
 8000d60:	2101      	movs	r1, #1
 8000d62:	430a      	orrs	r2, r1
 8000d64:	641a      	str	r2, [r3, #64]	@ 0x40
 8000d66:	4b0d      	ldr	r3, [pc, #52]	@ (8000d9c <HAL_MspInit+0x48>)
 8000d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d6a:	2201      	movs	r2, #1
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	607b      	str	r3, [r7, #4]
 8000d70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d72:	4b0a      	ldr	r3, [pc, #40]	@ (8000d9c <HAL_MspInit+0x48>)
 8000d74:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d76:	4b09      	ldr	r3, [pc, #36]	@ (8000d9c <HAL_MspInit+0x48>)
 8000d78:	2180      	movs	r1, #128	@ 0x80
 8000d7a:	0549      	lsls	r1, r1, #21
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000d80:	4b06      	ldr	r3, [pc, #24]	@ (8000d9c <HAL_MspInit+0x48>)
 8000d82:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000d84:	2380      	movs	r3, #128	@ 0x80
 8000d86:	055b      	lsls	r3, r3, #21
 8000d88:	4013      	ands	r3, r2
 8000d8a:	603b      	str	r3, [r7, #0]
 8000d8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  HAL_SYSCFG_EnableRemap(SYSCFG_REMAP_PA11);
 8000d8e:	2008      	movs	r0, #8
 8000d90:	f000 f93e 	bl	8001010 <HAL_SYSCFG_EnableRemap>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d94:	46c0      	nop			@ (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b002      	add	sp, #8
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	40021000 	.word	0x40021000

08000da0 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b084      	sub	sp, #16
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	4a17      	ldr	r2, [pc, #92]	@ (8000e0c <HAL_TIM_Base_MspInit+0x6c>)
 8000dae:	4293      	cmp	r3, r2
 8000db0:	d10c      	bne.n	8000dcc <HAL_TIM_Base_MspInit+0x2c>
  {
    /* USER CODE BEGIN TIM3_MspInit 0 */

    /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000db2:	4b17      	ldr	r3, [pc, #92]	@ (8000e10 <HAL_TIM_Base_MspInit+0x70>)
 8000db4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8000db6:	4b16      	ldr	r3, [pc, #88]	@ (8000e10 <HAL_TIM_Base_MspInit+0x70>)
 8000db8:	2102      	movs	r1, #2
 8000dba:	430a      	orrs	r2, r1
 8000dbc:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000dbe:	4b14      	ldr	r3, [pc, #80]	@ (8000e10 <HAL_TIM_Base_MspInit+0x70>)
 8000dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000dc2:	2202      	movs	r2, #2
 8000dc4:	4013      	ands	r3, r2
 8000dc6:	60fb      	str	r3, [r7, #12]
 8000dc8:	68fb      	ldr	r3, [r7, #12]
    /* USER CODE BEGIN TIM14_MspInit 1 */

    /* USER CODE END TIM14_MspInit 1 */
  }

}
 8000dca:	e01a      	b.n	8000e02 <HAL_TIM_Base_MspInit+0x62>
  else if(htim_base->Instance==TIM14)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4a10      	ldr	r2, [pc, #64]	@ (8000e14 <HAL_TIM_Base_MspInit+0x74>)
 8000dd2:	4293      	cmp	r3, r2
 8000dd4:	d115      	bne.n	8000e02 <HAL_TIM_Base_MspInit+0x62>
    __HAL_RCC_TIM14_CLK_ENABLE();
 8000dd6:	4b0e      	ldr	r3, [pc, #56]	@ (8000e10 <HAL_TIM_Base_MspInit+0x70>)
 8000dd8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000dda:	4b0d      	ldr	r3, [pc, #52]	@ (8000e10 <HAL_TIM_Base_MspInit+0x70>)
 8000ddc:	2180      	movs	r1, #128	@ 0x80
 8000dde:	0209      	lsls	r1, r1, #8
 8000de0:	430a      	orrs	r2, r1
 8000de2:	641a      	str	r2, [r3, #64]	@ 0x40
 8000de4:	4b0a      	ldr	r3, [pc, #40]	@ (8000e10 <HAL_TIM_Base_MspInit+0x70>)
 8000de6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000de8:	2380      	movs	r3, #128	@ 0x80
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	4013      	ands	r3, r2
 8000dee:	60bb      	str	r3, [r7, #8]
 8000df0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM14_IRQn, 0, 0);
 8000df2:	2200      	movs	r2, #0
 8000df4:	2100      	movs	r1, #0
 8000df6:	2013      	movs	r0, #19
 8000df8:	f000 f9d2 	bl	80011a0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM14_IRQn);
 8000dfc:	2013      	movs	r0, #19
 8000dfe:	f000 f9e4 	bl	80011ca <HAL_NVIC_EnableIRQ>
}
 8000e02:	46c0      	nop			@ (mov r8, r8)
 8000e04:	46bd      	mov	sp, r7
 8000e06:	b004      	add	sp, #16
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	46c0      	nop			@ (mov r8, r8)
 8000e0c:	40000400 	.word	0x40000400
 8000e10:	40021000 	.word	0x40021000
 8000e14:	40002000 	.word	0x40002000

08000e18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e1c:	46c0      	nop			@ (mov r8, r8)
 8000e1e:	e7fd      	b.n	8000e1c <NMI_Handler+0x4>

08000e20 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e24:	46c0      	nop			@ (mov r8, r8)
 8000e26:	e7fd      	b.n	8000e24 <HardFault_Handler+0x4>

08000e28 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e2c:	46c0      	nop			@ (mov r8, r8)
 8000e2e:	46bd      	mov	sp, r7
 8000e30:	bd80      	pop	{r7, pc}

08000e32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e36:	46c0      	nop			@ (mov r8, r8)
 8000e38:	46bd      	mov	sp, r7
 8000e3a:	bd80      	pop	{r7, pc}

08000e3c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e40:	f000 f8ca 	bl	8000fd8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e44:	46c0      	nop			@ (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(PIR_Pin);
 8000e4e:	2380      	movs	r3, #128	@ 0x80
 8000e50:	01db      	lsls	r3, r3, #7
 8000e52:	0018      	movs	r0, r3
 8000e54:	f000 fb5e 	bl	8001514 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000e58:	46c0      	nop			@ (mov r8, r8)
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
	...

08000e60 <TIM14_IRQHandler>:

/**
  * @brief This function handles TIM14 global interrupt.
  */
void TIM14_IRQHandler(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM14_IRQn 0 */

  /* USER CODE END TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim14);
 8000e64:	4b03      	ldr	r3, [pc, #12]	@ (8000e74 <TIM14_IRQHandler+0x14>)
 8000e66:	0018      	movs	r0, r3
 8000e68:	f000 ff90 	bl	8001d8c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM14_IRQn 1 */

  /* USER CODE END TIM14_IRQn 1 */
}
 8000e6c:	46c0      	nop			@ (mov r8, r8)
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	46c0      	nop			@ (mov r8, r8)
 8000e74:	20000074 	.word	0x20000074

08000e78 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000e7c:	4b03      	ldr	r3, [pc, #12]	@ (8000e8c <SystemInit+0x14>)
 8000e7e:	2280      	movs	r2, #128	@ 0x80
 8000e80:	0512      	lsls	r2, r2, #20
 8000e82:	609a      	str	r2, [r3, #8]
#endif
}
 8000e84:	46c0      	nop			@ (mov r8, r8)
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
 8000e8a:	46c0      	nop			@ (mov r8, r8)
 8000e8c:	e000ed00 	.word	0xe000ed00

08000e90 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000e90:	480d      	ldr	r0, [pc, #52]	@ (8000ec8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000e92:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e94:	f7ff fff0 	bl	8000e78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000e98:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000e9a:	e003      	b.n	8000ea4 <LoopCopyDataInit>

08000e9c <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000e9c:	4b0b      	ldr	r3, [pc, #44]	@ (8000ecc <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000e9e:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000ea0:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000ea2:	3104      	adds	r1, #4

08000ea4 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000ea4:	480a      	ldr	r0, [pc, #40]	@ (8000ed0 <LoopForever+0xa>)
  ldr r3, =_edata
 8000ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8000ed4 <LoopForever+0xe>)
  adds r2, r0, r1
 8000ea8:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000eaa:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000eac:	d3f6      	bcc.n	8000e9c <CopyDataInit>
  ldr r2, =_sbss
 8000eae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <LoopForever+0x12>)
  b LoopFillZerobss
 8000eb0:	e002      	b.n	8000eb8 <LoopFillZerobss>

08000eb2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  str  r3, [r2]
 8000eb4:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb6:	3204      	adds	r2, #4

08000eb8 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000eb8:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <LoopForever+0x16>)
  cmp r2, r3
 8000eba:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000ebc:	d3f9      	bcc.n	8000eb2 <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000ebe:	f001 faf3 	bl	80024a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000ec2:	f7ff fc9d 	bl	8000800 <main>

08000ec6 <LoopForever>:

LoopForever:
    b LoopForever
 8000ec6:	e7fe      	b.n	8000ec6 <LoopForever>
  ldr   r0, =_estack
 8000ec8:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000ecc:	080025cc 	.word	0x080025cc
  ldr r0, =_sdata
 8000ed0:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000ed4:	2000000c 	.word	0x2000000c
  ldr r2, =_sbss
 8000ed8:	2000000c 	.word	0x2000000c
  ldr r3, = _ebss
 8000edc:	20000270 	.word	0x20000270

08000ee0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC1_IRQHandler>
	...

08000ee4 <LL_SYSCFG_ConfigPinMux>:
  * @rmtoll SYSCFG_CFGR3 CLL   LL_SYSCFG_ConfigPinMux\n
  * @param  mux_cfg This parameter can be a value of @ref SYSTEM_LL_PINMUX_CFG
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_ConfigPinMux(uint32_t mux_cfg)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
 8000eea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(SYSCFG->CFGR3, (mux_cfg >> 16U), (mux_cfg & 0x0000FFFFU));
 8000eec:	4b08      	ldr	r3, [pc, #32]	@ (8000f10 <LL_SYSCFG_ConfigPinMux+0x2c>)
 8000eee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ef0:	687a      	ldr	r2, [r7, #4]
 8000ef2:	0c12      	lsrs	r2, r2, #16
 8000ef4:	43d2      	mvns	r2, r2
 8000ef6:	401a      	ands	r2, r3
 8000ef8:	0011      	movs	r1, r2
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	041b      	lsls	r3, r3, #16
 8000efe:	0c1a      	lsrs	r2, r3, #16
 8000f00:	4b03      	ldr	r3, [pc, #12]	@ (8000f10 <LL_SYSCFG_ConfigPinMux+0x2c>)
 8000f02:	430a      	orrs	r2, r1
 8000f04:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000f06:	46c0      	nop			@ (mov r8, r8)
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	b002      	add	sp, #8
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	46c0      	nop			@ (mov r8, r8)
 8000f10:	40010000 	.word	0x40010000

08000f14 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b082      	sub	sp, #8
 8000f18:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f20:	2000      	movs	r0, #0
 8000f22:	f000 f80f 	bl	8000f44 <HAL_InitTick>
 8000f26:	1e03      	subs	r3, r0, #0
 8000f28:	d003      	beq.n	8000f32 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000f2a:	1dfb      	adds	r3, r7, #7
 8000f2c:	2201      	movs	r2, #1
 8000f2e:	701a      	strb	r2, [r3, #0]
 8000f30:	e001      	b.n	8000f36 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f32:	f7ff ff0f 	bl	8000d54 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f36:	1dfb      	adds	r3, r7, #7
 8000f38:	781b      	ldrb	r3, [r3, #0]
}
 8000f3a:	0018      	movs	r0, r3
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	b002      	add	sp, #8
 8000f40:	bd80      	pop	{r7, pc}
	...

08000f44 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f44:	b590      	push	{r4, r7, lr}
 8000f46:	b085      	sub	sp, #20
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f4c:	230f      	movs	r3, #15
 8000f4e:	18fb      	adds	r3, r7, r3
 8000f50:	2200      	movs	r2, #0
 8000f52:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000f54:	4b1d      	ldr	r3, [pc, #116]	@ (8000fcc <HAL_InitTick+0x88>)
 8000f56:	781b      	ldrb	r3, [r3, #0]
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d02b      	beq.n	8000fb4 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000f5c:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <HAL_InitTick+0x8c>)
 8000f5e:	681c      	ldr	r4, [r3, #0]
 8000f60:	4b1a      	ldr	r3, [pc, #104]	@ (8000fcc <HAL_InitTick+0x88>)
 8000f62:	781b      	ldrb	r3, [r3, #0]
 8000f64:	0019      	movs	r1, r3
 8000f66:	23fa      	movs	r3, #250	@ 0xfa
 8000f68:	0098      	lsls	r0, r3, #2
 8000f6a:	f7ff f8cd 	bl	8000108 <__udivsi3>
 8000f6e:	0003      	movs	r3, r0
 8000f70:	0019      	movs	r1, r3
 8000f72:	0020      	movs	r0, r4
 8000f74:	f7ff f8c8 	bl	8000108 <__udivsi3>
 8000f78:	0003      	movs	r3, r0
 8000f7a:	0018      	movs	r0, r3
 8000f7c:	f000 f935 	bl	80011ea <HAL_SYSTICK_Config>
 8000f80:	1e03      	subs	r3, r0, #0
 8000f82:	d112      	bne.n	8000faa <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d80a      	bhi.n	8000fa0 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	425b      	negs	r3, r3
 8000f90:	2200      	movs	r2, #0
 8000f92:	0018      	movs	r0, r3
 8000f94:	f000 f904 	bl	80011a0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f98:	4b0e      	ldr	r3, [pc, #56]	@ (8000fd4 <HAL_InitTick+0x90>)
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	601a      	str	r2, [r3, #0]
 8000f9e:	e00d      	b.n	8000fbc <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000fa0:	230f      	movs	r3, #15
 8000fa2:	18fb      	adds	r3, r7, r3
 8000fa4:	2201      	movs	r2, #1
 8000fa6:	701a      	strb	r2, [r3, #0]
 8000fa8:	e008      	b.n	8000fbc <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000faa:	230f      	movs	r3, #15
 8000fac:	18fb      	adds	r3, r7, r3
 8000fae:	2201      	movs	r2, #1
 8000fb0:	701a      	strb	r2, [r3, #0]
 8000fb2:	e003      	b.n	8000fbc <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fb4:	230f      	movs	r3, #15
 8000fb6:	18fb      	adds	r3, r7, r3
 8000fb8:	2201      	movs	r2, #1
 8000fba:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000fbc:	230f      	movs	r3, #15
 8000fbe:	18fb      	adds	r3, r7, r3
 8000fc0:	781b      	ldrb	r3, [r3, #0]
}
 8000fc2:	0018      	movs	r0, r3
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	b005      	add	sp, #20
 8000fc8:	bd90      	pop	{r4, r7, pc}
 8000fca:	46c0      	nop			@ (mov r8, r8)
 8000fcc:	20000008 	.word	0x20000008
 8000fd0:	20000000 	.word	0x20000000
 8000fd4:	20000004 	.word	0x20000004

08000fd8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fdc:	4b05      	ldr	r3, [pc, #20]	@ (8000ff4 <HAL_IncTick+0x1c>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	001a      	movs	r2, r3
 8000fe2:	4b05      	ldr	r3, [pc, #20]	@ (8000ff8 <HAL_IncTick+0x20>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	18d2      	adds	r2, r2, r3
 8000fe8:	4b03      	ldr	r3, [pc, #12]	@ (8000ff8 <HAL_IncTick+0x20>)
 8000fea:	601a      	str	r2, [r3, #0]
}
 8000fec:	46c0      	nop			@ (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	46c0      	nop			@ (mov r8, r8)
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	2000026c 	.word	0x2000026c

08000ffc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  return uwTick;
 8001000:	4b02      	ldr	r3, [pc, #8]	@ (800100c <HAL_GetTick+0x10>)
 8001002:	681b      	ldr	r3, [r3, #0]
}
 8001004:	0018      	movs	r0, r3
 8001006:	46bd      	mov	sp, r7
 8001008:	bd80      	pop	{r7, pc}
 800100a:	46c0      	nop			@ (mov r8, r8)
 800100c:	2000026c 	.word	0x2000026c

08001010 <HAL_SYSCFG_EnableRemap>:
  *         @arg @ref SYSCFG_REMAP_PA11
  *         @arg @ref SYSCFG_REMAP_PA12
  * @retval None
  */
void HAL_SYSCFG_EnableRemap(uint32_t PinRemap)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_REMAP_PIN(PinRemap));
  SET_BIT(SYSCFG->CFGR1, PinRemap);
 8001018:	4b04      	ldr	r3, [pc, #16]	@ (800102c <HAL_SYSCFG_EnableRemap+0x1c>)
 800101a:	6819      	ldr	r1, [r3, #0]
 800101c:	4b03      	ldr	r3, [pc, #12]	@ (800102c <HAL_SYSCFG_EnableRemap+0x1c>)
 800101e:	687a      	ldr	r2, [r7, #4]
 8001020:	430a      	orrs	r2, r1
 8001022:	601a      	str	r2, [r3, #0]
}
 8001024:	46c0      	nop			@ (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	b002      	add	sp, #8
 800102a:	bd80      	pop	{r7, pc}
 800102c:	40010000 	.word	0x40010000

08001030 <HAL_SYSCFG_SetPinBinding>:
  *         for each die package
  *         This parameter can be a value of @ref HAL_BIND_CFG
  * @retval None
  */
void HAL_SYSCFG_SetPinBinding(uint32_t pin_binding)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_HAL_SYSCFG_PINBINDING(pin_binding));
  LL_SYSCFG_ConfigPinMux(pin_binding);
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	0018      	movs	r0, r3
 800103c:	f7ff ff52 	bl	8000ee4 <LL_SYSCFG_ConfigPinMux>
}
 8001040:	46c0      	nop			@ (mov r8, r8)
 8001042:	46bd      	mov	sp, r7
 8001044:	b002      	add	sp, #8
 8001046:	bd80      	pop	{r7, pc}

08001048 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b082      	sub	sp, #8
 800104c:	af00      	add	r7, sp, #0
 800104e:	0002      	movs	r2, r0
 8001050:	1dfb      	adds	r3, r7, #7
 8001052:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001054:	1dfb      	adds	r3, r7, #7
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b7f      	cmp	r3, #127	@ 0x7f
 800105a:	d809      	bhi.n	8001070 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105c:	1dfb      	adds	r3, r7, #7
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	001a      	movs	r2, r3
 8001062:	231f      	movs	r3, #31
 8001064:	401a      	ands	r2, r3
 8001066:	4b04      	ldr	r3, [pc, #16]	@ (8001078 <__NVIC_EnableIRQ+0x30>)
 8001068:	2101      	movs	r1, #1
 800106a:	4091      	lsls	r1, r2
 800106c:	000a      	movs	r2, r1
 800106e:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8001070:	46c0      	nop			@ (mov r8, r8)
 8001072:	46bd      	mov	sp, r7
 8001074:	b002      	add	sp, #8
 8001076:	bd80      	pop	{r7, pc}
 8001078:	e000e100 	.word	0xe000e100

0800107c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800107c:	b590      	push	{r4, r7, lr}
 800107e:	b083      	sub	sp, #12
 8001080:	af00      	add	r7, sp, #0
 8001082:	0002      	movs	r2, r0
 8001084:	6039      	str	r1, [r7, #0]
 8001086:	1dfb      	adds	r3, r7, #7
 8001088:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800108a:	1dfb      	adds	r3, r7, #7
 800108c:	781b      	ldrb	r3, [r3, #0]
 800108e:	2b7f      	cmp	r3, #127	@ 0x7f
 8001090:	d828      	bhi.n	80010e4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001092:	4a2f      	ldr	r2, [pc, #188]	@ (8001150 <__NVIC_SetPriority+0xd4>)
 8001094:	1dfb      	adds	r3, r7, #7
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	b25b      	sxtb	r3, r3
 800109a:	089b      	lsrs	r3, r3, #2
 800109c:	33c0      	adds	r3, #192	@ 0xc0
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	589b      	ldr	r3, [r3, r2]
 80010a2:	1dfa      	adds	r2, r7, #7
 80010a4:	7812      	ldrb	r2, [r2, #0]
 80010a6:	0011      	movs	r1, r2
 80010a8:	2203      	movs	r2, #3
 80010aa:	400a      	ands	r2, r1
 80010ac:	00d2      	lsls	r2, r2, #3
 80010ae:	21ff      	movs	r1, #255	@ 0xff
 80010b0:	4091      	lsls	r1, r2
 80010b2:	000a      	movs	r2, r1
 80010b4:	43d2      	mvns	r2, r2
 80010b6:	401a      	ands	r2, r3
 80010b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	019b      	lsls	r3, r3, #6
 80010be:	22ff      	movs	r2, #255	@ 0xff
 80010c0:	401a      	ands	r2, r3
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	0018      	movs	r0, r3
 80010c8:	2303      	movs	r3, #3
 80010ca:	4003      	ands	r3, r0
 80010cc:	00db      	lsls	r3, r3, #3
 80010ce:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d0:	481f      	ldr	r0, [pc, #124]	@ (8001150 <__NVIC_SetPriority+0xd4>)
 80010d2:	1dfb      	adds	r3, r7, #7
 80010d4:	781b      	ldrb	r3, [r3, #0]
 80010d6:	b25b      	sxtb	r3, r3
 80010d8:	089b      	lsrs	r3, r3, #2
 80010da:	430a      	orrs	r2, r1
 80010dc:	33c0      	adds	r3, #192	@ 0xc0
 80010de:	009b      	lsls	r3, r3, #2
 80010e0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010e2:	e031      	b.n	8001148 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001154 <__NVIC_SetPriority+0xd8>)
 80010e6:	1dfb      	adds	r3, r7, #7
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	0019      	movs	r1, r3
 80010ec:	230f      	movs	r3, #15
 80010ee:	400b      	ands	r3, r1
 80010f0:	3b08      	subs	r3, #8
 80010f2:	089b      	lsrs	r3, r3, #2
 80010f4:	3306      	adds	r3, #6
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	18d3      	adds	r3, r2, r3
 80010fa:	3304      	adds	r3, #4
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	1dfa      	adds	r2, r7, #7
 8001100:	7812      	ldrb	r2, [r2, #0]
 8001102:	0011      	movs	r1, r2
 8001104:	2203      	movs	r2, #3
 8001106:	400a      	ands	r2, r1
 8001108:	00d2      	lsls	r2, r2, #3
 800110a:	21ff      	movs	r1, #255	@ 0xff
 800110c:	4091      	lsls	r1, r2
 800110e:	000a      	movs	r2, r1
 8001110:	43d2      	mvns	r2, r2
 8001112:	401a      	ands	r2, r3
 8001114:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	019b      	lsls	r3, r3, #6
 800111a:	22ff      	movs	r2, #255	@ 0xff
 800111c:	401a      	ands	r2, r3
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	0018      	movs	r0, r3
 8001124:	2303      	movs	r3, #3
 8001126:	4003      	ands	r3, r0
 8001128:	00db      	lsls	r3, r3, #3
 800112a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800112c:	4809      	ldr	r0, [pc, #36]	@ (8001154 <__NVIC_SetPriority+0xd8>)
 800112e:	1dfb      	adds	r3, r7, #7
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	001c      	movs	r4, r3
 8001134:	230f      	movs	r3, #15
 8001136:	4023      	ands	r3, r4
 8001138:	3b08      	subs	r3, #8
 800113a:	089b      	lsrs	r3, r3, #2
 800113c:	430a      	orrs	r2, r1
 800113e:	3306      	adds	r3, #6
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	18c3      	adds	r3, r0, r3
 8001144:	3304      	adds	r3, #4
 8001146:	601a      	str	r2, [r3, #0]
}
 8001148:	46c0      	nop			@ (mov r8, r8)
 800114a:	46bd      	mov	sp, r7
 800114c:	b003      	add	sp, #12
 800114e:	bd90      	pop	{r4, r7, pc}
 8001150:	e000e100 	.word	0xe000e100
 8001154:	e000ed00 	.word	0xe000ed00

08001158 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	1e5a      	subs	r2, r3, #1
 8001164:	2380      	movs	r3, #128	@ 0x80
 8001166:	045b      	lsls	r3, r3, #17
 8001168:	429a      	cmp	r2, r3
 800116a:	d301      	bcc.n	8001170 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800116c:	2301      	movs	r3, #1
 800116e:	e010      	b.n	8001192 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001170:	4b0a      	ldr	r3, [pc, #40]	@ (800119c <SysTick_Config+0x44>)
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	3a01      	subs	r2, #1
 8001176:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001178:	2301      	movs	r3, #1
 800117a:	425b      	negs	r3, r3
 800117c:	2103      	movs	r1, #3
 800117e:	0018      	movs	r0, r3
 8001180:	f7ff ff7c 	bl	800107c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001184:	4b05      	ldr	r3, [pc, #20]	@ (800119c <SysTick_Config+0x44>)
 8001186:	2200      	movs	r2, #0
 8001188:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800118a:	4b04      	ldr	r3, [pc, #16]	@ (800119c <SysTick_Config+0x44>)
 800118c:	2207      	movs	r2, #7
 800118e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001190:	2300      	movs	r3, #0
}
 8001192:	0018      	movs	r0, r3
 8001194:	46bd      	mov	sp, r7
 8001196:	b002      	add	sp, #8
 8001198:	bd80      	pop	{r7, pc}
 800119a:	46c0      	nop			@ (mov r8, r8)
 800119c:	e000e010 	.word	0xe000e010

080011a0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
 80011aa:	210f      	movs	r1, #15
 80011ac:	187b      	adds	r3, r7, r1
 80011ae:	1c02      	adds	r2, r0, #0
 80011b0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	b25b      	sxtb	r3, r3
 80011ba:	0011      	movs	r1, r2
 80011bc:	0018      	movs	r0, r3
 80011be:	f7ff ff5d 	bl	800107c <__NVIC_SetPriority>
}
 80011c2:	46c0      	nop			@ (mov r8, r8)
 80011c4:	46bd      	mov	sp, r7
 80011c6:	b004      	add	sp, #16
 80011c8:	bd80      	pop	{r7, pc}

080011ca <HAL_NVIC_EnableIRQ>:
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate
  *         CMSIS device file (stm32c0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	b082      	sub	sp, #8
 80011ce:	af00      	add	r7, sp, #0
 80011d0:	0002      	movs	r2, r0
 80011d2:	1dfb      	adds	r3, r7, #7
 80011d4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011d6:	1dfb      	adds	r3, r7, #7
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b25b      	sxtb	r3, r3
 80011dc:	0018      	movs	r0, r3
 80011de:	f7ff ff33 	bl	8001048 <__NVIC_EnableIRQ>
}
 80011e2:	46c0      	nop			@ (mov r8, r8)
 80011e4:	46bd      	mov	sp, r7
 80011e6:	b002      	add	sp, #8
 80011e8:	bd80      	pop	{r7, pc}

080011ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011ea:	b580      	push	{r7, lr}
 80011ec:	b082      	sub	sp, #8
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	0018      	movs	r0, r3
 80011f6:	f7ff ffaf 	bl	8001158 <SysTick_Config>
 80011fa:	0003      	movs	r3, r0
}
 80011fc:	0018      	movs	r0, r3
 80011fe:	46bd      	mov	sp, r7
 8001200:	b002      	add	sp, #8
 8001202:	bd80      	pop	{r7, pc}

08001204 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b086      	sub	sp, #24
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
 800120c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800120e:	2300      	movs	r3, #0
 8001210:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001212:	e14d      	b.n	80014b0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	2101      	movs	r1, #1
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4091      	lsls	r1, r2
 800121e:	000a      	movs	r2, r1
 8001220:	4013      	ands	r3, r2
 8001222:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d100      	bne.n	800122c <HAL_GPIO_Init+0x28>
 800122a:	e13e      	b.n	80014aa <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	2b02      	cmp	r3, #2
 8001232:	d003      	beq.n	800123c <HAL_GPIO_Init+0x38>
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685b      	ldr	r3, [r3, #4]
 8001238:	2b12      	cmp	r3, #18
 800123a:	d125      	bne.n	8001288 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800123c:	693b      	ldr	r3, [r7, #16]
 800123e:	08da      	lsrs	r2, r3, #3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3208      	adds	r2, #8
 8001244:	0092      	lsls	r2, r2, #2
 8001246:	58d3      	ldr	r3, [r2, r3]
 8001248:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos)) ;
 800124a:	693b      	ldr	r3, [r7, #16]
 800124c:	2207      	movs	r2, #7
 800124e:	4013      	ands	r3, r2
 8001250:	009b      	lsls	r3, r3, #2
 8001252:	220f      	movs	r2, #15
 8001254:	409a      	lsls	r2, r3
 8001256:	0013      	movs	r3, r2
 8001258:	43da      	mvns	r2, r3
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	4013      	ands	r3, r2
 800125e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * GPIO_AFRL_AFSEL1_Pos));
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	691b      	ldr	r3, [r3, #16]
 8001264:	220f      	movs	r2, #15
 8001266:	401a      	ands	r2, r3
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	2107      	movs	r1, #7
 800126c:	400b      	ands	r3, r1
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	409a      	lsls	r2, r3
 8001272:	0013      	movs	r3, r2
 8001274:	697a      	ldr	r2, [r7, #20]
 8001276:	4313      	orrs	r3, r2
 8001278:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800127a:	693b      	ldr	r3, [r7, #16]
 800127c:	08da      	lsrs	r2, r3, #3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	3208      	adds	r2, #8
 8001282:	0092      	lsls	r2, r2, #2
 8001284:	6979      	ldr	r1, [r7, #20]
 8001286:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * GPIO_MODER_MODE1_Pos));
 800128e:	693b      	ldr	r3, [r7, #16]
 8001290:	005b      	lsls	r3, r3, #1
 8001292:	2203      	movs	r2, #3
 8001294:	409a      	lsls	r2, r3
 8001296:	0013      	movs	r3, r2
 8001298:	43da      	mvns	r2, r3
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	4013      	ands	r3, r2
 800129e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * GPIO_MODER_MODE1_Pos));
 80012a0:	683b      	ldr	r3, [r7, #0]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	2203      	movs	r2, #3
 80012a6:	401a      	ands	r2, r3
 80012a8:	693b      	ldr	r3, [r7, #16]
 80012aa:	005b      	lsls	r3, r3, #1
 80012ac:	409a      	lsls	r2, r3
 80012ae:	0013      	movs	r3, r2
 80012b0:	697a      	ldr	r2, [r7, #20]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	697a      	ldr	r2, [r7, #20]
 80012ba:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	2b01      	cmp	r3, #1
 80012c2:	d00b      	beq.n	80012dc <HAL_GPIO_Init+0xd8>
 80012c4:	683b      	ldr	r3, [r7, #0]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	2b02      	cmp	r3, #2
 80012ca:	d007      	beq.n	80012dc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80012d0:	2b11      	cmp	r3, #17
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	2b12      	cmp	r3, #18
 80012da:	d130      	bne.n	800133e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	005b      	lsls	r3, r3, #1
 80012e6:	2203      	movs	r2, #3
 80012e8:	409a      	lsls	r2, r3
 80012ea:	0013      	movs	r3, r2
 80012ec:	43da      	mvns	r2, r3
 80012ee:	697b      	ldr	r3, [r7, #20]
 80012f0:	4013      	ands	r3, r2
 80012f2:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * GPIO_OSPEEDR_OSPEED1_Pos));
 80012f4:	683b      	ldr	r3, [r7, #0]
 80012f6:	68da      	ldr	r2, [r3, #12]
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	005b      	lsls	r3, r3, #1
 80012fc:	409a      	lsls	r2, r3
 80012fe:	0013      	movs	r3, r2
 8001300:	697a      	ldr	r2, [r7, #20]
 8001302:	4313      	orrs	r3, r2
 8001304:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	697a      	ldr	r2, [r7, #20]
 800130a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001312:	2201      	movs	r2, #1
 8001314:	693b      	ldr	r3, [r7, #16]
 8001316:	409a      	lsls	r2, r3
 8001318:	0013      	movs	r3, r2
 800131a:	43da      	mvns	r2, r3
 800131c:	697b      	ldr	r3, [r7, #20]
 800131e:	4013      	ands	r3, r2
 8001320:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	091b      	lsrs	r3, r3, #4
 8001328:	2201      	movs	r2, #1
 800132a:	401a      	ands	r2, r3
 800132c:	693b      	ldr	r3, [r7, #16]
 800132e:	409a      	lsls	r2, r3
 8001330:	0013      	movs	r3, r2
 8001332:	697a      	ldr	r2, [r7, #20]
 8001334:	4313      	orrs	r3, r2
 8001336:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	697a      	ldr	r2, [r7, #20]
 800133c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	685b      	ldr	r3, [r3, #4]
 8001342:	2b03      	cmp	r3, #3
 8001344:	d017      	beq.n	8001376 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	68db      	ldr	r3, [r3, #12]
 800134a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * GPIO_PUPDR_PUPD1_Pos));
 800134c:	693b      	ldr	r3, [r7, #16]
 800134e:	005b      	lsls	r3, r3, #1
 8001350:	2203      	movs	r2, #3
 8001352:	409a      	lsls	r2, r3
 8001354:	0013      	movs	r3, r2
 8001356:	43da      	mvns	r2, r3
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	4013      	ands	r3, r2
 800135c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * GPIO_PUPDR_PUPD1_Pos));
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	689a      	ldr	r2, [r3, #8]
 8001362:	693b      	ldr	r3, [r7, #16]
 8001364:	005b      	lsls	r3, r3, #1
 8001366:	409a      	lsls	r2, r3
 8001368:	0013      	movs	r3, r2
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	4313      	orrs	r3, r2
 800136e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	685a      	ldr	r2, [r3, #4]
 800137a:	2380      	movs	r3, #128	@ 0x80
 800137c:	055b      	lsls	r3, r3, #21
 800137e:	4013      	ands	r3, r2
 8001380:	d100      	bne.n	8001384 <HAL_GPIO_Init+0x180>
 8001382:	e092      	b.n	80014aa <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001384:	4a50      	ldr	r2, [pc, #320]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 8001386:	693b      	ldr	r3, [r7, #16]
 8001388:	089b      	lsrs	r3, r3, #2
 800138a:	3318      	adds	r3, #24
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	589b      	ldr	r3, [r3, r2]
 8001390:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 8001392:	693b      	ldr	r3, [r7, #16]
 8001394:	2203      	movs	r2, #3
 8001396:	4013      	ands	r3, r2
 8001398:	00db      	lsls	r3, r3, #3
 800139a:	220f      	movs	r2, #15
 800139c:	409a      	lsls	r2, r3
 800139e:	0013      	movs	r3, r2
 80013a0:	43da      	mvns	r2, r3
 80013a2:	697b      	ldr	r3, [r7, #20]
 80013a4:	4013      	ands	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << ((position & 0x03U) * EXTI_EXTICR1_EXTI1_Pos));
 80013a8:	687a      	ldr	r2, [r7, #4]
 80013aa:	23a0      	movs	r3, #160	@ 0xa0
 80013ac:	05db      	lsls	r3, r3, #23
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d013      	beq.n	80013da <HAL_GPIO_Init+0x1d6>
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	4a45      	ldr	r2, [pc, #276]	@ (80014cc <HAL_GPIO_Init+0x2c8>)
 80013b6:	4293      	cmp	r3, r2
 80013b8:	d00d      	beq.n	80013d6 <HAL_GPIO_Init+0x1d2>
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	4a44      	ldr	r2, [pc, #272]	@ (80014d0 <HAL_GPIO_Init+0x2cc>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d007      	beq.n	80013d2 <HAL_GPIO_Init+0x1ce>
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	4a43      	ldr	r2, [pc, #268]	@ (80014d4 <HAL_GPIO_Init+0x2d0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d101      	bne.n	80013ce <HAL_GPIO_Init+0x1ca>
 80013ca:	2305      	movs	r3, #5
 80013cc:	e006      	b.n	80013dc <HAL_GPIO_Init+0x1d8>
 80013ce:	2306      	movs	r3, #6
 80013d0:	e004      	b.n	80013dc <HAL_GPIO_Init+0x1d8>
 80013d2:	2302      	movs	r3, #2
 80013d4:	e002      	b.n	80013dc <HAL_GPIO_Init+0x1d8>
 80013d6:	2301      	movs	r3, #1
 80013d8:	e000      	b.n	80013dc <HAL_GPIO_Init+0x1d8>
 80013da:	2300      	movs	r3, #0
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	2103      	movs	r1, #3
 80013e0:	400a      	ands	r2, r1
 80013e2:	00d2      	lsls	r2, r2, #3
 80013e4:	4093      	lsls	r3, r2
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 80013ec:	4936      	ldr	r1, [pc, #216]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 80013ee:	693b      	ldr	r3, [r7, #16]
 80013f0:	089b      	lsrs	r3, r3, #2
 80013f2:	3318      	adds	r3, #24
 80013f4:	009b      	lsls	r3, r3, #2
 80013f6:	697a      	ldr	r2, [r7, #20]
 80013f8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 80013fa:	4a33      	ldr	r2, [pc, #204]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 80013fc:	2380      	movs	r3, #128	@ 0x80
 80013fe:	58d3      	ldr	r3, [r2, r3]
 8001400:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	43da      	mvns	r2, r3
 8001406:	697b      	ldr	r3, [r7, #20]
 8001408:	4013      	ands	r3, r2
 800140a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685a      	ldr	r2, [r3, #4]
 8001410:	2380      	movs	r3, #128	@ 0x80
 8001412:	025b      	lsls	r3, r3, #9
 8001414:	4013      	ands	r3, r2
 8001416:	d003      	beq.n	8001420 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001418:	697a      	ldr	r2, [r7, #20]
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	4313      	orrs	r3, r2
 800141e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001420:	4929      	ldr	r1, [pc, #164]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 8001422:	2280      	movs	r2, #128	@ 0x80
 8001424:	697b      	ldr	r3, [r7, #20]
 8001426:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001428:	4a27      	ldr	r2, [pc, #156]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 800142a:	2384      	movs	r3, #132	@ 0x84
 800142c:	58d3      	ldr	r3, [r2, r3]
 800142e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	43da      	mvns	r2, r3
 8001434:	697b      	ldr	r3, [r7, #20]
 8001436:	4013      	ands	r3, r2
 8001438:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	2380      	movs	r3, #128	@ 0x80
 8001440:	029b      	lsls	r3, r3, #10
 8001442:	4013      	ands	r3, r2
 8001444:	d003      	beq.n	800144e <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001446:	697a      	ldr	r2, [r7, #20]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	4313      	orrs	r3, r2
 800144c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800144e:	491e      	ldr	r1, [pc, #120]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 8001450:	2284      	movs	r2, #132	@ 0x84
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001456:	4b1c      	ldr	r3, [pc, #112]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	43da      	mvns	r2, r3
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	4013      	ands	r3, r2
 8001464:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	685a      	ldr	r2, [r3, #4]
 800146a:	2380      	movs	r3, #128	@ 0x80
 800146c:	035b      	lsls	r3, r3, #13
 800146e:	4013      	ands	r3, r2
 8001470:	d003      	beq.n	800147a <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001472:	697a      	ldr	r2, [r7, #20]
 8001474:	68fb      	ldr	r3, [r7, #12]
 8001476:	4313      	orrs	r3, r2
 8001478:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800147a:	4b13      	ldr	r3, [pc, #76]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 800147c:	697a      	ldr	r2, [r7, #20]
 800147e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001480:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	43da      	mvns	r2, r3
 800148a:	697b      	ldr	r3, [r7, #20]
 800148c:	4013      	ands	r3, r2
 800148e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	2380      	movs	r3, #128	@ 0x80
 8001496:	039b      	lsls	r3, r3, #14
 8001498:	4013      	ands	r3, r2
 800149a:	d003      	beq.n	80014a4 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 800149c:	697a      	ldr	r2, [r7, #20]
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80014a4:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <HAL_GPIO_Init+0x2c4>)
 80014a6:	697a      	ldr	r2, [r7, #20]
 80014a8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80014aa:	693b      	ldr	r3, [r7, #16]
 80014ac:	3301      	adds	r3, #1
 80014ae:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80014b0:	683b      	ldr	r3, [r7, #0]
 80014b2:	681a      	ldr	r2, [r3, #0]
 80014b4:	693b      	ldr	r3, [r7, #16]
 80014b6:	40da      	lsrs	r2, r3
 80014b8:	1e13      	subs	r3, r2, #0
 80014ba:	d000      	beq.n	80014be <HAL_GPIO_Init+0x2ba>
 80014bc:	e6aa      	b.n	8001214 <HAL_GPIO_Init+0x10>
  }
}
 80014be:	46c0      	nop			@ (mov r8, r8)
 80014c0:	46c0      	nop			@ (mov r8, r8)
 80014c2:	46bd      	mov	sp, r7
 80014c4:	b006      	add	sp, #24
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40021800 	.word	0x40021800
 80014cc:	50000400 	.word	0x50000400
 80014d0:	50000800 	.word	0x50000800
 80014d4:	50001400 	.word	0x50001400

080014d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b082      	sub	sp, #8
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
 80014e0:	0008      	movs	r0, r1
 80014e2:	0011      	movs	r1, r2
 80014e4:	1cbb      	adds	r3, r7, #2
 80014e6:	1c02      	adds	r2, r0, #0
 80014e8:	801a      	strh	r2, [r3, #0]
 80014ea:	1c7b      	adds	r3, r7, #1
 80014ec:	1c0a      	adds	r2, r1, #0
 80014ee:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80014f0:	1c7b      	adds	r3, r7, #1
 80014f2:	781b      	ldrb	r3, [r3, #0]
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d004      	beq.n	8001502 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80014f8:	1cbb      	adds	r3, r7, #2
 80014fa:	881a      	ldrh	r2, [r3, #0]
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001500:	e003      	b.n	800150a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001502:	1cbb      	adds	r3, r7, #2
 8001504:	881a      	ldrh	r2, [r3, #0]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800150a:	46c0      	nop			@ (mov r8, r8)
 800150c:	46bd      	mov	sp, r7
 800150e:	b002      	add	sp, #8
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	0002      	movs	r2, r0
 800151c:	1dbb      	adds	r3, r7, #6
 800151e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0U)
 8001520:	4b10      	ldr	r3, [pc, #64]	@ (8001564 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001522:	68db      	ldr	r3, [r3, #12]
 8001524:	1dba      	adds	r2, r7, #6
 8001526:	8812      	ldrh	r2, [r2, #0]
 8001528:	4013      	ands	r3, r2
 800152a:	d008      	beq.n	800153e <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 800152c:	4b0d      	ldr	r3, [pc, #52]	@ (8001564 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800152e:	1dba      	adds	r2, r7, #6
 8001530:	8812      	ldrh	r2, [r2, #0]
 8001532:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001534:	1dbb      	adds	r3, r7, #6
 8001536:	881b      	ldrh	r3, [r3, #0]
 8001538:	0018      	movs	r0, r3
 800153a:	f7ff fbd1 	bl	8000ce0 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0U)
 800153e:	4b09      	ldr	r3, [pc, #36]	@ (8001564 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001540:	691b      	ldr	r3, [r3, #16]
 8001542:	1dba      	adds	r2, r7, #6
 8001544:	8812      	ldrh	r2, [r2, #0]
 8001546:	4013      	ands	r3, r2
 8001548:	d008      	beq.n	800155c <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 800154a:	4b06      	ldr	r3, [pc, #24]	@ (8001564 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 800154c:	1dba      	adds	r2, r7, #6
 800154e:	8812      	ldrh	r2, [r2, #0]
 8001550:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001552:	1dbb      	adds	r3, r7, #6
 8001554:	881b      	ldrh	r3, [r3, #0]
 8001556:	0018      	movs	r0, r3
 8001558:	f7ff fbd4 	bl	8000d04 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 800155c:	46c0      	nop			@ (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	b002      	add	sp, #8
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40021800 	.word	0x40021800

08001568 <HAL_RCC_OscConfig>:
            must adjust the number of CPU wait states in their application (SystemClock_Config() API)
            before calling the HAL_RCC_OscConfig() API to update the HSI48 clock division factor.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2b00      	cmp	r3, #0
 8001574:	d101      	bne.n	800157a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
 8001578:	e1d0      	b.n	800191c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	2201      	movs	r2, #1
 8001580:	4013      	ands	r3, r2
 8001582:	d100      	bne.n	8001586 <HAL_RCC_OscConfig+0x1e>
 8001584:	e069      	b.n	800165a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001586:	4bc8      	ldr	r3, [pc, #800]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	2238      	movs	r2, #56	@ 0x38
 800158c:	4013      	ands	r3, r2
 800158e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	2b08      	cmp	r3, #8
 8001594:	d105      	bne.n	80015a2 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	2b00      	cmp	r3, #0
 800159c:	d15d      	bne.n	800165a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800159e:	2301      	movs	r3, #1
 80015a0:	e1bc      	b.n	800191c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685a      	ldr	r2, [r3, #4]
 80015a6:	2380      	movs	r3, #128	@ 0x80
 80015a8:	025b      	lsls	r3, r3, #9
 80015aa:	429a      	cmp	r2, r3
 80015ac:	d107      	bne.n	80015be <HAL_RCC_OscConfig+0x56>
 80015ae:	4bbe      	ldr	r3, [pc, #760]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	4bbd      	ldr	r3, [pc, #756]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80015b4:	2180      	movs	r1, #128	@ 0x80
 80015b6:	0249      	lsls	r1, r1, #9
 80015b8:	430a      	orrs	r2, r1
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	e020      	b.n	8001600 <HAL_RCC_OscConfig+0x98>
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	685a      	ldr	r2, [r3, #4]
 80015c2:	23a0      	movs	r3, #160	@ 0xa0
 80015c4:	02db      	lsls	r3, r3, #11
 80015c6:	429a      	cmp	r2, r3
 80015c8:	d10e      	bne.n	80015e8 <HAL_RCC_OscConfig+0x80>
 80015ca:	4bb7      	ldr	r3, [pc, #732]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80015cc:	681a      	ldr	r2, [r3, #0]
 80015ce:	4bb6      	ldr	r3, [pc, #728]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80015d0:	2180      	movs	r1, #128	@ 0x80
 80015d2:	02c9      	lsls	r1, r1, #11
 80015d4:	430a      	orrs	r2, r1
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	4bb3      	ldr	r3, [pc, #716]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	4bb2      	ldr	r3, [pc, #712]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80015de:	2180      	movs	r1, #128	@ 0x80
 80015e0:	0249      	lsls	r1, r1, #9
 80015e2:	430a      	orrs	r2, r1
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	e00b      	b.n	8001600 <HAL_RCC_OscConfig+0x98>
 80015e8:	4baf      	ldr	r3, [pc, #700]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4bae      	ldr	r3, [pc, #696]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80015ee:	49af      	ldr	r1, [pc, #700]	@ (80018ac <HAL_RCC_OscConfig+0x344>)
 80015f0:	400a      	ands	r2, r1
 80015f2:	601a      	str	r2, [r3, #0]
 80015f4:	4bac      	ldr	r3, [pc, #688]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	4bab      	ldr	r3, [pc, #684]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80015fa:	49ad      	ldr	r1, [pc, #692]	@ (80018b0 <HAL_RCC_OscConfig+0x348>)
 80015fc:	400a      	ands	r2, r1
 80015fe:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	2b00      	cmp	r3, #0
 8001606:	d014      	beq.n	8001632 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001608:	f7ff fcf8 	bl	8000ffc <HAL_GetTick>
 800160c:	0003      	movs	r3, r0
 800160e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001610:	e008      	b.n	8001624 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001612:	f7ff fcf3 	bl	8000ffc <HAL_GetTick>
 8001616:	0002      	movs	r2, r0
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	1ad3      	subs	r3, r2, r3
 800161c:	2b64      	cmp	r3, #100	@ 0x64
 800161e:	d901      	bls.n	8001624 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001620:	2303      	movs	r3, #3
 8001622:	e17b      	b.n	800191c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001624:	4ba0      	ldr	r3, [pc, #640]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 8001626:	681a      	ldr	r2, [r3, #0]
 8001628:	2380      	movs	r3, #128	@ 0x80
 800162a:	029b      	lsls	r3, r3, #10
 800162c:	4013      	ands	r3, r2
 800162e:	d0f0      	beq.n	8001612 <HAL_RCC_OscConfig+0xaa>
 8001630:	e013      	b.n	800165a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001632:	f7ff fce3 	bl	8000ffc <HAL_GetTick>
 8001636:	0003      	movs	r3, r0
 8001638:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800163a:	e008      	b.n	800164e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 800163c:	f7ff fcde 	bl	8000ffc <HAL_GetTick>
 8001640:	0002      	movs	r2, r0
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	1ad3      	subs	r3, r2, r3
 8001646:	2b64      	cmp	r3, #100	@ 0x64
 8001648:	d901      	bls.n	800164e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 800164a:	2303      	movs	r3, #3
 800164c:	e166      	b.n	800191c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800164e:	4b96      	ldr	r3, [pc, #600]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 8001650:	681a      	ldr	r2, [r3, #0]
 8001652:	2380      	movs	r3, #128	@ 0x80
 8001654:	029b      	lsls	r3, r3, #10
 8001656:	4013      	ands	r3, r2
 8001658:	d1f0      	bne.n	800163c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	2202      	movs	r2, #2
 8001660:	4013      	ands	r3, r2
 8001662:	d100      	bne.n	8001666 <HAL_RCC_OscConfig+0xfe>
 8001664:	e086      	b.n	8001774 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001666:	4b90      	ldr	r3, [pc, #576]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	2238      	movs	r2, #56	@ 0x38
 800166c:	4013      	ands	r3, r2
 800166e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d12f      	bne.n	80016d6 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	68db      	ldr	r3, [r3, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e14c      	b.n	800191c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001682:	4b89      	ldr	r3, [pc, #548]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	4a8b      	ldr	r2, [pc, #556]	@ (80018b4 <HAL_RCC_OscConfig+0x34c>)
 8001688:	4013      	ands	r3, r2
 800168a:	0019      	movs	r1, r3
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	695b      	ldr	r3, [r3, #20]
 8001690:	021a      	lsls	r2, r3, #8
 8001692:	4b85      	ldr	r3, [pc, #532]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 8001694:	430a      	orrs	r2, r1
 8001696:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001698:	697b      	ldr	r3, [r7, #20]
 800169a:	2b00      	cmp	r3, #0
 800169c:	d112      	bne.n	80016c4 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800169e:	4b82      	ldr	r3, [pc, #520]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	4a85      	ldr	r2, [pc, #532]	@ (80018b8 <HAL_RCC_OscConfig+0x350>)
 80016a4:	4013      	ands	r3, r2
 80016a6:	0019      	movs	r1, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	691a      	ldr	r2, [r3, #16]
 80016ac:	4b7e      	ldr	r3, [pc, #504]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80016ae:	430a      	orrs	r2, r1
 80016b0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 80016b2:	4b7d      	ldr	r3, [pc, #500]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	0adb      	lsrs	r3, r3, #11
 80016b8:	2207      	movs	r2, #7
 80016ba:	4013      	ands	r3, r2
 80016bc:	4a7f      	ldr	r2, [pc, #508]	@ (80018bc <HAL_RCC_OscConfig+0x354>)
 80016be:	40da      	lsrs	r2, r3
 80016c0:	4b7f      	ldr	r3, [pc, #508]	@ (80018c0 <HAL_RCC_OscConfig+0x358>)
 80016c2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80016c4:	4b7f      	ldr	r3, [pc, #508]	@ (80018c4 <HAL_RCC_OscConfig+0x35c>)
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7ff fc3b 	bl	8000f44 <HAL_InitTick>
 80016ce:	1e03      	subs	r3, r0, #0
 80016d0:	d050      	beq.n	8001774 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
 80016d4:	e122      	b.n	800191c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	68db      	ldr	r3, [r3, #12]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	d030      	beq.n	8001740 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80016de:	4b72      	ldr	r3, [pc, #456]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a75      	ldr	r2, [pc, #468]	@ (80018b8 <HAL_RCC_OscConfig+0x350>)
 80016e4:	4013      	ands	r3, r2
 80016e6:	0019      	movs	r1, r3
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	691a      	ldr	r2, [r3, #16]
 80016ec:	4b6e      	ldr	r3, [pc, #440]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80016ee:	430a      	orrs	r2, r1
 80016f0:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 80016f2:	4b6d      	ldr	r3, [pc, #436]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	4b6c      	ldr	r3, [pc, #432]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80016f8:	2180      	movs	r1, #128	@ 0x80
 80016fa:	0049      	lsls	r1, r1, #1
 80016fc:	430a      	orrs	r2, r1
 80016fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001700:	f7ff fc7c 	bl	8000ffc <HAL_GetTick>
 8001704:	0003      	movs	r3, r0
 8001706:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001708:	e008      	b.n	800171c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800170a:	f7ff fc77 	bl	8000ffc <HAL_GetTick>
 800170e:	0002      	movs	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	2b02      	cmp	r3, #2
 8001716:	d901      	bls.n	800171c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001718:	2303      	movs	r3, #3
 800171a:	e0ff      	b.n	800191c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800171c:	4b62      	ldr	r3, [pc, #392]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	2380      	movs	r3, #128	@ 0x80
 8001722:	00db      	lsls	r3, r3, #3
 8001724:	4013      	ands	r3, r2
 8001726:	d0f0      	beq.n	800170a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001728:	4b5f      	ldr	r3, [pc, #380]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	4a61      	ldr	r2, [pc, #388]	@ (80018b4 <HAL_RCC_OscConfig+0x34c>)
 800172e:	4013      	ands	r3, r2
 8001730:	0019      	movs	r1, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	695b      	ldr	r3, [r3, #20]
 8001736:	021a      	lsls	r2, r3, #8
 8001738:	4b5b      	ldr	r3, [pc, #364]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e019      	b.n	8001774 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001740:	4b59      	ldr	r3, [pc, #356]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 8001742:	681a      	ldr	r2, [r3, #0]
 8001744:	4b58      	ldr	r3, [pc, #352]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 8001746:	4960      	ldr	r1, [pc, #384]	@ (80018c8 <HAL_RCC_OscConfig+0x360>)
 8001748:	400a      	ands	r2, r1
 800174a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff fc56 	bl	8000ffc <HAL_GetTick>
 8001750:	0003      	movs	r3, r0
 8001752:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001754:	e008      	b.n	8001768 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001756:	f7ff fc51 	bl	8000ffc <HAL_GetTick>
 800175a:	0002      	movs	r2, r0
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	1ad3      	subs	r3, r2, r3
 8001760:	2b02      	cmp	r3, #2
 8001762:	d901      	bls.n	8001768 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001764:	2303      	movs	r3, #3
 8001766:	e0d9      	b.n	800191c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001768:	4b4f      	ldr	r3, [pc, #316]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	2380      	movs	r3, #128	@ 0x80
 800176e:	00db      	lsls	r3, r3, #3
 8001770:	4013      	ands	r3, r2
 8001772:	d1f0      	bne.n	8001756 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	2208      	movs	r2, #8
 800177a:	4013      	ands	r3, r2
 800177c:	d042      	beq.n	8001804 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800177e:	4b4a      	ldr	r3, [pc, #296]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 8001780:	689b      	ldr	r3, [r3, #8]
 8001782:	2238      	movs	r2, #56	@ 0x38
 8001784:	4013      	ands	r3, r2
 8001786:	2b18      	cmp	r3, #24
 8001788:	d105      	bne.n	8001796 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	699b      	ldr	r3, [r3, #24]
 800178e:	2b00      	cmp	r3, #0
 8001790:	d138      	bne.n	8001804 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001792:	2301      	movs	r3, #1
 8001794:	e0c2      	b.n	800191c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	699b      	ldr	r3, [r3, #24]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d019      	beq.n	80017d2 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800179e:	4b42      	ldr	r3, [pc, #264]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80017a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017a2:	4b41      	ldr	r3, [pc, #260]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80017a4:	2101      	movs	r1, #1
 80017a6:	430a      	orrs	r2, r1
 80017a8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017aa:	f7ff fc27 	bl	8000ffc <HAL_GetTick>
 80017ae:	0003      	movs	r3, r0
 80017b0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80017b2:	e008      	b.n	80017c6 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80017b4:	f7ff fc22 	bl	8000ffc <HAL_GetTick>
 80017b8:	0002      	movs	r2, r0
 80017ba:	693b      	ldr	r3, [r7, #16]
 80017bc:	1ad3      	subs	r3, r2, r3
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d901      	bls.n	80017c6 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80017c2:	2303      	movs	r3, #3
 80017c4:	e0aa      	b.n	800191c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80017c6:	4b38      	ldr	r3, [pc, #224]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80017c8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ca:	2202      	movs	r2, #2
 80017cc:	4013      	ands	r3, r2
 80017ce:	d0f1      	beq.n	80017b4 <HAL_RCC_OscConfig+0x24c>
 80017d0:	e018      	b.n	8001804 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80017d2:	4b35      	ldr	r3, [pc, #212]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80017d4:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80017d6:	4b34      	ldr	r3, [pc, #208]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80017d8:	2101      	movs	r1, #1
 80017da:	438a      	bics	r2, r1
 80017dc:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017de:	f7ff fc0d 	bl	8000ffc <HAL_GetTick>
 80017e2:	0003      	movs	r3, r0
 80017e4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80017e8:	f7ff fc08 	bl	8000ffc <HAL_GetTick>
 80017ec:	0002      	movs	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e090      	b.n	800191c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80017fa:	4b2b      	ldr	r3, [pc, #172]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 80017fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017fe:	2202      	movs	r2, #2
 8001800:	4013      	ands	r3, r2
 8001802:	d1f1      	bne.n	80017e8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	2204      	movs	r2, #4
 800180a:	4013      	ands	r3, r2
 800180c:	d100      	bne.n	8001810 <HAL_RCC_OscConfig+0x2a8>
 800180e:	e084      	b.n	800191a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001810:	230f      	movs	r3, #15
 8001812:	18fb      	adds	r3, r7, r3
 8001814:	2200      	movs	r2, #0
 8001816:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001818:	4b23      	ldr	r3, [pc, #140]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	2238      	movs	r2, #56	@ 0x38
 800181e:	4013      	ands	r3, r2
 8001820:	2b20      	cmp	r3, #32
 8001822:	d106      	bne.n	8001832 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d000      	beq.n	800182e <HAL_RCC_OscConfig+0x2c6>
 800182c:	e075      	b.n	800191a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800182e:	2301      	movs	r3, #1
 8001830:	e074      	b.n	800191c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	2b01      	cmp	r3, #1
 8001838:	d106      	bne.n	8001848 <HAL_RCC_OscConfig+0x2e0>
 800183a:	4b1b      	ldr	r3, [pc, #108]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 800183c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800183e:	4b1a      	ldr	r3, [pc, #104]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 8001840:	2101      	movs	r1, #1
 8001842:	430a      	orrs	r2, r1
 8001844:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001846:	e01c      	b.n	8001882 <HAL_RCC_OscConfig+0x31a>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	2b05      	cmp	r3, #5
 800184e:	d10c      	bne.n	800186a <HAL_RCC_OscConfig+0x302>
 8001850:	4b15      	ldr	r3, [pc, #84]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 8001852:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001854:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 8001856:	2104      	movs	r1, #4
 8001858:	430a      	orrs	r2, r1
 800185a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800185c:	4b12      	ldr	r3, [pc, #72]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 800185e:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 8001860:	4b11      	ldr	r3, [pc, #68]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 8001862:	2101      	movs	r1, #1
 8001864:	430a      	orrs	r2, r1
 8001866:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001868:	e00b      	b.n	8001882 <HAL_RCC_OscConfig+0x31a>
 800186a:	4b0f      	ldr	r3, [pc, #60]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 800186c:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800186e:	4b0e      	ldr	r3, [pc, #56]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 8001870:	2101      	movs	r1, #1
 8001872:	438a      	bics	r2, r1
 8001874:	65da      	str	r2, [r3, #92]	@ 0x5c
 8001876:	4b0c      	ldr	r3, [pc, #48]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 8001878:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800187a:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <HAL_RCC_OscConfig+0x340>)
 800187c:	2104      	movs	r1, #4
 800187e:	438a      	bics	r2, r1
 8001880:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d028      	beq.n	80018dc <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800188a:	f7ff fbb7 	bl	8000ffc <HAL_GetTick>
 800188e:	0003      	movs	r3, r0
 8001890:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001892:	e01d      	b.n	80018d0 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001894:	f7ff fbb2 	bl	8000ffc <HAL_GetTick>
 8001898:	0002      	movs	r2, r0
 800189a:	693b      	ldr	r3, [r7, #16]
 800189c:	1ad3      	subs	r3, r2, r3
 800189e:	4a0b      	ldr	r2, [pc, #44]	@ (80018cc <HAL_RCC_OscConfig+0x364>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d915      	bls.n	80018d0 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80018a4:	2303      	movs	r3, #3
 80018a6:	e039      	b.n	800191c <HAL_RCC_OscConfig+0x3b4>
 80018a8:	40021000 	.word	0x40021000
 80018ac:	fffeffff 	.word	0xfffeffff
 80018b0:	fffbffff 	.word	0xfffbffff
 80018b4:	ffff80ff 	.word	0xffff80ff
 80018b8:	ffffc7ff 	.word	0xffffc7ff
 80018bc:	02dc6c00 	.word	0x02dc6c00
 80018c0:	20000000 	.word	0x20000000
 80018c4:	20000004 	.word	0x20000004
 80018c8:	fffffeff 	.word	0xfffffeff
 80018cc:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80018d0:	4b14      	ldr	r3, [pc, #80]	@ (8001924 <HAL_RCC_OscConfig+0x3bc>)
 80018d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018d4:	2202      	movs	r2, #2
 80018d6:	4013      	ands	r3, r2
 80018d8:	d0dc      	beq.n	8001894 <HAL_RCC_OscConfig+0x32c>
 80018da:	e013      	b.n	8001904 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff fb8e 	bl	8000ffc <HAL_GetTick>
 80018e0:	0003      	movs	r3, r0
 80018e2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80018e4:	e009      	b.n	80018fa <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018e6:	f7ff fb89 	bl	8000ffc <HAL_GetTick>
 80018ea:	0002      	movs	r2, r0
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001928 <HAL_RCC_OscConfig+0x3c0>)
 80018f2:	4293      	cmp	r3, r2
 80018f4:	d901      	bls.n	80018fa <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 80018f6:	2303      	movs	r3, #3
 80018f8:	e010      	b.n	800191c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80018fa:	4b0a      	ldr	r3, [pc, #40]	@ (8001924 <HAL_RCC_OscConfig+0x3bc>)
 80018fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018fe:	2202      	movs	r2, #2
 8001900:	4013      	ands	r3, r2
 8001902:	d1f0      	bne.n	80018e6 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001904:	230f      	movs	r3, #15
 8001906:	18fb      	adds	r3, r7, r3
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b01      	cmp	r3, #1
 800190c:	d105      	bne.n	800191a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800190e:	4b05      	ldr	r3, [pc, #20]	@ (8001924 <HAL_RCC_OscConfig+0x3bc>)
 8001910:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001912:	4b04      	ldr	r3, [pc, #16]	@ (8001924 <HAL_RCC_OscConfig+0x3bc>)
 8001914:	4905      	ldr	r1, [pc, #20]	@ (800192c <HAL_RCC_OscConfig+0x3c4>)
 8001916:	400a      	ands	r2, r1
 8001918:	63da      	str	r2, [r3, #60]	@ 0x3c
        }
      }
    }
  }
#endif /* RCC_CR_HSIUSB48ON */
  return HAL_OK;
 800191a:	2300      	movs	r3, #0
}
 800191c:	0018      	movs	r0, r3
 800191e:	46bd      	mov	sp, r7
 8001920:	b006      	add	sp, #24
 8001922:	bd80      	pop	{r7, pc}
 8001924:	40021000 	.word	0x40021000
 8001928:	00001388 	.word	0x00001388
 800192c:	efffffff 	.word	0xefffffff

08001930 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
 8001938:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001940:	2301      	movs	r3, #1
 8001942:	e0df      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1d4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001944:	4b71      	ldr	r3, [pc, #452]	@ (8001b0c <HAL_RCC_ClockConfig+0x1dc>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	2207      	movs	r2, #7
 800194a:	4013      	ands	r3, r2
 800194c:	683a      	ldr	r2, [r7, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	d91e      	bls.n	8001990 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001952:	4b6e      	ldr	r3, [pc, #440]	@ (8001b0c <HAL_RCC_ClockConfig+0x1dc>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	2207      	movs	r2, #7
 8001958:	4393      	bics	r3, r2
 800195a:	0019      	movs	r1, r3
 800195c:	4b6b      	ldr	r3, [pc, #428]	@ (8001b0c <HAL_RCC_ClockConfig+0x1dc>)
 800195e:	683a      	ldr	r2, [r7, #0]
 8001960:	430a      	orrs	r2, r1
 8001962:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001964:	f7ff fb4a 	bl	8000ffc <HAL_GetTick>
 8001968:	0003      	movs	r3, r0
 800196a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800196c:	e009      	b.n	8001982 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800196e:	f7ff fb45 	bl	8000ffc <HAL_GetTick>
 8001972:	0002      	movs	r2, r0
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	4a65      	ldr	r2, [pc, #404]	@ (8001b10 <HAL_RCC_ClockConfig+0x1e0>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d901      	bls.n	8001982 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800197e:	2303      	movs	r3, #3
 8001980:	e0c0      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001982:	4b62      	ldr	r3, [pc, #392]	@ (8001b0c <HAL_RCC_ClockConfig+0x1dc>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	2207      	movs	r2, #7
 8001988:	4013      	ands	r3, r2
 800198a:	683a      	ldr	r2, [r7, #0]
 800198c:	429a      	cmp	r2, r3
 800198e:	d1ee      	bne.n	800196e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	2202      	movs	r2, #2
 8001996:	4013      	ands	r3, r2
 8001998:	d017      	beq.n	80019ca <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	2204      	movs	r2, #4
 80019a0:	4013      	ands	r3, r2
 80019a2:	d008      	beq.n	80019b6 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80019a4:	4b5b      	ldr	r3, [pc, #364]	@ (8001b14 <HAL_RCC_ClockConfig+0x1e4>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	4a5b      	ldr	r2, [pc, #364]	@ (8001b18 <HAL_RCC_ClockConfig+0x1e8>)
 80019aa:	401a      	ands	r2, r3
 80019ac:	4b59      	ldr	r3, [pc, #356]	@ (8001b14 <HAL_RCC_ClockConfig+0x1e4>)
 80019ae:	21b0      	movs	r1, #176	@ 0xb0
 80019b0:	0109      	lsls	r1, r1, #4
 80019b2:	430a      	orrs	r2, r1
 80019b4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019b6:	4b57      	ldr	r3, [pc, #348]	@ (8001b14 <HAL_RCC_ClockConfig+0x1e4>)
 80019b8:	689b      	ldr	r3, [r3, #8]
 80019ba:	4a58      	ldr	r2, [pc, #352]	@ (8001b1c <HAL_RCC_ClockConfig+0x1ec>)
 80019bc:	4013      	ands	r3, r2
 80019be:	0019      	movs	r1, r3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	68da      	ldr	r2, [r3, #12]
 80019c4:	4b53      	ldr	r3, [pc, #332]	@ (8001b14 <HAL_RCC_ClockConfig+0x1e4>)
 80019c6:	430a      	orrs	r2, r1
 80019c8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	2201      	movs	r2, #1
 80019d0:	4013      	ands	r3, r2
 80019d2:	d04b      	beq.n	8001a6c <HAL_RCC_ClockConfig+0x13c>
#if defined(RCC_CR_SYSDIV)
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
#endif /* RCC_CR_SYSDIV */

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d107      	bne.n	80019ec <HAL_RCC_ClockConfig+0xbc>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019dc:	4b4d      	ldr	r3, [pc, #308]	@ (8001b14 <HAL_RCC_ClockConfig+0x1e4>)
 80019de:	681a      	ldr	r2, [r3, #0]
 80019e0:	2380      	movs	r3, #128	@ 0x80
 80019e2:	029b      	lsls	r3, r3, #10
 80019e4:	4013      	ands	r3, r2
 80019e6:	d11f      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e08b      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	685b      	ldr	r3, [r3, #4]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d107      	bne.n	8001a04 <HAL_RCC_ClockConfig+0xd4>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80019f4:	4b47      	ldr	r3, [pc, #284]	@ (8001b14 <HAL_RCC_ClockConfig+0x1e4>)
 80019f6:	681a      	ldr	r2, [r3, #0]
 80019f8:	2380      	movs	r3, #128	@ 0x80
 80019fa:	00db      	lsls	r3, r3, #3
 80019fc:	4013      	ands	r3, r2
 80019fe:	d113      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001a00:	2301      	movs	r3, #1
 8001a02:	e07f      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1d4>
        return HAL_ERROR;
      }
    }
#endif /* RCC_HSI48_SUPPORT */
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	685b      	ldr	r3, [r3, #4]
 8001a08:	2b03      	cmp	r3, #3
 8001a0a:	d106      	bne.n	8001a1a <HAL_RCC_ClockConfig+0xea>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001a0c:	4b41      	ldr	r3, [pc, #260]	@ (8001b14 <HAL_RCC_ClockConfig+0x1e4>)
 8001a0e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001a10:	2202      	movs	r2, #2
 8001a12:	4013      	ands	r3, r2
 8001a14:	d108      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e074      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1d4>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001a1a:	4b3e      	ldr	r3, [pc, #248]	@ (8001b14 <HAL_RCC_ClockConfig+0x1e4>)
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001a1e:	2202      	movs	r2, #2
 8001a20:	4013      	ands	r3, r2
 8001a22:	d101      	bne.n	8001a28 <HAL_RCC_ClockConfig+0xf8>
      {
        return HAL_ERROR;
 8001a24:	2301      	movs	r3, #1
 8001a26:	e06d      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1d4>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a28:	4b3a      	ldr	r3, [pc, #232]	@ (8001b14 <HAL_RCC_ClockConfig+0x1e4>)
 8001a2a:	689b      	ldr	r3, [r3, #8]
 8001a2c:	2207      	movs	r2, #7
 8001a2e:	4393      	bics	r3, r2
 8001a30:	0019      	movs	r1, r3
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	685a      	ldr	r2, [r3, #4]
 8001a36:	4b37      	ldr	r3, [pc, #220]	@ (8001b14 <HAL_RCC_ClockConfig+0x1e4>)
 8001a38:	430a      	orrs	r2, r1
 8001a3a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a3c:	f7ff fade 	bl	8000ffc <HAL_GetTick>
 8001a40:	0003      	movs	r3, r0
 8001a42:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a44:	e009      	b.n	8001a5a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001a46:	f7ff fad9 	bl	8000ffc <HAL_GetTick>
 8001a4a:	0002      	movs	r2, r0
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	4a2f      	ldr	r2, [pc, #188]	@ (8001b10 <HAL_RCC_ClockConfig+0x1e0>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e054      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1d4>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a5a:	4b2e      	ldr	r3, [pc, #184]	@ (8001b14 <HAL_RCC_ClockConfig+0x1e4>)
 8001a5c:	689b      	ldr	r3, [r3, #8]
 8001a5e:	2238      	movs	r2, #56	@ 0x38
 8001a60:	401a      	ands	r2, r3
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	00db      	lsls	r3, r3, #3
 8001a68:	429a      	cmp	r2, r3
 8001a6a:	d1ec      	bne.n	8001a46 <HAL_RCC_ClockConfig+0x116>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a6c:	4b27      	ldr	r3, [pc, #156]	@ (8001b0c <HAL_RCC_ClockConfig+0x1dc>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	2207      	movs	r2, #7
 8001a72:	4013      	ands	r3, r2
 8001a74:	683a      	ldr	r2, [r7, #0]
 8001a76:	429a      	cmp	r2, r3
 8001a78:	d21e      	bcs.n	8001ab8 <HAL_RCC_ClockConfig+0x188>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a7a:	4b24      	ldr	r3, [pc, #144]	@ (8001b0c <HAL_RCC_ClockConfig+0x1dc>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	2207      	movs	r2, #7
 8001a80:	4393      	bics	r3, r2
 8001a82:	0019      	movs	r1, r3
 8001a84:	4b21      	ldr	r3, [pc, #132]	@ (8001b0c <HAL_RCC_ClockConfig+0x1dc>)
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	430a      	orrs	r2, r1
 8001a8a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001a8c:	f7ff fab6 	bl	8000ffc <HAL_GetTick>
 8001a90:	0003      	movs	r3, r0
 8001a92:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001a94:	e009      	b.n	8001aaa <HAL_RCC_ClockConfig+0x17a>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001a96:	f7ff fab1 	bl	8000ffc <HAL_GetTick>
 8001a9a:	0002      	movs	r2, r0
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	1ad3      	subs	r3, r2, r3
 8001aa0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b10 <HAL_RCC_ClockConfig+0x1e0>)
 8001aa2:	4293      	cmp	r3, r2
 8001aa4:	d901      	bls.n	8001aaa <HAL_RCC_ClockConfig+0x17a>
      {
        return HAL_TIMEOUT;
 8001aa6:	2303      	movs	r3, #3
 8001aa8:	e02c      	b.n	8001b04 <HAL_RCC_ClockConfig+0x1d4>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001aaa:	4b18      	ldr	r3, [pc, #96]	@ (8001b0c <HAL_RCC_ClockConfig+0x1dc>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	2207      	movs	r2, #7
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	683a      	ldr	r2, [r7, #0]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d1ee      	bne.n	8001a96 <HAL_RCC_ClockConfig+0x166>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	2204      	movs	r2, #4
 8001abe:	4013      	ands	r3, r2
 8001ac0:	d009      	beq.n	8001ad6 <HAL_RCC_ClockConfig+0x1a6>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ac2:	4b14      	ldr	r3, [pc, #80]	@ (8001b14 <HAL_RCC_ClockConfig+0x1e4>)
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	4a16      	ldr	r2, [pc, #88]	@ (8001b20 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac8:	4013      	ands	r3, r2
 8001aca:	0019      	movs	r1, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	691a      	ldr	r2, [r3, #16]
 8001ad0:	4b10      	ldr	r3, [pc, #64]	@ (8001b14 <HAL_RCC_ClockConfig+0x1e4>)
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001ad6:	f000 f82b 	bl	8001b30 <HAL_RCC_GetSysClockFreq>
 8001ada:	0001      	movs	r1, r0
 8001adc:	4b0d      	ldr	r3, [pc, #52]	@ (8001b14 <HAL_RCC_ClockConfig+0x1e4>)
 8001ade:	689b      	ldr	r3, [r3, #8]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	220f      	movs	r2, #15
 8001ae4:	401a      	ands	r2, r3
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8001b24 <HAL_RCC_ClockConfig+0x1f4>)
 8001ae8:	0092      	lsls	r2, r2, #2
 8001aea:	58d3      	ldr	r3, [r2, r3]
                                                                  >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001aec:	221f      	movs	r2, #31
 8001aee:	4013      	ands	r3, r2
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) \
 8001af0:	000a      	movs	r2, r1
 8001af2:	40da      	lsrs	r2, r3
 8001af4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <HAL_RCC_ClockConfig+0x1f8>)
 8001af6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001af8:	4b0c      	ldr	r3, [pc, #48]	@ (8001b2c <HAL_RCC_ClockConfig+0x1fc>)
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	0018      	movs	r0, r3
 8001afe:	f7ff fa21 	bl	8000f44 <HAL_InitTick>
 8001b02:	0003      	movs	r3, r0
}
 8001b04:	0018      	movs	r0, r3
 8001b06:	46bd      	mov	sp, r7
 8001b08:	b004      	add	sp, #16
 8001b0a:	bd80      	pop	{r7, pc}
 8001b0c:	40022000 	.word	0x40022000
 8001b10:	00001388 	.word	0x00001388
 8001b14:	40021000 	.word	0x40021000
 8001b18:	ffff84ff 	.word	0xffff84ff
 8001b1c:	fffff0ff 	.word	0xfffff0ff
 8001b20:	ffff8fff 	.word	0xffff8fff
 8001b24:	08002584 	.word	0x08002584
 8001b28:	20000000 	.word	0x20000000
 8001b2c:	20000004 	.word	0x20000004

08001b30 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;
#if defined(RCC_CR_SYSDIV)
  uint32_t sysclockdiv = (uint32_t)(((RCC->CR & RCC_CR_SYSDIV) >> RCC_CR_SYSDIV_Pos) + 1U);
#endif /* RCC_CR_SYSDIV */

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001b36:	4b1c      	ldr	r3, [pc, #112]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001b38:	689b      	ldr	r3, [r3, #8]
 8001b3a:	2238      	movs	r2, #56	@ 0x38
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d10f      	bne.n	8001b60 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001b40:	4b19      	ldr	r3, [pc, #100]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	0adb      	lsrs	r3, r3, #11
 8001b46:	2207      	movs	r2, #7
 8001b48:	4013      	ands	r3, r2
 8001b4a:	2201      	movs	r2, #1
 8001b4c:	409a      	lsls	r2, r3
 8001b4e:	0013      	movs	r3, r2
 8001b50:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001b52:	6839      	ldr	r1, [r7, #0]
 8001b54:	4815      	ldr	r0, [pc, #84]	@ (8001bac <HAL_RCC_GetSysClockFreq+0x7c>)
 8001b56:	f7fe fad7 	bl	8000108 <__udivsi3>
 8001b5a:	0003      	movs	r3, r0
 8001b5c:	607b      	str	r3, [r7, #4]
 8001b5e:	e01e      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001b60:	4b11      	ldr	r3, [pc, #68]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	2238      	movs	r2, #56	@ 0x38
 8001b66:	4013      	ands	r3, r2
 8001b68:	2b08      	cmp	r3, #8
 8001b6a:	d102      	bne.n	8001b72 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001b6c:	4b10      	ldr	r3, [pc, #64]	@ (8001bb0 <HAL_RCC_GetSysClockFreq+0x80>)
 8001b6e:	607b      	str	r3, [r7, #4]
 8001b70:	e015      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001b72:	4b0d      	ldr	r3, [pc, #52]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001b74:	689b      	ldr	r3, [r3, #8]
 8001b76:	2238      	movs	r2, #56	@ 0x38
 8001b78:	4013      	ands	r3, r2
 8001b7a:	2b20      	cmp	r3, #32
 8001b7c:	d103      	bne.n	8001b86 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001b7e:	2380      	movs	r3, #128	@ 0x80
 8001b80:	021b      	lsls	r3, r3, #8
 8001b82:	607b      	str	r3, [r7, #4]
 8001b84:	e00b      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001b86:	4b08      	ldr	r3, [pc, #32]	@ (8001ba8 <HAL_RCC_GetSysClockFreq+0x78>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	2238      	movs	r2, #56	@ 0x38
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	2b18      	cmp	r3, #24
 8001b90:	d103      	bne.n	8001b9a <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001b92:	23fa      	movs	r3, #250	@ 0xfa
 8001b94:	01db      	lsls	r3, r3, #7
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	e001      	b.n	8001b9e <HAL_RCC_GetSysClockFreq+0x6e>
    sysclockfreq = HSI48_VALUE;
  }
#endif /* RCC_HSI48_SUPPORT */
  else
  {
    sysclockfreq = 0U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
  }
#if defined(RCC_CR_SYSDIV)
  sysclockfreq = sysclockfreq / sysclockdiv;
#endif /* RCC_CR_SYSDIV */
  return sysclockfreq;
 8001b9e:	687b      	ldr	r3, [r7, #4]
}
 8001ba0:	0018      	movs	r0, r3
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	b002      	add	sp, #8
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	40021000 	.word	0x40021000
 8001bac:	02dc6c00 	.word	0x02dc6c00
 8001bb0:	007a1200 	.word	0x007a1200

08001bb4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b082      	sub	sp, #8
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d101      	bne.n	8001bc6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	e04a      	b.n	8001c5c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	223d      	movs	r2, #61	@ 0x3d
 8001bca:	5c9b      	ldrb	r3, [r3, r2]
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d107      	bne.n	8001be2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	223c      	movs	r2, #60	@ 0x3c
 8001bd6:	2100      	movs	r1, #0
 8001bd8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f7ff f8df 	bl	8000da0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	223d      	movs	r2, #61	@ 0x3d
 8001be6:	2102      	movs	r1, #2
 8001be8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681a      	ldr	r2, [r3, #0]
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	0019      	movs	r1, r3
 8001bf4:	0010      	movs	r0, r2
 8001bf6:	f000 fac7 	bl	8002188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	2248      	movs	r2, #72	@ 0x48
 8001bfe:	2101      	movs	r1, #1
 8001c00:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	223e      	movs	r2, #62	@ 0x3e
 8001c06:	2101      	movs	r1, #1
 8001c08:	5499      	strb	r1, [r3, r2]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	223f      	movs	r2, #63	@ 0x3f
 8001c0e:	2101      	movs	r1, #1
 8001c10:	5499      	strb	r1, [r3, r2]
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2240      	movs	r2, #64	@ 0x40
 8001c16:	2101      	movs	r1, #1
 8001c18:	5499      	strb	r1, [r3, r2]
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2241      	movs	r2, #65	@ 0x41
 8001c1e:	2101      	movs	r1, #1
 8001c20:	5499      	strb	r1, [r3, r2]
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	2242      	movs	r2, #66	@ 0x42
 8001c26:	2101      	movs	r1, #1
 8001c28:	5499      	strb	r1, [r3, r2]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2243      	movs	r2, #67	@ 0x43
 8001c2e:	2101      	movs	r1, #1
 8001c30:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	2244      	movs	r2, #68	@ 0x44
 8001c36:	2101      	movs	r1, #1
 8001c38:	5499      	strb	r1, [r3, r2]
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2245      	movs	r2, #69	@ 0x45
 8001c3e:	2101      	movs	r1, #1
 8001c40:	5499      	strb	r1, [r3, r2]
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2246      	movs	r2, #70	@ 0x46
 8001c46:	2101      	movs	r1, #1
 8001c48:	5499      	strb	r1, [r3, r2]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	2247      	movs	r2, #71	@ 0x47
 8001c4e:	2101      	movs	r1, #1
 8001c50:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	223d      	movs	r2, #61	@ 0x3d
 8001c56:	2101      	movs	r1, #1
 8001c58:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	0018      	movs	r0, r3
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	b002      	add	sp, #8
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	223d      	movs	r2, #61	@ 0x3d
 8001c70:	5c9b      	ldrb	r3, [r3, r2]
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	2b01      	cmp	r3, #1
 8001c76:	d001      	beq.n	8001c7c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8001c78:	2301      	movs	r3, #1
 8001c7a:	e02f      	b.n	8001cdc <HAL_TIM_Base_Start+0x78>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	223d      	movs	r2, #61	@ 0x3d
 8001c80:	2102      	movs	r1, #2
 8001c82:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a16      	ldr	r2, [pc, #88]	@ (8001ce4 <HAL_TIM_Base_Start+0x80>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d004      	beq.n	8001c98 <HAL_TIM_Base_Start+0x34>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4a15      	ldr	r2, [pc, #84]	@ (8001ce8 <HAL_TIM_Base_Start+0x84>)
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d116      	bne.n	8001cc6 <HAL_TIM_Base_Start+0x62>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	689b      	ldr	r3, [r3, #8]
 8001c9e:	4a13      	ldr	r2, [pc, #76]	@ (8001cec <HAL_TIM_Base_Start+0x88>)
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	2b06      	cmp	r3, #6
 8001ca8:	d016      	beq.n	8001cd8 <HAL_TIM_Base_Start+0x74>
 8001caa:	68fa      	ldr	r2, [r7, #12]
 8001cac:	2380      	movs	r3, #128	@ 0x80
 8001cae:	025b      	lsls	r3, r3, #9
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d011      	beq.n	8001cd8 <HAL_TIM_Base_Start+0x74>
    {
      __HAL_TIM_ENABLE(htim);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	681a      	ldr	r2, [r3, #0]
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	2101      	movs	r1, #1
 8001cc0:	430a      	orrs	r2, r1
 8001cc2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cc4:	e008      	b.n	8001cd8 <HAL_TIM_Base_Start+0x74>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	681a      	ldr	r2, [r3, #0]
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	2101      	movs	r1, #1
 8001cd2:	430a      	orrs	r2, r1
 8001cd4:	601a      	str	r2, [r3, #0]
 8001cd6:	e000      	b.n	8001cda <HAL_TIM_Base_Start+0x76>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001cd8:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	0018      	movs	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	b004      	add	sp, #16
 8001ce2:	bd80      	pop	{r7, pc}
 8001ce4:	40012c00 	.word	0x40012c00
 8001ce8:	40000400 	.word	0x40000400
 8001cec:	00010007 	.word	0x00010007

08001cf0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001cf0:	b580      	push	{r7, lr}
 8001cf2:	b084      	sub	sp, #16
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	223d      	movs	r2, #61	@ 0x3d
 8001cfc:	5c9b      	ldrb	r3, [r3, r2]
 8001cfe:	b2db      	uxtb	r3, r3
 8001d00:	2b01      	cmp	r3, #1
 8001d02:	d001      	beq.n	8001d08 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e037      	b.n	8001d78 <HAL_TIM_Base_Start_IT+0x88>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	223d      	movs	r2, #61	@ 0x3d
 8001d0c:	2102      	movs	r1, #2
 8001d0e:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	68da      	ldr	r2, [r3, #12]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2101      	movs	r1, #1
 8001d1c:	430a      	orrs	r2, r1
 8001d1e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	4a16      	ldr	r2, [pc, #88]	@ (8001d80 <HAL_TIM_Base_Start_IT+0x90>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d004      	beq.n	8001d34 <HAL_TIM_Base_Start_IT+0x44>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	4a15      	ldr	r2, [pc, #84]	@ (8001d84 <HAL_TIM_Base_Start_IT+0x94>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d116      	bne.n	8001d62 <HAL_TIM_Base_Start_IT+0x72>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	689b      	ldr	r3, [r3, #8]
 8001d3a:	4a13      	ldr	r2, [pc, #76]	@ (8001d88 <HAL_TIM_Base_Start_IT+0x98>)
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2b06      	cmp	r3, #6
 8001d44:	d016      	beq.n	8001d74 <HAL_TIM_Base_Start_IT+0x84>
 8001d46:	68fa      	ldr	r2, [r7, #12]
 8001d48:	2380      	movs	r3, #128	@ 0x80
 8001d4a:	025b      	lsls	r3, r3, #9
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d011      	beq.n	8001d74 <HAL_TIM_Base_Start_IT+0x84>
    {
      __HAL_TIM_ENABLE(htim);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	2101      	movs	r1, #1
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d60:	e008      	b.n	8001d74 <HAL_TIM_Base_Start_IT+0x84>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2101      	movs	r1, #1
 8001d6e:	430a      	orrs	r2, r1
 8001d70:	601a      	str	r2, [r3, #0]
 8001d72:	e000      	b.n	8001d76 <HAL_TIM_Base_Start_IT+0x86>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d74:	46c0      	nop			@ (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8001d76:	2300      	movs	r3, #0
}
 8001d78:	0018      	movs	r0, r3
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	b004      	add	sp, #16
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40012c00 	.word	0x40012c00
 8001d84:	40000400 	.word	0x40000400
 8001d88:	00010007 	.word	0x00010007

08001d8c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b084      	sub	sp, #16
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	691b      	ldr	r3, [r3, #16]
 8001da2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8001da4:	68bb      	ldr	r3, [r7, #8]
 8001da6:	2202      	movs	r2, #2
 8001da8:	4013      	ands	r3, r2
 8001daa:	d021      	beq.n	8001df0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	2202      	movs	r2, #2
 8001db0:	4013      	ands	r3, r2
 8001db2:	d01d      	beq.n	8001df0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	2203      	movs	r2, #3
 8001dba:	4252      	negs	r2, r2
 8001dbc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	699b      	ldr	r3, [r3, #24]
 8001dca:	2203      	movs	r2, #3
 8001dcc:	4013      	ands	r3, r2
 8001dce:	d004      	beq.n	8001dda <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	0018      	movs	r0, r3
 8001dd4:	f000 f9c0 	bl	8002158 <HAL_TIM_IC_CaptureCallback>
 8001dd8:	e007      	b.n	8001dea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f000 f9b3 	bl	8002148 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	0018      	movs	r0, r3
 8001de6:	f000 f9bf 	bl	8002168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2200      	movs	r2, #0
 8001dee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	2204      	movs	r2, #4
 8001df4:	4013      	ands	r3, r2
 8001df6:	d022      	beq.n	8001e3e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	2204      	movs	r2, #4
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d01e      	beq.n	8001e3e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2205      	movs	r2, #5
 8001e06:	4252      	negs	r2, r2
 8001e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	2202      	movs	r2, #2
 8001e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	699a      	ldr	r2, [r3, #24]
 8001e16:	23c0      	movs	r3, #192	@ 0xc0
 8001e18:	009b      	lsls	r3, r3, #2
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d004      	beq.n	8001e28 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	0018      	movs	r0, r3
 8001e22:	f000 f999 	bl	8002158 <HAL_TIM_IC_CaptureCallback>
 8001e26:	e007      	b.n	8001e38 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	f000 f98c 	bl	8002148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	0018      	movs	r0, r3
 8001e34:	f000 f998 	bl	8002168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2200      	movs	r2, #0
 8001e3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	2208      	movs	r2, #8
 8001e42:	4013      	ands	r3, r2
 8001e44:	d021      	beq.n	8001e8a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2208      	movs	r2, #8
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d01d      	beq.n	8001e8a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2209      	movs	r2, #9
 8001e54:	4252      	negs	r2, r2
 8001e56:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	69db      	ldr	r3, [r3, #28]
 8001e64:	2203      	movs	r2, #3
 8001e66:	4013      	ands	r3, r2
 8001e68:	d004      	beq.n	8001e74 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	0018      	movs	r0, r3
 8001e6e:	f000 f973 	bl	8002158 <HAL_TIM_IC_CaptureCallback>
 8001e72:	e007      	b.n	8001e84 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	0018      	movs	r0, r3
 8001e78:	f000 f966 	bl	8002148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f000 f972 	bl	8002168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2200      	movs	r2, #0
 8001e88:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8001e8a:	68bb      	ldr	r3, [r7, #8]
 8001e8c:	2210      	movs	r2, #16
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d022      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2210      	movs	r2, #16
 8001e96:	4013      	ands	r3, r2
 8001e98:	d01e      	beq.n	8001ed8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	2211      	movs	r2, #17
 8001ea0:	4252      	negs	r2, r2
 8001ea2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2208      	movs	r2, #8
 8001ea8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	69da      	ldr	r2, [r3, #28]
 8001eb0:	23c0      	movs	r3, #192	@ 0xc0
 8001eb2:	009b      	lsls	r3, r3, #2
 8001eb4:	4013      	ands	r3, r2
 8001eb6:	d004      	beq.n	8001ec2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	0018      	movs	r0, r3
 8001ebc:	f000 f94c 	bl	8002158 <HAL_TIM_IC_CaptureCallback>
 8001ec0:	e007      	b.n	8001ed2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	0018      	movs	r0, r3
 8001ec6:	f000 f93f 	bl	8002148 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	0018      	movs	r0, r3
 8001ece:	f000 f94b 	bl	8002168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8001ed8:	68bb      	ldr	r3, [r7, #8]
 8001eda:	2201      	movs	r2, #1
 8001edc:	4013      	ands	r3, r2
 8001ede:	d00c      	beq.n	8001efa <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	d008      	beq.n	8001efa <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	2202      	movs	r2, #2
 8001eee:	4252      	negs	r2, r2
 8001ef0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	0018      	movs	r0, r3
 8001ef6:	f7fe fc67 	bl	80007c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2280      	movs	r2, #128	@ 0x80
 8001efe:	4013      	ands	r3, r2
 8001f00:	d104      	bne.n	8001f0c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8001f02:	68ba      	ldr	r2, [r7, #8]
 8001f04:	2380      	movs	r3, #128	@ 0x80
 8001f06:	019b      	lsls	r3, r3, #6
 8001f08:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8001f0a:	d00b      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2280      	movs	r2, #128	@ 0x80
 8001f10:	4013      	ands	r3, r2
 8001f12:	d007      	beq.n	8001f24 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	4a1e      	ldr	r2, [pc, #120]	@ (8001f94 <HAL_TIM_IRQHandler+0x208>)
 8001f1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	0018      	movs	r0, r3
 8001f20:	f000 faaa 	bl	8002478 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8001f24:	68ba      	ldr	r2, [r7, #8]
 8001f26:	2380      	movs	r3, #128	@ 0x80
 8001f28:	005b      	lsls	r3, r3, #1
 8001f2a:	4013      	ands	r3, r2
 8001f2c:	d00b      	beq.n	8001f46 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	2280      	movs	r2, #128	@ 0x80
 8001f32:	4013      	ands	r3, r2
 8001f34:	d007      	beq.n	8001f46 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4a17      	ldr	r2, [pc, #92]	@ (8001f98 <HAL_TIM_IRQHandler+0x20c>)
 8001f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	0018      	movs	r0, r3
 8001f42:	f000 faa1 	bl	8002488 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	2240      	movs	r2, #64	@ 0x40
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d00c      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	2240      	movs	r2, #64	@ 0x40
 8001f52:	4013      	ands	r3, r2
 8001f54:	d008      	beq.n	8001f68 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	2241      	movs	r2, #65	@ 0x41
 8001f5c:	4252      	negs	r2, r2
 8001f5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	0018      	movs	r0, r3
 8001f64:	f000 f908 	bl	8002178 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	2220      	movs	r2, #32
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	d00c      	beq.n	8001f8a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2220      	movs	r2, #32
 8001f74:	4013      	ands	r3, r2
 8001f76:	d008      	beq.n	8001f8a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	2221      	movs	r2, #33	@ 0x21
 8001f7e:	4252      	negs	r2, r2
 8001f80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	0018      	movs	r0, r3
 8001f86:	f000 fa6f 	bl	8002468 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001f8a:	46c0      	nop			@ (mov r8, r8)
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	b004      	add	sp, #16
 8001f90:	bd80      	pop	{r7, pc}
 8001f92:	46c0      	nop			@ (mov r8, r8)
 8001f94:	ffffdf7f 	.word	0xffffdf7f
 8001f98:	fffffeff 	.word	0xfffffeff

08001f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa6:	230f      	movs	r3, #15
 8001fa8:	18fb      	adds	r3, r7, r3
 8001faa:	2200      	movs	r2, #0
 8001fac:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	223c      	movs	r2, #60	@ 0x3c
 8001fb2:	5c9b      	ldrb	r3, [r3, r2]
 8001fb4:	2b01      	cmp	r3, #1
 8001fb6:	d101      	bne.n	8001fbc <HAL_TIM_ConfigClockSource+0x20>
 8001fb8:	2302      	movs	r3, #2
 8001fba:	e0bc      	b.n	8002136 <HAL_TIM_ConfigClockSource+0x19a>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	223c      	movs	r2, #60	@ 0x3c
 8001fc0:	2101      	movs	r1, #1
 8001fc2:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	223d      	movs	r2, #61	@ 0x3d
 8001fc8:	2102      	movs	r1, #2
 8001fca:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	4a5a      	ldr	r2, [pc, #360]	@ (8002140 <HAL_TIM_ConfigClockSource+0x1a4>)
 8001fd8:	4013      	ands	r3, r2
 8001fda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	4a59      	ldr	r2, [pc, #356]	@ (8002144 <HAL_TIM_ConfigClockSource+0x1a8>)
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	2280      	movs	r2, #128	@ 0x80
 8001ff2:	0192      	lsls	r2, r2, #6
 8001ff4:	4293      	cmp	r3, r2
 8001ff6:	d040      	beq.n	800207a <HAL_TIM_ConfigClockSource+0xde>
 8001ff8:	2280      	movs	r2, #128	@ 0x80
 8001ffa:	0192      	lsls	r2, r2, #6
 8001ffc:	4293      	cmp	r3, r2
 8001ffe:	d900      	bls.n	8002002 <HAL_TIM_ConfigClockSource+0x66>
 8002000:	e088      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x178>
 8002002:	2280      	movs	r2, #128	@ 0x80
 8002004:	0152      	lsls	r2, r2, #5
 8002006:	4293      	cmp	r3, r2
 8002008:	d100      	bne.n	800200c <HAL_TIM_ConfigClockSource+0x70>
 800200a:	e088      	b.n	800211e <HAL_TIM_ConfigClockSource+0x182>
 800200c:	2280      	movs	r2, #128	@ 0x80
 800200e:	0152      	lsls	r2, r2, #5
 8002010:	4293      	cmp	r3, r2
 8002012:	d900      	bls.n	8002016 <HAL_TIM_ConfigClockSource+0x7a>
 8002014:	e07e      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x178>
 8002016:	2b70      	cmp	r3, #112	@ 0x70
 8002018:	d018      	beq.n	800204c <HAL_TIM_ConfigClockSource+0xb0>
 800201a:	d900      	bls.n	800201e <HAL_TIM_ConfigClockSource+0x82>
 800201c:	e07a      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x178>
 800201e:	2b60      	cmp	r3, #96	@ 0x60
 8002020:	d04f      	beq.n	80020c2 <HAL_TIM_ConfigClockSource+0x126>
 8002022:	d900      	bls.n	8002026 <HAL_TIM_ConfigClockSource+0x8a>
 8002024:	e076      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x178>
 8002026:	2b50      	cmp	r3, #80	@ 0x50
 8002028:	d03b      	beq.n	80020a2 <HAL_TIM_ConfigClockSource+0x106>
 800202a:	d900      	bls.n	800202e <HAL_TIM_ConfigClockSource+0x92>
 800202c:	e072      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x178>
 800202e:	2b40      	cmp	r3, #64	@ 0x40
 8002030:	d057      	beq.n	80020e2 <HAL_TIM_ConfigClockSource+0x146>
 8002032:	d900      	bls.n	8002036 <HAL_TIM_ConfigClockSource+0x9a>
 8002034:	e06e      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x178>
 8002036:	2b30      	cmp	r3, #48	@ 0x30
 8002038:	d063      	beq.n	8002102 <HAL_TIM_ConfigClockSource+0x166>
 800203a:	d86b      	bhi.n	8002114 <HAL_TIM_ConfigClockSource+0x178>
 800203c:	2b20      	cmp	r3, #32
 800203e:	d060      	beq.n	8002102 <HAL_TIM_ConfigClockSource+0x166>
 8002040:	d868      	bhi.n	8002114 <HAL_TIM_ConfigClockSource+0x178>
 8002042:	2b00      	cmp	r3, #0
 8002044:	d05d      	beq.n	8002102 <HAL_TIM_ConfigClockSource+0x166>
 8002046:	2b10      	cmp	r3, #16
 8002048:	d05b      	beq.n	8002102 <HAL_TIM_ConfigClockSource+0x166>
 800204a:	e063      	b.n	8002114 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800205c:	f000 f982 	bl	8002364 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	689b      	ldr	r3, [r3, #8]
 8002066:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2277      	movs	r2, #119	@ 0x77
 800206c:	4313      	orrs	r3, r2
 800206e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	68ba      	ldr	r2, [r7, #8]
 8002076:	609a      	str	r2, [r3, #8]
      break;
 8002078:	e052      	b.n	8002120 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800207e:	683b      	ldr	r3, [r7, #0]
 8002080:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002082:	683b      	ldr	r3, [r7, #0]
 8002084:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800208a:	f000 f96b 	bl	8002364 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	689a      	ldr	r2, [r3, #8]
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	2180      	movs	r1, #128	@ 0x80
 800209a:	01c9      	lsls	r1, r1, #7
 800209c:	430a      	orrs	r2, r1
 800209e:	609a      	str	r2, [r3, #8]
      break;
 80020a0:	e03e      	b.n	8002120 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ae:	001a      	movs	r2, r3
 80020b0:	f000 f8dc 	bl	800226c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2150      	movs	r1, #80	@ 0x50
 80020ba:	0018      	movs	r0, r3
 80020bc:	f000 f936 	bl	800232c <TIM_ITRx_SetConfig>
      break;
 80020c0:	e02e      	b.n	8002120 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020ca:	683b      	ldr	r3, [r7, #0]
 80020cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80020ce:	001a      	movs	r2, r3
 80020d0:	f000 f8fa 	bl	80022c8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2160      	movs	r1, #96	@ 0x60
 80020da:	0018      	movs	r0, r3
 80020dc:	f000 f926 	bl	800232c <TIM_ITRx_SetConfig>
      break;
 80020e0:	e01e      	b.n	8002120 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020ea:	683b      	ldr	r3, [r7, #0]
 80020ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020ee:	001a      	movs	r2, r3
 80020f0:	f000 f8bc 	bl	800226c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	2140      	movs	r1, #64	@ 0x40
 80020fa:	0018      	movs	r0, r3
 80020fc:	f000 f916 	bl	800232c <TIM_ITRx_SetConfig>
      break;
 8002100:	e00e      	b.n	8002120 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	683b      	ldr	r3, [r7, #0]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	0019      	movs	r1, r3
 800210c:	0010      	movs	r0, r2
 800210e:	f000 f90d 	bl	800232c <TIM_ITRx_SetConfig>
      break;
 8002112:	e005      	b.n	8002120 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002114:	230f      	movs	r3, #15
 8002116:	18fb      	adds	r3, r7, r3
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]
      break;
 800211c:	e000      	b.n	8002120 <HAL_TIM_ConfigClockSource+0x184>
      break;
 800211e:	46c0      	nop			@ (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	223d      	movs	r2, #61	@ 0x3d
 8002124:	2101      	movs	r1, #1
 8002126:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	223c      	movs	r2, #60	@ 0x3c
 800212c:	2100      	movs	r1, #0
 800212e:	5499      	strb	r1, [r3, r2]

  return status;
 8002130:	230f      	movs	r3, #15
 8002132:	18fb      	adds	r3, r7, r3
 8002134:	781b      	ldrb	r3, [r3, #0]
}
 8002136:	0018      	movs	r0, r3
 8002138:	46bd      	mov	sp, r7
 800213a:	b004      	add	sp, #16
 800213c:	bd80      	pop	{r7, pc}
 800213e:	46c0      	nop			@ (mov r8, r8)
 8002140:	ffceff88 	.word	0xffceff88
 8002144:	ffff00ff 	.word	0xffff00ff

08002148 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b082      	sub	sp, #8
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002150:	46c0      	nop			@ (mov r8, r8)
 8002152:	46bd      	mov	sp, r7
 8002154:	b002      	add	sp, #8
 8002156:	bd80      	pop	{r7, pc}

08002158 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b082      	sub	sp, #8
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002160:	46c0      	nop			@ (mov r8, r8)
 8002162:	46bd      	mov	sp, r7
 8002164:	b002      	add	sp, #8
 8002166:	bd80      	pop	{r7, pc}

08002168 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	b082      	sub	sp, #8
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002170:	46c0      	nop			@ (mov r8, r8)
 8002172:	46bd      	mov	sp, r7
 8002174:	b002      	add	sp, #8
 8002176:	bd80      	pop	{r7, pc}

08002178 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002178:	b580      	push	{r7, lr}
 800217a:	b082      	sub	sp, #8
 800217c:	af00      	add	r7, sp, #0
 800217e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002180:	46c0      	nop			@ (mov r8, r8)
 8002182:	46bd      	mov	sp, r7
 8002184:	b002      	add	sp, #8
 8002186:	bd80      	pop	{r7, pc}

08002188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b084      	sub	sp, #16
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
 8002190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a2e      	ldr	r2, [pc, #184]	@ (8002254 <TIM_Base_SetConfig+0xcc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d003      	beq.n	80021a8 <TIM_Base_SetConfig+0x20>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a2d      	ldr	r2, [pc, #180]	@ (8002258 <TIM_Base_SetConfig+0xd0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d108      	bne.n	80021ba <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	2270      	movs	r2, #112	@ 0x70
 80021ac:	4393      	bics	r3, r2
 80021ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	685b      	ldr	r3, [r3, #4]
 80021b4:	68fa      	ldr	r2, [r7, #12]
 80021b6:	4313      	orrs	r3, r2
 80021b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	4a25      	ldr	r2, [pc, #148]	@ (8002254 <TIM_Base_SetConfig+0xcc>)
 80021be:	4293      	cmp	r3, r2
 80021c0:	d00f      	beq.n	80021e2 <TIM_Base_SetConfig+0x5a>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	4a24      	ldr	r2, [pc, #144]	@ (8002258 <TIM_Base_SetConfig+0xd0>)
 80021c6:	4293      	cmp	r3, r2
 80021c8:	d00b      	beq.n	80021e2 <TIM_Base_SetConfig+0x5a>
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	4a23      	ldr	r2, [pc, #140]	@ (800225c <TIM_Base_SetConfig+0xd4>)
 80021ce:	4293      	cmp	r3, r2
 80021d0:	d007      	beq.n	80021e2 <TIM_Base_SetConfig+0x5a>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	4a22      	ldr	r2, [pc, #136]	@ (8002260 <TIM_Base_SetConfig+0xd8>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d003      	beq.n	80021e2 <TIM_Base_SetConfig+0x5a>
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	4a21      	ldr	r2, [pc, #132]	@ (8002264 <TIM_Base_SetConfig+0xdc>)
 80021de:	4293      	cmp	r3, r2
 80021e0:	d108      	bne.n	80021f4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	4a20      	ldr	r2, [pc, #128]	@ (8002268 <TIM_Base_SetConfig+0xe0>)
 80021e6:	4013      	ands	r3, r2
 80021e8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	68fa      	ldr	r2, [r7, #12]
 80021f0:	4313      	orrs	r3, r2
 80021f2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	2280      	movs	r2, #128	@ 0x80
 80021f8:	4393      	bics	r3, r2
 80021fa:	001a      	movs	r2, r3
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	695b      	ldr	r3, [r3, #20]
 8002200:	4313      	orrs	r3, r2
 8002202:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	681a      	ldr	r2, [r3, #0]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	4a0f      	ldr	r2, [pc, #60]	@ (8002254 <TIM_Base_SetConfig+0xcc>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d007      	beq.n	800222c <TIM_Base_SetConfig+0xa4>
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4a10      	ldr	r2, [pc, #64]	@ (8002260 <TIM_Base_SetConfig+0xd8>)
 8002220:	4293      	cmp	r3, r2
 8002222:	d003      	beq.n	800222c <TIM_Base_SetConfig+0xa4>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	4a0f      	ldr	r2, [pc, #60]	@ (8002264 <TIM_Base_SetConfig+0xdc>)
 8002228:	4293      	cmp	r3, r2
 800222a:	d103      	bne.n	8002234 <TIM_Base_SetConfig+0xac>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800222c:	683b      	ldr	r3, [r7, #0]
 800222e:	691a      	ldr	r2, [r3, #16]
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	2204      	movs	r2, #4
 800223a:	431a      	orrs	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	68fa      	ldr	r2, [r7, #12]
 800224a:	601a      	str	r2, [r3, #0]
}
 800224c:	46c0      	nop			@ (mov r8, r8)
 800224e:	46bd      	mov	sp, r7
 8002250:	b004      	add	sp, #16
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40012c00 	.word	0x40012c00
 8002258:	40000400 	.word	0x40000400
 800225c:	40002000 	.word	0x40002000
 8002260:	40014400 	.word	0x40014400
 8002264:	40014800 	.word	0x40014800
 8002268:	fffffcff 	.word	0xfffffcff

0800226c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a1b      	ldr	r3, [r3, #32]
 800227c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	2201      	movs	r2, #1
 8002284:	4393      	bics	r3, r2
 8002286:	001a      	movs	r2, r3
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	699b      	ldr	r3, [r3, #24]
 8002290:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002292:	693b      	ldr	r3, [r7, #16]
 8002294:	22f0      	movs	r2, #240	@ 0xf0
 8002296:	4393      	bics	r3, r2
 8002298:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	693a      	ldr	r2, [r7, #16]
 80022a0:	4313      	orrs	r3, r2
 80022a2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	220a      	movs	r2, #10
 80022a8:	4393      	bics	r3, r2
 80022aa:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80022ac:	697a      	ldr	r2, [r7, #20]
 80022ae:	68bb      	ldr	r3, [r7, #8]
 80022b0:	4313      	orrs	r3, r2
 80022b2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	693a      	ldr	r2, [r7, #16]
 80022b8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	697a      	ldr	r2, [r7, #20]
 80022be:	621a      	str	r2, [r3, #32]
}
 80022c0:	46c0      	nop			@ (mov r8, r8)
 80022c2:	46bd      	mov	sp, r7
 80022c4:	b006      	add	sp, #24
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	60b9      	str	r1, [r7, #8]
 80022d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6a1b      	ldr	r3, [r3, #32]
 80022d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a1b      	ldr	r3, [r3, #32]
 80022de:	2210      	movs	r2, #16
 80022e0:	4393      	bics	r3, r2
 80022e2:	001a      	movs	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	699b      	ldr	r3, [r3, #24]
 80022ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002328 <TIM_TI2_ConfigInputStage+0x60>)
 80022f2:	4013      	ands	r3, r2
 80022f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	031b      	lsls	r3, r3, #12
 80022fa:	693a      	ldr	r2, [r7, #16]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	22a0      	movs	r2, #160	@ 0xa0
 8002304:	4393      	bics	r3, r2
 8002306:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002308:	68bb      	ldr	r3, [r7, #8]
 800230a:	011b      	lsls	r3, r3, #4
 800230c:	697a      	ldr	r2, [r7, #20]
 800230e:	4313      	orrs	r3, r2
 8002310:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	693a      	ldr	r2, [r7, #16]
 8002316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	697a      	ldr	r2, [r7, #20]
 800231c:	621a      	str	r2, [r3, #32]
}
 800231e:	46c0      	nop			@ (mov r8, r8)
 8002320:	46bd      	mov	sp, r7
 8002322:	b006      	add	sp, #24
 8002324:	bd80      	pop	{r7, pc}
 8002326:	46c0      	nop			@ (mov r8, r8)
 8002328:	ffff0fff 	.word	0xffff0fff

0800232c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800232c:	b580      	push	{r7, lr}
 800232e:	b084      	sub	sp, #16
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	689b      	ldr	r3, [r3, #8]
 800233a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	4a08      	ldr	r2, [pc, #32]	@ (8002360 <TIM_ITRx_SetConfig+0x34>)
 8002340:	4013      	ands	r3, r2
 8002342:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002344:	683a      	ldr	r2, [r7, #0]
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	4313      	orrs	r3, r2
 800234a:	2207      	movs	r2, #7
 800234c:	4313      	orrs	r3, r2
 800234e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68fa      	ldr	r2, [r7, #12]
 8002354:	609a      	str	r2, [r3, #8]
}
 8002356:	46c0      	nop			@ (mov r8, r8)
 8002358:	46bd      	mov	sp, r7
 800235a:	b004      	add	sp, #16
 800235c:	bd80      	pop	{r7, pc}
 800235e:	46c0      	nop			@ (mov r8, r8)
 8002360:	ffcfff8f 	.word	0xffcfff8f

08002364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	60f8      	str	r0, [r7, #12]
 800236c:	60b9      	str	r1, [r7, #8]
 800236e:	607a      	str	r2, [r7, #4]
 8002370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002378:	697b      	ldr	r3, [r7, #20]
 800237a:	4a09      	ldr	r2, [pc, #36]	@ (80023a0 <TIM_ETR_SetConfig+0x3c>)
 800237c:	4013      	ands	r3, r2
 800237e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	021a      	lsls	r2, r3, #8
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	431a      	orrs	r2, r3
 8002388:	68bb      	ldr	r3, [r7, #8]
 800238a:	4313      	orrs	r3, r2
 800238c:	697a      	ldr	r2, [r7, #20]
 800238e:	4313      	orrs	r3, r2
 8002390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	697a      	ldr	r2, [r7, #20]
 8002396:	609a      	str	r2, [r3, #8]
}
 8002398:	46c0      	nop			@ (mov r8, r8)
 800239a:	46bd      	mov	sp, r7
 800239c:	b006      	add	sp, #24
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	ffff00ff 	.word	0xffff00ff

080023a4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b084      	sub	sp, #16
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	223c      	movs	r2, #60	@ 0x3c
 80023b2:	5c9b      	ldrb	r3, [r3, r2]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e04a      	b.n	8002452 <HAL_TIMEx_MasterConfigSynchronization+0xae>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	223c      	movs	r2, #60	@ 0x3c
 80023c0:	2101      	movs	r1, #1
 80023c2:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	223d      	movs	r2, #61	@ 0x3d
 80023c8:	2102      	movs	r1, #2
 80023ca:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a1e      	ldr	r2, [pc, #120]	@ (800245c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d108      	bne.n	80023f8 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	4a1d      	ldr	r2, [pc, #116]	@ (8002460 <HAL_TIMEx_MasterConfigSynchronization+0xbc>)
 80023ea:	4013      	ands	r3, r2
 80023ec:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685b      	ldr	r3, [r3, #4]
 80023f2:	68fa      	ldr	r2, [r7, #12]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2270      	movs	r2, #112	@ 0x70
 80023fc:	4393      	bics	r3, r2
 80023fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002400:	683b      	ldr	r3, [r7, #0]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	68fa      	ldr	r2, [r7, #12]
 8002406:	4313      	orrs	r3, r2
 8002408:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	68fa      	ldr	r2, [r7, #12]
 8002410:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a11      	ldr	r2, [pc, #68]	@ (800245c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d004      	beq.n	8002426 <HAL_TIMEx_MasterConfigSynchronization+0x82>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a10      	ldr	r2, [pc, #64]	@ (8002464 <HAL_TIMEx_MasterConfigSynchronization+0xc0>)
 8002422:	4293      	cmp	r3, r2
 8002424:	d10c      	bne.n	8002440 <HAL_TIMEx_MasterConfigSynchronization+0x9c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	2280      	movs	r2, #128	@ 0x80
 800242a:	4393      	bics	r3, r2
 800242c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	68ba      	ldr	r2, [r7, #8]
 8002434:	4313      	orrs	r3, r2
 8002436:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	68ba      	ldr	r2, [r7, #8]
 800243e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	223d      	movs	r2, #61	@ 0x3d
 8002444:	2101      	movs	r1, #1
 8002446:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	223c      	movs	r2, #60	@ 0x3c
 800244c:	2100      	movs	r1, #0
 800244e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002450:	2300      	movs	r3, #0
}
 8002452:	0018      	movs	r0, r3
 8002454:	46bd      	mov	sp, r7
 8002456:	b004      	add	sp, #16
 8002458:	bd80      	pop	{r7, pc}
 800245a:	46c0      	nop			@ (mov r8, r8)
 800245c:	40012c00 	.word	0x40012c00
 8002460:	ff0fffff 	.word	0xff0fffff
 8002464:	40000400 	.word	0x40000400

08002468 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002470:	46c0      	nop			@ (mov r8, r8)
 8002472:	46bd      	mov	sp, r7
 8002474:	b002      	add	sp, #8
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b082      	sub	sp, #8
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002480:	46c0      	nop			@ (mov r8, r8)
 8002482:	46bd      	mov	sp, r7
 8002484:	b002      	add	sp, #8
 8002486:	bd80      	pop	{r7, pc}

08002488 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b082      	sub	sp, #8
 800248c:	af00      	add	r7, sp, #0
 800248e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002490:	46c0      	nop			@ (mov r8, r8)
 8002492:	46bd      	mov	sp, r7
 8002494:	b002      	add	sp, #8
 8002496:	bd80      	pop	{r7, pc}

08002498 <memset>:
 8002498:	0003      	movs	r3, r0
 800249a:	1882      	adds	r2, r0, r2
 800249c:	4293      	cmp	r3, r2
 800249e:	d100      	bne.n	80024a2 <memset+0xa>
 80024a0:	4770      	bx	lr
 80024a2:	7019      	strb	r1, [r3, #0]
 80024a4:	3301      	adds	r3, #1
 80024a6:	e7f9      	b.n	800249c <memset+0x4>

080024a8 <__libc_init_array>:
 80024a8:	b570      	push	{r4, r5, r6, lr}
 80024aa:	2600      	movs	r6, #0
 80024ac:	4c0c      	ldr	r4, [pc, #48]	@ (80024e0 <__libc_init_array+0x38>)
 80024ae:	4d0d      	ldr	r5, [pc, #52]	@ (80024e4 <__libc_init_array+0x3c>)
 80024b0:	1b64      	subs	r4, r4, r5
 80024b2:	10a4      	asrs	r4, r4, #2
 80024b4:	42a6      	cmp	r6, r4
 80024b6:	d109      	bne.n	80024cc <__libc_init_array+0x24>
 80024b8:	2600      	movs	r6, #0
 80024ba:	f000 f819 	bl	80024f0 <_init>
 80024be:	4c0a      	ldr	r4, [pc, #40]	@ (80024e8 <__libc_init_array+0x40>)
 80024c0:	4d0a      	ldr	r5, [pc, #40]	@ (80024ec <__libc_init_array+0x44>)
 80024c2:	1b64      	subs	r4, r4, r5
 80024c4:	10a4      	asrs	r4, r4, #2
 80024c6:	42a6      	cmp	r6, r4
 80024c8:	d105      	bne.n	80024d6 <__libc_init_array+0x2e>
 80024ca:	bd70      	pop	{r4, r5, r6, pc}
 80024cc:	00b3      	lsls	r3, r6, #2
 80024ce:	58eb      	ldr	r3, [r5, r3]
 80024d0:	4798      	blx	r3
 80024d2:	3601      	adds	r6, #1
 80024d4:	e7ee      	b.n	80024b4 <__libc_init_array+0xc>
 80024d6:	00b3      	lsls	r3, r6, #2
 80024d8:	58eb      	ldr	r3, [r5, r3]
 80024da:	4798      	blx	r3
 80024dc:	3601      	adds	r6, #1
 80024de:	e7f2      	b.n	80024c6 <__libc_init_array+0x1e>
 80024e0:	080025c4 	.word	0x080025c4
 80024e4:	080025c4 	.word	0x080025c4
 80024e8:	080025c8 	.word	0x080025c8
 80024ec:	080025c4 	.word	0x080025c4

080024f0 <_init>:
 80024f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024f2:	46c0      	nop			@ (mov r8, r8)
 80024f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80024f6:	bc08      	pop	{r3}
 80024f8:	469e      	mov	lr, r3
 80024fa:	4770      	bx	lr

080024fc <_fini>:
 80024fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024fe:	46c0      	nop			@ (mov r8, r8)
 8002500:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002502:	bc08      	pop	{r3}
 8002504:	469e      	mov	lr, r3
 8002506:	4770      	bx	lr
